
XMC4500_MTSR_Start_002.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007b44  08000000  0c000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       000002e1  08007b44  0c007b44  0000fb44  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 Stack         00000800  10000000  10000000  00018000  2**0
                  ALLOC
  3 .data         000001bc  20000000  0c007e30  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000033c  200001bc  0c007fec  000101bc  2**2
                  ALLOC
  5 .no_init      00000014  2000ffc0  0c017df0  000101bc  2**2
                  ALLOC
  6 .debug_aranges 00001200  00000000  00000000  000101c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0001a2b0  00000000  00000000  000113c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004175  00000000  00000000  0002b670  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000a534  00000000  00000000  0002f7e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00004da0  00000000  00000000  00039d1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000a428  00000000  00000000  0003eabc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00008ffa  00000000  00000000  00048ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ef0  00000000  00000000  00051ede  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .build_attributes 00000d95  00000000  00000000  00052dce  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	19 29 00 08 b9 43 00 08 b1 02 00 08 b1 02 00 08     .)...C..........
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 41 04 00 08 b1 02 00 08     ........A.......
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 09 42 00 08     .............B..
 80001cc:	f9 41 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     .A..............
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */

 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>
	.align	1
    .thumb

 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
/* Reset Handler */
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c007e30 	.word	0x0c007e30
 800024c:	20000000 	.word	0x20000000
 8000250:	000001bc 	.word	0x000001bc
 8000254:	0c007fec 	.word	0x0c007fec
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c007e30 	.word	0x0c007e30
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c007e30 	.word	0x0c007e30
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	200001bc 	.word	0x200001bc
 800027c:	0000033c 	.word	0x0000033c
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */

 8000290:	10000800 	.word	0x10000800
	.align	1
    .thumb

 8000294:	080002b5 	.word	0x080002b5
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	080058d5 	.word	0x080058d5
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	08004b61 	.word	0x08004b61

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80002b4:	b598      	push	{r3, r4, r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002b8:	4a05      	ldr	r2, [pc, #20]	; (80002d0 <SystemInit+0x1c>)
 80002ba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002be:	4614      	mov	r4, r2
 80002c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002c6:	f000 f805 	bl	80002d4 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002ca:	f004 f979 	bl	80045c0 <SystemCoreClockSetup>
}
 80002ce:	bd98      	pop	{r3, r4, r7, pc}
 80002d0:	2000ffc4 	.word	0x2000ffc4

080002d4 <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002da:	b672      	cpsid	i
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 80002dc:	4b12      	ldr	r3, [pc, #72]	; (8000328 <SystemCoreSetup+0x54>)
 80002de:	4a13      	ldr	r2, [pc, #76]	; (800032c <SystemCoreSetup+0x58>)
 80002e0:	609a      	str	r2, [r3, #8]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
 80002e2:	f3bf 8f4f 	dsb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80002e6:	b662      	cpsie	i
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 80002e8:	4a0f      	ldr	r2, [pc, #60]	; (8000328 <SystemCoreSetup+0x54>)
 80002ea:	4b0f      	ldr	r3, [pc, #60]	; (8000328 <SystemCoreSetup+0x54>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	f023 0308 	bic.w	r3, r3, #8
 80002f2:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 80002f4:	4b0e      	ldr	r3, [pc, #56]	; (8000330 <SystemCoreSetup+0x5c>)
 80002f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80002fa:	3314      	adds	r3, #20
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	f023 030f 	bic.w	r3, r3, #15
 8000306:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	f043 0303 	orr.w	r3, r3, #3
 800030e:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8000310:	4b07      	ldr	r3, [pc, #28]	; (8000330 <SystemCoreSetup+0x5c>)
 8000312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000316:	3314      	adds	r3, #20
 8000318:	687a      	ldr	r2, [r7, #4]
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	370c      	adds	r7, #12
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	e000ed00 	.word	0xe000ed00
 800032c:	08000000 	.word	0x08000000
 8000330:	58001000 	.word	0x58001000

08000334 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 800033a:	4b2f      	ldr	r3, [pc, #188]	; (80003f8 <SystemCoreClockUpdate+0xc4>)
 800033c:	68db      	ldr	r3, [r3, #12]
 800033e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000342:	2b00      	cmp	r3, #0
 8000344:	d03e      	beq.n	80003c4 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 8000346:	4b2d      	ldr	r3, [pc, #180]	; (80003fc <SystemCoreClockUpdate+0xc8>)
 8000348:	68db      	ldr	r3, [r3, #12]
 800034a:	f003 0301 	and.w	r3, r3, #1
 800034e:	2b00      	cmp	r3, #0
 8000350:	d002      	beq.n	8000358 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 8000352:	4b2b      	ldr	r3, [pc, #172]	; (8000400 <SystemCoreClockUpdate+0xcc>)
 8000354:	60fb      	str	r3, [r7, #12]
 8000356:	e002      	b.n	800035e <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8000358:	f004 f928 	bl	80045ac <OSCHP_GetFrequency>
 800035c:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 800035e:	4b27      	ldr	r3, [pc, #156]	; (80003fc <SystemCoreClockUpdate+0xc8>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	f003 0304 	and.w	r3, r3, #4
 8000366:	2b00      	cmp	r3, #0
 8000368:	d020      	beq.n	80003ac <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800036a:	4b24      	ldr	r3, [pc, #144]	; (80003fc <SystemCoreClockUpdate+0xc8>)
 800036c:	689b      	ldr	r3, [r3, #8]
 800036e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000372:	0e1b      	lsrs	r3, r3, #24
 8000374:	3301      	adds	r3, #1
 8000376:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000378:	4b20      	ldr	r3, [pc, #128]	; (80003fc <SystemCoreClockUpdate+0xc8>)
 800037a:	689b      	ldr	r3, [r3, #8]
 800037c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000380:	0a1b      	lsrs	r3, r3, #8
 8000382:	3301      	adds	r3, #1
 8000384:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8000386:	4b1d      	ldr	r3, [pc, #116]	; (80003fc <SystemCoreClockUpdate+0xc8>)
 8000388:	689b      	ldr	r3, [r3, #8]
 800038a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800038e:	0c1b      	lsrs	r3, r3, #16
 8000390:	3301      	adds	r3, #1
 8000392:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000394:	68bb      	ldr	r3, [r7, #8]
 8000396:	683a      	ldr	r2, [r7, #0]
 8000398:	fb02 f303 	mul.w	r3, r2, r3
 800039c:	68fa      	ldr	r2, [r7, #12]
 800039e:	fbb2 f3f3 	udiv	r3, r2, r3
 80003a2:	687a      	ldr	r2, [r7, #4]
 80003a4:	fb02 f303 	mul.w	r3, r2, r3
 80003a8:	60fb      	str	r3, [r7, #12]
 80003aa:	e00d      	b.n	80003c8 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 80003ac:	4b13      	ldr	r3, [pc, #76]	; (80003fc <SystemCoreClockUpdate+0xc8>)
 80003ae:	689b      	ldr	r3, [r3, #8]
 80003b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80003b4:	3301      	adds	r3, #1
 80003b6:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 80003b8:	68fa      	ldr	r2, [r7, #12]
 80003ba:	683b      	ldr	r3, [r7, #0]
 80003bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80003c0:	60fb      	str	r3, [r7, #12]
 80003c2:	e001      	b.n	80003c8 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 80003c4:	4b0e      	ldr	r3, [pc, #56]	; (8000400 <SystemCoreClockUpdate+0xcc>)
 80003c6:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80003c8:	4b0b      	ldr	r3, [pc, #44]	; (80003f8 <SystemCoreClockUpdate+0xc4>)
 80003ca:	68db      	ldr	r3, [r3, #12]
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	3301      	adds	r3, #1
 80003d0:	68fa      	ldr	r2, [r7, #12]
 80003d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80003d6:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 80003d8:	4b07      	ldr	r3, [pc, #28]	; (80003f8 <SystemCoreClockUpdate+0xc4>)
 80003da:	691b      	ldr	r3, [r3, #16]
 80003dc:	f003 0301 	and.w	r3, r3, #1
 80003e0:	3301      	adds	r3, #1
 80003e2:	68fa      	ldr	r2, [r7, #12]
 80003e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80003e8:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 80003ea:	4a06      	ldr	r2, [pc, #24]	; (8000404 <SystemCoreClockUpdate+0xd0>)
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	6013      	str	r3, [r2, #0]
}
 80003f0:	3710      	adds	r7, #16
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	50004600 	.word	0x50004600
 80003fc:	50004710 	.word	0x50004710
 8000400:	016e3600 	.word	0x016e3600
 8000404:	2000ffc0 	.word	0x2000ffc0

08000408 <RTC_Start>:
 *   {}
 * }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void RTC_Start(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
	XMC_RTC_Start();
 800040c:	f001 fad8 	bl	80019c0 <XMC_RTC_Start>
}
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop

08000414 <RTC_Stop>:
 *   {}
 * }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void RTC_Stop(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
	XMC_RTC_Stop();
 8000418:	f001 fae6 	bl	80019e8 <XMC_RTC_Stop>
}
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop

08000420 <MAINLOOP_IRQ>:
 * @attention  SYSTIMER_CreateTimer in @ref INIT.c defines time endurance.
 * @note       This routine is the callback function of SYSTIMER. It is initiated in @ref INIT.c and
 * invoked by the ISR generated from SYSTIMER.
 */
void MAINLOOP_IRQ(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
	mainloop_ticks++; // Increment time count
 8000424:	4b05      	ldr	r3, [pc, #20]	; (800043c <MAINLOOP_IRQ+0x1c>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	b2db      	uxtb	r3, r3
 800042a:	3301      	adds	r3, #1
 800042c:	b2da      	uxtb	r2, r3
 800042e:	4b03      	ldr	r3, [pc, #12]	; (800043c <MAINLOOP_IRQ+0x1c>)
 8000430:	701a      	strb	r2, [r3, #0]
}
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	200001c0 	.word	0x200001c0

08000440 <CCU43_1_IRQHandler>:
 * @post       None
 * @attention  None
 * @note       This routine increments the counter variable @ref timetick_count .
 */
 void UserIRQHandler(void)
 {
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0

 	/* Acknowledge the period match interrupt*/
	 TIMER_ClearEvent(&TIMER_0);
 8000444:	4804      	ldr	r0, [pc, #16]	; (8000458 <CCU43_1_IRQHandler+0x18>)
 8000446:	f001 ffb5 	bl	80023b4 <TIMER_ClearEvent>

 	/* Increment time tick count */
 	timetick_count++;
 800044a:	4b04      	ldr	r3, [pc, #16]	; (800045c <CCU43_1_IRQHandler+0x1c>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	3301      	adds	r3, #1
 8000450:	4a02      	ldr	r2, [pc, #8]	; (800045c <CCU43_1_IRQHandler+0x1c>)
 8000452:	6013      	str	r3, [r2, #0]
 }
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	2000001c 	.word	0x2000001c
 800045c:	200001bc 	.word	0x200001bc

08000460 <delay100us>:
  * @post       None
  * @attention  None
  * @note       This routine uses the TIMER_0.
  */
 void delay100us(uint32_t dwUs)
 {
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
	 timetick_count=0;
 8000468:	4b0c      	ldr	r3, [pc, #48]	; (800049c <delay100us+0x3c>)
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
	 TIMER_Start(&TIMER_0);
 800046e:	480c      	ldr	r0, [pc, #48]	; (80004a0 <delay100us+0x40>)
 8000470:	f001 ff2e 	bl	80022d0 <TIMER_Start>
	 while(timetick_count < dwUs);
 8000474:	bf00      	nop
 8000476:	4b09      	ldr	r3, [pc, #36]	; (800049c <delay100us+0x3c>)
 8000478:	681a      	ldr	r2, [r3, #0]
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	429a      	cmp	r2, r3
 800047e:	d3fa      	bcc.n	8000476 <delay100us+0x16>
	  {
	    while(TIMER_GetInterruptStatus(&TIMER_0));
 8000480:	bf00      	nop
 8000482:	4807      	ldr	r0, [pc, #28]	; (80004a0 <delay100us+0x40>)
 8000484:	f001 ff7e 	bl	8002384 <TIMER_GetInterruptStatus>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d1f9      	bne.n	8000482 <delay100us+0x22>
	    TIMER_Stop(&TIMER_0);
 800048e:	4804      	ldr	r0, [pc, #16]	; (80004a0 <delay100us+0x40>)
 8000490:	f001 ff3c 	bl	800230c <TIMER_Stop>
	  }

 }
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	200001bc 	.word	0x200001bc
 80004a0:	2000001c 	.word	0x2000001c

080004a4 <RTC_Time_Handler>:
* @post       Function increment global variables @ref set_time_ticks.
* @attention  Enable Interrupt Settings - Time Interrupt Settings - SECOND.
* @note       This routine is the callback function of DAVE. It is invoked by the ISR generated from DAVE.
*/
void RTC_Time_Handler(void) //RTC_IRQ_Handler
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
	SNTP_sec_time_ticks++;
 80004a8:	4b08      	ldr	r3, [pc, #32]	; (80004cc <RTC_Time_Handler+0x28>)
 80004aa:	881b      	ldrh	r3, [r3, #0]
 80004ac:	b29b      	uxth	r3, r3
 80004ae:	3301      	adds	r3, #1
 80004b0:	b29a      	uxth	r2, r3
 80004b2:	4b06      	ldr	r3, [pc, #24]	; (80004cc <RTC_Time_Handler+0x28>)
 80004b4:	801a      	strh	r2, [r3, #0]
	incr_all_sec++;
 80004b6:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <RTC_Time_Handler+0x2c>)
 80004b8:	881b      	ldrh	r3, [r3, #0]
 80004ba:	b29b      	uxth	r3, r3
 80004bc:	3301      	adds	r3, #1
 80004be:	b29a      	uxth	r2, r3
 80004c0:	4b03      	ldr	r3, [pc, #12]	; (80004d0 <RTC_Time_Handler+0x2c>)
 80004c2:	801a      	strh	r2, [r3, #0]
}
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr
 80004cc:	200001c4 	.word	0x200001c4
 80004d0:	200001c2 	.word	0x200001c2

080004d4 <RTC_init>:
 * @post       Function updates global variable @ref timeval
 * @attention  None
 * @note       This routine initializes @ref timeval values in RTC_0 App.
 */
void RTC_init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	timeval.seconds=0;
 80004d8:	4a13      	ldr	r2, [pc, #76]	; (8000528 <RTC_init+0x54>)
 80004da:	7813      	ldrb	r3, [r2, #0]
 80004dc:	f36f 0305 	bfc	r3, #0, #6
 80004e0:	7013      	strb	r3, [r2, #0]
	timeval.minutes=0;
 80004e2:	4a11      	ldr	r2, [pc, #68]	; (8000528 <RTC_init+0x54>)
 80004e4:	7853      	ldrb	r3, [r2, #1]
 80004e6:	f36f 0305 	bfc	r3, #0, #6
 80004ea:	7053      	strb	r3, [r2, #1]
	timeval.hours=16;
 80004ec:	4a0e      	ldr	r2, [pc, #56]	; (8000528 <RTC_init+0x54>)
 80004ee:	7893      	ldrb	r3, [r2, #2]
 80004f0:	2110      	movs	r1, #16
 80004f2:	f361 0304 	bfi	r3, r1, #0, #5
 80004f6:	7093      	strb	r3, [r2, #2]
	timeval.days=4;
 80004f8:	4a0b      	ldr	r2, [pc, #44]	; (8000528 <RTC_init+0x54>)
 80004fa:	78d3      	ldrb	r3, [r2, #3]
 80004fc:	2104      	movs	r1, #4
 80004fe:	f361 0304 	bfi	r3, r1, #0, #5
 8000502:	70d3      	strb	r3, [r2, #3]
	timeval.month=11;
 8000504:	4a08      	ldr	r2, [pc, #32]	; (8000528 <RTC_init+0x54>)
 8000506:	7953      	ldrb	r3, [r2, #5]
 8000508:	210b      	movs	r1, #11
 800050a:	f361 0303 	bfi	r3, r1, #0, #4
 800050e:	7153      	strb	r3, [r2, #5]
	timeval.year=2018;
 8000510:	4b05      	ldr	r3, [pc, #20]	; (8000528 <RTC_init+0x54>)
 8000512:	f240 72e2 	movw	r2, #2018	; 0x7e2
 8000516:	80da      	strh	r2, [r3, #6]
	RTC_Stop();
 8000518:	f7ff ff7c 	bl	8000414 <RTC_Stop>
	RTC_SetTime(&timeval);
 800051c:	4802      	ldr	r0, [pc, #8]	; (8000528 <RTC_init+0x54>)
 800051e:	f002 fc6f 	bl	8002e00 <RTC_SetTime>
	RTC_Start();
 8000522:	f7ff ff71 	bl	8000408 <RTC_Start>
}
 8000526:	bd80      	pop	{r7, pc}
 8000528:	200001f0 	.word	0x200001f0

0800052c <init>:
 * @post       None
 * @attention  None
 * @note       None
 */
void init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af02      	add	r7, sp, #8

	//IRQ-Handler for SYSTIMER, initiated by function Soft_WDG (checkout SYSTIMER_XMC45.PDF)
	timer_1_of_16 = SYSTIMER_CreateTimer(100000, SYSTIMER_MODE_ONE_SHOT, (void *)SW_IRQ_1, NULL);
 8000532:	481a      	ldr	r0, [pc, #104]	; (800059c <init+0x70>)
 8000534:	2100      	movs	r1, #0
 8000536:	4a1a      	ldr	r2, [pc, #104]	; (80005a0 <init+0x74>)
 8000538:	2300      	movs	r3, #0
 800053a:	f002 fa4b 	bl	80029d4 <SYSTIMER_CreateTimer>
 800053e:	4602      	mov	r2, r0
 8000540:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <init+0x78>)
 8000542:	601a      	str	r2, [r3, #0]
	/* Initialize and start Mainloop system timer 100ms (Timer 2 of 16)*/
	timer_2_of_16 = SYSTIMER_CreateTimer(100000, SYSTIMER_MODE_PERIODIC, (void *)MAINLOOP_IRQ, NULL);
 8000544:	4815      	ldr	r0, [pc, #84]	; (800059c <init+0x70>)
 8000546:	2101      	movs	r1, #1
 8000548:	4a17      	ldr	r2, [pc, #92]	; (80005a8 <init+0x7c>)
 800054a:	2300      	movs	r3, #0
 800054c:	f002 fa42 	bl	80029d4 <SYSTIMER_CreateTimer>
 8000550:	4602      	mov	r2, r0
 8000552:	4b16      	ldr	r3, [pc, #88]	; (80005ac <init+0x80>)
 8000554:	601a      	str	r2, [r3, #0]
	SYSTIMER_StartTimer(timer_2_of_16);
 8000556:	4b15      	ldr	r3, [pc, #84]	; (80005ac <init+0x80>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4618      	mov	r0, r3
 800055c:	f002 fad8 	bl	8002b10 <SYSTIMER_StartTimer>
	/* Initialize and start lwip system timer 100ms (Timer 3 of 16)*/
//	timer_3_of_16 = SYSTIMER_CreateTimer(100000, SYSTIMER_MODE_PERIODIC , tim_sys_check_timeouts_wrap,0);
//	SYSTIMER_StartTimer(timer_3_of_16);
	delay100us(10000);  // POR is too fast for OLED...
 8000560:	f242 7010 	movw	r0, #10000	; 0x2710
 8000564:	f7ff ff7c 	bl	8000460 <delay100us>
	LCD_init();
 8000568:	f004 f91e 	bl	80047a8 <LCD_init>
	LCD_clearlines();
 800056c:	f004 f9be 	bl	80048ec <LCD_clearlines>
	sprintf(LCDBuffer,"MTSR V%d.%d.%d, hm,2019",MAJOR_VERSION,MINOR_VERSION,PATCH_VERSION);  // defined in doxy.h"
 8000570:	2302      	movs	r3, #2
 8000572:	9300      	str	r3, [sp, #0]
 8000574:	480e      	ldr	r0, [pc, #56]	; (80005b0 <init+0x84>)
 8000576:	490f      	ldr	r1, [pc, #60]	; (80005b4 <init+0x88>)
 8000578:	2200      	movs	r2, #0
 800057a:	2302      	movs	r3, #2
 800057c:	f005 fe6e 	bl	800625c <siprintf>
	LCD_text(0,0,LCDBuffer);
 8000580:	2000      	movs	r0, #0
 8000582:	2100      	movs	r1, #0
 8000584:	4a0a      	ldr	r2, [pc, #40]	; (80005b0 <init+0x84>)
 8000586:	f004 f9d7 	bl	8004938 <LCD_text>
	delay100us(10000);
 800058a:	f242 7010 	movw	r0, #10000	; 0x2710
 800058e:	f7ff ff67 	bl	8000460 <delay100us>
	RTC_init();
 8000592:	f7ff ff9f 	bl	80004d4 <RTC_init>

}
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	000186a0 	.word	0x000186a0
 80005a0:	080020c1 	.word	0x080020c1
 80005a4:	20000204 	.word	0x20000204
 80005a8:	08000421 	.word	0x08000421
 80005ac:	200001fc 	.word	0x200001fc
 80005b0:	200004c8 	.word	0x200004c8
 80005b4:	08007b44 	.word	0x08007b44

080005b8 <read_LM76>:
 * @post       Function updates global variable @ref mainloop_ticks.
 * @attention  enable all Errors I2C_Master in DAVE App and
 * @Note	   A Software Watchdog is initiated to prevent from stucking in while loop in case of failure.
 * invoked by the ISR generated from SYSTIMER.
 */
uint8_t read_LM76(uint8_t DevID, uint16_t *return_value){
 80005b8:	b590      	push	{r4, r7, lr}
 80005ba:	b089      	sub	sp, #36	; 0x24
 80005bc:	af04      	add	r7, sp, #16
 80005be:	4603      	mov	r3, r0
 80005c0:	6039      	str	r1, [r7, #0]
 80005c2:	71fb      	strb	r3, [r7, #7]

	uint8_t tx_data=0x00;
 80005c4:	2300      	movs	r3, #0
 80005c6:	737b      	strb	r3, [r7, #13]
	uint8_t rx_data[2];
	uint16_t DataReceived = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	81fb      	strh	r3, [r7, #14]
// 	attach ID_LM76 address
// 	send start condition
// 	select temperature register data=0x00
//	Write data to DEVICE
//	leave I2C bus open
	Soft_WDG_1(ON);
 80005cc:	2001      	movs	r0, #1
 80005ce:	f001 fd91 	bl	80020f4 <Soft_WDG_1>
    I2C_MASTER_Transmit(&I2C_MASTER_0,true,DevID,&tx_data,1,false);
 80005d2:	79fa      	ldrb	r2, [r7, #7]
 80005d4:	f107 040d 	add.w	r4, r7, #13
 80005d8:	2301      	movs	r3, #1
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	2300      	movs	r3, #0
 80005de:	9301      	str	r3, [sp, #4]
 80005e0:	4856      	ldr	r0, [pc, #344]	; (800073c <read_LM76+0x184>)
 80005e2:	2101      	movs	r1, #1
 80005e4:	4623      	mov	r3, r4
 80005e6:	f002 feaf 	bl	8003348 <I2C_MASTER_Transmit>
    while((f.tx_completion == 0) && (f.I2C_NACK == 0) && (f.eject_at_I2C_NACK == 0));
 80005ea:	bf00      	nop
 80005ec:	4b54      	ldr	r3, [pc, #336]	; (8000740 <read_LM76+0x188>)
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	095b      	lsrs	r3, r3, #5
 80005f4:	f003 0301 	and.w	r3, r3, #1
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d111      	bne.n	8000622 <read_LM76+0x6a>
 80005fe:	4b50      	ldr	r3, [pc, #320]	; (8000740 <read_LM76+0x188>)
 8000600:	881b      	ldrh	r3, [r3, #0]
 8000602:	b29b      	uxth	r3, r3
 8000604:	099b      	lsrs	r3, r3, #6
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	b2db      	uxtb	r3, r3
 800060c:	2b00      	cmp	r3, #0
 800060e:	d108      	bne.n	8000622 <read_LM76+0x6a>
 8000610:	4b4b      	ldr	r3, [pc, #300]	; (8000740 <read_LM76+0x188>)
 8000612:	881b      	ldrh	r3, [r3, #0]
 8000614:	b29b      	uxth	r3, r3
 8000616:	09db      	lsrs	r3, r3, #7
 8000618:	f003 0301 	and.w	r3, r3, #1
 800061c:	b2db      	uxtb	r3, r3
 800061e:	2b00      	cmp	r3, #0
 8000620:	d0e4      	beq.n	80005ec <read_LM76+0x34>
    f.tx_completion = 0;
 8000622:	4b47      	ldr	r3, [pc, #284]	; (8000740 <read_LM76+0x188>)
 8000624:	881a      	ldrh	r2, [r3, #0]
 8000626:	f022 0220 	bic.w	r2, r2, #32
 800062a:	801a      	strh	r2, [r3, #0]
    Soft_WDG_1(OFF);
 800062c:	2000      	movs	r0, #0
 800062e:	f001 fd61 	bl	80020f4 <Soft_WDG_1>

    if(f.I2C_NACK || f.eject_at_I2C_NACK)
 8000632:	4b43      	ldr	r3, [pc, #268]	; (8000740 <read_LM76+0x188>)
 8000634:	881b      	ldrh	r3, [r3, #0]
 8000636:	b29b      	uxth	r3, r3
 8000638:	099b      	lsrs	r3, r3, #6
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	b2db      	uxtb	r3, r3
 8000640:	2b00      	cmp	r3, #0
 8000642:	d108      	bne.n	8000656 <read_LM76+0x9e>
 8000644:	4b3e      	ldr	r3, [pc, #248]	; (8000740 <read_LM76+0x188>)
 8000646:	881b      	ldrh	r3, [r3, #0]
 8000648:	b29b      	uxth	r3, r3
 800064a:	09db      	lsrs	r3, r3, #7
 800064c:	f003 0301 	and.w	r3, r3, #1
 8000650:	b2db      	uxtb	r3, r3
 8000652:	2b00      	cmp	r3, #0
 8000654:	d00b      	beq.n	800066e <read_LM76+0xb6>
        {
        	 f.I2C_NACK=0;
 8000656:	4b3a      	ldr	r3, [pc, #232]	; (8000740 <read_LM76+0x188>)
 8000658:	881a      	ldrh	r2, [r3, #0]
 800065a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800065e:	801a      	strh	r2, [r3, #0]
        	 f.eject_at_I2C_NACK=0;
 8000660:	4b37      	ldr	r3, [pc, #220]	; (8000740 <read_LM76+0x188>)
 8000662:	881a      	ldrh	r2, [r3, #0]
 8000664:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000668:	801a      	strh	r2, [r3, #0]
        	 return DEVICE_READ_ERROR;
 800066a:	23ff      	movs	r3, #255	; 0xff
 800066c:	e061      	b.n	8000732 <read_LM76+0x17a>
        }
//	send repeated start condition
//  Read content of Register 0x00 from DEVICE and place it in rx_data[0] and rx_data[1]
//	close I2C BUS
    Soft_WDG_1(ON);
 800066e:	2001      	movs	r0, #1
 8000670:	f001 fd40 	bl	80020f4 <Soft_WDG_1>
    I2C_MASTER_Receive(&I2C_MASTER_0,true,DevID,rx_data,2,true,true);
 8000674:	79fa      	ldrb	r2, [r7, #7]
 8000676:	f107 0408 	add.w	r4, r7, #8
 800067a:	2302      	movs	r3, #2
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	2301      	movs	r3, #1
 8000680:	9301      	str	r3, [sp, #4]
 8000682:	2301      	movs	r3, #1
 8000684:	9302      	str	r3, [sp, #8]
 8000686:	482d      	ldr	r0, [pc, #180]	; (800073c <read_LM76+0x184>)
 8000688:	2101      	movs	r1, #1
 800068a:	4623      	mov	r3, r4
 800068c:	f003 f82e 	bl	80036ec <I2C_MASTER_Receive>
    while((f.rx_completion == 0) && (f.I2C_NACK == 0) && (f.eject_at_I2C_NACK == 0));
 8000690:	bf00      	nop
 8000692:	4b2b      	ldr	r3, [pc, #172]	; (8000740 <read_LM76+0x188>)
 8000694:	881b      	ldrh	r3, [r3, #0]
 8000696:	b29b      	uxth	r3, r3
 8000698:	091b      	lsrs	r3, r3, #4
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d111      	bne.n	80006c8 <read_LM76+0x110>
 80006a4:	4b26      	ldr	r3, [pc, #152]	; (8000740 <read_LM76+0x188>)
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	099b      	lsrs	r3, r3, #6
 80006ac:	f003 0301 	and.w	r3, r3, #1
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d108      	bne.n	80006c8 <read_LM76+0x110>
 80006b6:	4b22      	ldr	r3, [pc, #136]	; (8000740 <read_LM76+0x188>)
 80006b8:	881b      	ldrh	r3, [r3, #0]
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	09db      	lsrs	r3, r3, #7
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d0e4      	beq.n	8000692 <read_LM76+0xda>
    f.rx_completion = 0;
 80006c8:	4b1d      	ldr	r3, [pc, #116]	; (8000740 <read_LM76+0x188>)
 80006ca:	881a      	ldrh	r2, [r3, #0]
 80006cc:	f022 0210 	bic.w	r2, r2, #16
 80006d0:	801a      	strh	r2, [r3, #0]
    Soft_WDG_1(OFF);
 80006d2:	2000      	movs	r0, #0
 80006d4:	f001 fd0e 	bl	80020f4 <Soft_WDG_1>

    if(f.I2C_NACK || f.eject_at_I2C_NACK)
 80006d8:	4b19      	ldr	r3, [pc, #100]	; (8000740 <read_LM76+0x188>)
 80006da:	881b      	ldrh	r3, [r3, #0]
 80006dc:	b29b      	uxth	r3, r3
 80006de:	099b      	lsrs	r3, r3, #6
 80006e0:	f003 0301 	and.w	r3, r3, #1
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d108      	bne.n	80006fc <read_LM76+0x144>
 80006ea:	4b15      	ldr	r3, [pc, #84]	; (8000740 <read_LM76+0x188>)
 80006ec:	881b      	ldrh	r3, [r3, #0]
 80006ee:	b29b      	uxth	r3, r3
 80006f0:	09db      	lsrs	r3, r3, #7
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d00b      	beq.n	8000714 <read_LM76+0x15c>
        {
          	f.I2C_NACK=0;
 80006fc:	4b10      	ldr	r3, [pc, #64]	; (8000740 <read_LM76+0x188>)
 80006fe:	881a      	ldrh	r2, [r3, #0]
 8000700:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000704:	801a      	strh	r2, [r3, #0]
            f.eject_at_I2C_NACK=0;
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <read_LM76+0x188>)
 8000708:	881a      	ldrh	r2, [r3, #0]
 800070a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800070e:	801a      	strh	r2, [r3, #0]
            return DEVICE_READ_ERROR;
 8000710:	23ff      	movs	r3, #255	; 0xff
 8000712:	e00e      	b.n	8000732 <read_LM76+0x17a>
    //|-----------upper_byte MSByte[0]----------|-------lower_byteLSByte[1]-------|
    // D15  D14   D13  D12  D11  D10   D9   D8   D7   D6   D5   D4  D3  D2  D1  D0
    //Sign  MSB Bit10 Bit9 Bit8 Bit7 Bit6 Bit5 Bit4 Bit3 Bit2 Bit1 Bit0  X   X   X    //LM76

    //shift 8 bit bytes to proper 16bit position
	DataReceived = rx_data[1] >> 3;
 8000714:	7a7b      	ldrb	r3, [r7, #9]
 8000716:	08db      	lsrs	r3, r3, #3
 8000718:	b2db      	uxtb	r3, r3
 800071a:	81fb      	strh	r3, [r7, #14]
	DataReceived |= rx_data[0] << 5;
 800071c:	7a3b      	ldrb	r3, [r7, #8]
 800071e:	015b      	lsls	r3, r3, #5
 8000720:	b29a      	uxth	r2, r3
 8000722:	89fb      	ldrh	r3, [r7, #14]
 8000724:	4313      	orrs	r3, r2
 8000726:	b29b      	uxth	r3, r3
 8000728:	81fb      	strh	r3, [r7, #14]

    (*return_value)=DataReceived;
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	89fa      	ldrh	r2, [r7, #14]
 800072e:	801a      	strh	r2, [r3, #0]

    XMC_DEBUG("main: Application OK");
    return DEVICE_SUCCESSFUL;
 8000730:	2300      	movs	r3, #0
}
 8000732:	4618      	mov	r0, r3
 8000734:	3714      	adds	r7, #20
 8000736:	46bd      	mov	sp, r7
 8000738:	bd90      	pop	{r4, r7, pc}
 800073a:	bf00      	nop
 800073c:	2000007c 	.word	0x2000007c
 8000740:	200001f8 	.word	0x200001f8

08000744 <update_LM76>:
 * @post       None
 * @attention  call routine NEVER more than once a second, device delivers then all time same temperature value!
 * @note       acc. to datasheet convert from UINT to INT cast to float multiply with 0.0625
 */
void update_LM76(void)
{
 8000744:	b5b0      	push	{r4, r5, r7, lr}
 8000746:	af00      	add	r7, sp, #0

	S_LM76.status = read_LM76(S_LM76.DevID, &S_LM76.temp.raw_value);
 8000748:	4b29      	ldr	r3, [pc, #164]	; (80007f0 <update_LM76+0xac>)
 800074a:	7e1b      	ldrb	r3, [r3, #24]
 800074c:	4618      	mov	r0, r3
 800074e:	4928      	ldr	r1, [pc, #160]	; (80007f0 <update_LM76+0xac>)
 8000750:	f7ff ff32 	bl	80005b8 <read_LM76>
 8000754:	4603      	mov	r3, r0
 8000756:	461a      	mov	r2, r3
 8000758:	4b25      	ldr	r3, [pc, #148]	; (80007f0 <update_LM76+0xac>)
 800075a:	769a      	strb	r2, [r3, #26]
	if(S_LM76.temp.raw_value & 0x1000U) S_LM76.temp.raw_value |= 0xF000U; //fill up MSB to fit 2`s complement notation
 800075c:	4b24      	ldr	r3, [pc, #144]	; (80007f0 <update_LM76+0xac>)
 800075e:	881b      	ldrh	r3, [r3, #0]
 8000760:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000764:	2b00      	cmp	r3, #0
 8000766:	d008      	beq.n	800077a <update_LM76+0x36>
 8000768:	4b21      	ldr	r3, [pc, #132]	; (80007f0 <update_LM76+0xac>)
 800076a:	881b      	ldrh	r3, [r3, #0]
 800076c:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8000770:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8000774:	b29a      	uxth	r2, r3
 8000776:	4b1e      	ldr	r3, [pc, #120]	; (80007f0 <update_LM76+0xac>)
 8000778:	801a      	strh	r2, [r3, #0]
	S_LM76.temp.ave_value=(float)(S_LM76.temp.raw_value*0.0625); // consult datasheet for calculation
 800077a:	4b1d      	ldr	r3, [pc, #116]	; (80007f0 <update_LM76+0xac>)
 800077c:	881b      	ldrh	r3, [r3, #0]
 800077e:	4618      	mov	r0, r3
 8000780:	f004 fb62 	bl	8004e48 <__aeabi_i2d>
 8000784:	4602      	mov	r2, r0
 8000786:	460b      	mov	r3, r1
 8000788:	4610      	mov	r0, r2
 800078a:	4619      	mov	r1, r3
 800078c:	f04f 0200 	mov.w	r2, #0
 8000790:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <update_LM76+0xb0>)
 8000792:	f004 fbbf 	bl	8004f14 <__aeabi_dmul>
 8000796:	4602      	mov	r2, r0
 8000798:	460b      	mov	r3, r1
 800079a:	4610      	mov	r0, r2
 800079c:	4619      	mov	r1, r3
 800079e:	f004 fdcb 	bl	8005338 <__aeabi_d2f>
 80007a2:	4602      	mov	r2, r0
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <update_LM76+0xac>)
 80007a6:	605a      	str	r2, [r3, #4]
	val_average(S_LM76.temp.ave_value,S_LM76.temp.ave_value_old,S_LM76.temp.ave_factor);
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <update_LM76+0xac>)
 80007aa:	689c      	ldr	r4, [r3, #8]
 80007ac:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <update_LM76+0xac>)
 80007ae:	685a      	ldr	r2, [r3, #4]
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <update_LM76+0xac>)
 80007b2:	689b      	ldr	r3, [r3, #8]
 80007b4:	4610      	mov	r0, r2
 80007b6:	4619      	mov	r1, r3
 80007b8:	f004 fe12 	bl	80053e0 <__aeabi_fsub>
 80007bc:	4603      	mov	r3, r0
 80007be:	461d      	mov	r5, r3
 80007c0:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <update_LM76+0xac>)
 80007c2:	7d1b      	ldrb	r3, [r3, #20]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f004 fec1 	bl	800554c <__aeabi_i2f>
 80007ca:	4603      	mov	r3, r0
 80007cc:	4628      	mov	r0, r5
 80007ce:	4619      	mov	r1, r3
 80007d0:	f004 ffc4 	bl	800575c <__aeabi_fdiv>
 80007d4:	4603      	mov	r3, r0
 80007d6:	4620      	mov	r0, r4
 80007d8:	4619      	mov	r1, r3
 80007da:	f004 fe03 	bl	80053e4 <__addsf3>
 80007de:	4603      	mov	r3, r0
 80007e0:	461a      	mov	r2, r3
 80007e2:	4b03      	ldr	r3, [pc, #12]	; (80007f0 <update_LM76+0xac>)
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	4b02      	ldr	r3, [pc, #8]	; (80007f0 <update_LM76+0xac>)
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	4a01      	ldr	r2, [pc, #4]	; (80007f0 <update_LM76+0xac>)
 80007ec:	6093      	str	r3, [r2, #8]
}
 80007ee:	bdb0      	pop	{r4, r5, r7, pc}
 80007f0:	20000000 	.word	0x20000000
 80007f4:	3fb00000 	.word	0x3fb00000

080007f8 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	460b      	mov	r3, r1
 8000802:	607a      	str	r2, [r7, #4]
 8000804:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_CHECK_MODE(config->mode));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 8000806:	7afb      	ldrb	r3, [r7, #11]
 8000808:	089b      	lsrs	r3, r3, #2
 800080a:	b2db      	uxtb	r3, r3
 800080c:	4618      	mov	r0, r3
 800080e:	7afb      	ldrb	r3, [r7, #11]
 8000810:	089b      	lsrs	r3, r3, #2
 8000812:	b2db      	uxtb	r3, r3
 8000814:	461a      	mov	r2, r3
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	3204      	adds	r2, #4
 800081a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800081e:	7afb      	ldrb	r3, [r7, #11]
 8000820:	f003 0303 	and.w	r3, r3, #3
 8000824:	00db      	lsls	r3, r3, #3
 8000826:	4619      	mov	r1, r3
 8000828:	23f8      	movs	r3, #248	; 0xf8
 800082a:	408b      	lsls	r3, r1
 800082c:	43db      	mvns	r3, r3
 800082e:	ea02 0103 	and.w	r1, r2, r3
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	1d02      	adds	r2, r0, #4
 8000836:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800083e:	7afb      	ldrb	r3, [r7, #11]
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	4619      	mov	r1, r3
 8000844:	2303      	movs	r3, #3
 8000846:	408b      	lsls	r3, r1
 8000848:	43db      	mvns	r3, r3
 800084a:	401a      	ands	r2, r3
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	4a37      	ldr	r2, [pc, #220]	; (8000930 <XMC_GPIO_Init+0x138>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d003      	beq.n	8000860 <XMC_GPIO_Init+0x68>
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	4a36      	ldr	r2, [pc, #216]	; (8000934 <XMC_GPIO_Init+0x13c>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d10a      	bne.n	8000876 <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000864:	7afb      	ldrb	r3, [r7, #11]
 8000866:	2101      	movs	r1, #1
 8000868:	fa01 f303 	lsl.w	r3, r1, r3
 800086c:	43db      	mvns	r3, r3
 800086e:	401a      	ands	r2, r3
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	661a      	str	r2, [r3, #96]	; 0x60
 8000874:	e03c      	b.n	80008f0 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	685a      	ldr	r2, [r3, #4]
 800087a:	7afb      	ldrb	r3, [r7, #11]
 800087c:	409a      	lsls	r2, r3
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000882:	7afb      	ldrb	r3, [r7, #11]
 8000884:	08db      	lsrs	r3, r3, #3
 8000886:	b2db      	uxtb	r3, r3
 8000888:	4618      	mov	r0, r3
 800088a:	7afb      	ldrb	r3, [r7, #11]
 800088c:	08db      	lsrs	r3, r3, #3
 800088e:	b2db      	uxtb	r3, r3
 8000890:	461a      	mov	r2, r3
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	3210      	adds	r2, #16
 8000896:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800089a:	7afb      	ldrb	r3, [r7, #11]
 800089c:	f003 0307 	and.w	r3, r3, #7
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	4619      	mov	r1, r3
 80008a4:	2307      	movs	r3, #7
 80008a6:	408b      	lsls	r3, r1
 80008a8:	43db      	mvns	r3, r3
 80008aa:	ea02 0103 	and.w	r1, r2, r3
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	f100 0210 	add.w	r2, r0, #16
 80008b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 80008b8:	7afb      	ldrb	r3, [r7, #11]
 80008ba:	08db      	lsrs	r3, r3, #3
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	4618      	mov	r0, r3
 80008c0:	7afb      	ldrb	r3, [r7, #11]
 80008c2:	08db      	lsrs	r3, r3, #3
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	461a      	mov	r2, r3
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	3210      	adds	r2, #16
 80008cc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	7a1b      	ldrb	r3, [r3, #8]
 80008d4:	4619      	mov	r1, r3
 80008d6:	7afb      	ldrb	r3, [r7, #11]
 80008d8:	f003 0307 	and.w	r3, r3, #7
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	fa01 f303 	lsl.w	r3, r1, r3
 80008e2:	ea42 0103 	orr.w	r1, r2, r3
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	f100 0210 	add.w	r2, r0, #16
 80008ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80008f0:	7afb      	ldrb	r3, [r7, #11]
 80008f2:	089b      	lsrs	r3, r3, #2
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	4618      	mov	r0, r3
 80008f8:	7afb      	ldrb	r3, [r7, #11]
 80008fa:	089b      	lsrs	r3, r3, #2
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	461a      	mov	r2, r3
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	3204      	adds	r2, #4
 8000904:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	4619      	mov	r1, r3
 800090e:	7afb      	ldrb	r3, [r7, #11]
 8000910:	f003 0303 	and.w	r3, r3, #3
 8000914:	00db      	lsls	r3, r3, #3
 8000916:	fa01 f303 	lsl.w	r3, r1, r3
 800091a:	ea42 0103 	orr.w	r1, r2, r3
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	1d02      	adds	r2, r0, #4
 8000922:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000926:	3714      	adds	r7, #20
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	48028e00 	.word	0x48028e00
 8000934:	48028f00 	.word	0x48028f00

08000938 <XMC_RTC_IsRunning>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_RTC_Start(), XMC_RTC_Stop()
 */ 
__STATIC_INLINE bool XMC_RTC_IsRunning(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  return (bool)(RTC->CTR & RTC_CTR_ENB_Msk);
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <XMC_RTC_IsRunning+0x20>)
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	f003 0301 	and.w	r3, r3, #1
 8000944:	2b00      	cmp	r3, #0
 8000946:	bf14      	ite	ne
 8000948:	2301      	movne	r3, #1
 800094a:	2300      	moveq	r3, #0
 800094c:	b2db      	uxtb	r3, r3
}
 800094e:	4618      	mov	r0, r3
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr
 8000958:	50004a00 	.word	0x50004a00

0800095c <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 8000960:	4b03      	ldr	r3, [pc, #12]	; (8000970 <XMC_SCU_GetMirrorStatus+0x14>)
 8000962:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 8000966:	4618      	mov	r0, r3
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	50004000 	.word	0x50004000

08000974 <XMC_RTC_Init>:

/*
 * Initialize the RTC peripheral
 */
XMC_RTC_STATUS_t XMC_RTC_Init(const XMC_RTC_CONFIG_t *const config)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  if (XMC_RTC_IsRunning() == false)
 800097c:	f7ff ffdc 	bl	8000938 <XMC_RTC_IsRunning>
 8000980:	4603      	mov	r3, r0
 8000982:	f083 0301 	eor.w	r3, r3, #1
 8000986:	b2db      	uxtb	r3, r3
 8000988:	2b00      	cmp	r3, #0
 800098a:	d03e      	beq.n	8000a0a <XMC_RTC_Init+0x96>
  {
    if (XMC_SCU_HIB_IsHibernateDomainEnabled() == false)
 800098c:	f000 fb04 	bl	8000f98 <XMC_SCU_HIB_IsHibernateDomainEnabled>
 8000990:	4603      	mov	r3, r0
 8000992:	f083 0301 	eor.w	r3, r3, #1
 8000996:	b2db      	uxtb	r3, r3
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <XMC_RTC_Init+0x2c>
    {
      XMC_SCU_HIB_EnableHibernateDomain();
 800099c:	f000 fad2 	bl	8000f44 <XMC_SCU_HIB_EnableHibernateDomain>
    }
    
    XMC_RTC_SetPrescaler(config->prescaler);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	8a1b      	ldrh	r3, [r3, #16]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f001 f833 	bl	8001a10 <XMC_RTC_SetPrescaler>
		
	  while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_TIM0_Msk) != 0U)
 80009aa:	bf00      	nop
 80009ac:	f7ff ffd6 	bl	800095c <XMC_SCU_GetMirrorStatus>
 80009b0:	4603      	mov	r3, r0
 80009b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d1f8      	bne.n	80009ac <XMC_RTC_Init+0x38>
	  {
      /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    }
	  RTC->TIM0 = config->time.raw0;
 80009ba:	4a16      	ldr	r2, [pc, #88]	; (8000a14 <XMC_RTC_Init+0xa0>)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	6213      	str	r3, [r2, #32]
    
    while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_TIM1_Msk) != 0U)
 80009c2:	bf00      	nop
 80009c4:	f7ff ffca 	bl	800095c <XMC_SCU_GetMirrorStatus>
 80009c8:	4603      	mov	r3, r0
 80009ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d1f8      	bne.n	80009c4 <XMC_RTC_Init+0x50>
	  {
      /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    }
	  RTC->TIM1 = config->time.raw1;
 80009d2:	4a10      	ldr	r2, [pc, #64]	; (8000a14 <XMC_RTC_Init+0xa0>)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	6253      	str	r3, [r2, #36]	; 0x24
    
    while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_ATIM0_Msk) != 0U)
 80009da:	bf00      	nop
 80009dc:	f7ff ffbe 	bl	800095c <XMC_SCU_GetMirrorStatus>
 80009e0:	4603      	mov	r3, r0
 80009e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d1f8      	bne.n	80009dc <XMC_RTC_Init+0x68>
    {
      /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    }
    RTC->ATIM0 = config->alarm.raw0;
 80009ea:	4a0a      	ldr	r2, [pc, #40]	; (8000a14 <XMC_RTC_Init+0xa0>)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	6193      	str	r3, [r2, #24]
    
    while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_ATIM1_Msk) != 0U)
 80009f2:	bf00      	nop
 80009f4:	f7ff ffb2 	bl	800095c <XMC_SCU_GetMirrorStatus>
 80009f8:	4603      	mov	r3, r0
 80009fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d1f8      	bne.n	80009f4 <XMC_RTC_Init+0x80>
    {
      /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    }
    RTC->ATIM1 = config->alarm.raw1;    
 8000a02:	4a04      	ldr	r2, [pc, #16]	; (8000a14 <XMC_RTC_Init+0xa0>)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	61d3      	str	r3, [r2, #28]
  }  
  return XMC_RTC_STATUS_OK;
 8000a0a:	2300      	movs	r3, #0
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	50004a00 	.word	0x50004a00

08000a18 <XMC_RTC_EnableEvent>:

/*
 * Enable RTC periodic and alarm event(s)
 */ 
void XMC_RTC_EnableEvent(const uint32_t event)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_MSKSR_Msk) != 0U)
 8000a20:	bf00      	nop
 8000a22:	f7ff ff9b 	bl	800095c <XMC_SCU_GetMirrorStatus>
 8000a26:	4603      	mov	r3, r0
 8000a28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d1f8      	bne.n	8000a22 <XMC_RTC_EnableEvent+0xa>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->MSKSR |= event;
 8000a30:	4904      	ldr	r1, [pc, #16]	; (8000a44 <XMC_RTC_EnableEvent+0x2c>)
 8000a32:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <XMC_RTC_EnableEvent+0x2c>)
 8000a34:	691a      	ldr	r2, [r3, #16]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	610b      	str	r3, [r1, #16]
}
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	50004a00 	.word	0x50004a00

08000a48 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000a4c:	4b03      	ldr	r3, [pc, #12]	; (8000a5c <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	2000ffc0 	.word	0x2000ffc0

08000a60 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_SCU_lDelay(uint32_t delay)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8000a68:	f7ff fc64 	bl	8000334 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000a6c:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <XMC_SCU_lDelay+0x3c>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a0b      	ldr	r2, [pc, #44]	; (8000aa0 <XMC_SCU_lDelay+0x40>)
 8000a72:	fba2 2303 	umull	r2, r3, r2, r3
 8000a76:	0c9a      	lsrs	r2, r3, #18
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	fb02 f303 	mul.w	r3, r2, r3
 8000a7e:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	e003      	b.n	8000a8e <XMC_SCU_lDelay+0x2e>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000a86:	bf00      	nop
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	68fa      	ldr	r2, [r7, #12]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	429a      	cmp	r2, r3
 8000a94:	d3f7      	bcc.n	8000a86 <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 8000a96:	3710      	adds	r7, #16
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	2000ffc0 	.word	0x2000ffc0
 8000aa0:	431bde83 	.word	0x431bde83

08000aa4 <XMC_SCU_INTERRUPT_EnableEvent>:

/* API to enable the SCU event */
void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRMSK |= (uint32_t)event;
 8000aac:	4905      	ldr	r1, [pc, #20]	; (8000ac4 <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 8000aae:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 8000ab0:	689a      	ldr	r2, [r3, #8]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	608b      	str	r3, [r1, #8]
}
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	50004074 	.word	0x50004074

08000ac8 <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  return SCU_INTERRUPT->SRRAW;
 8000acc:	4b03      	ldr	r3, [pc, #12]	; (8000adc <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 8000ace:	685b      	ldr	r3, [r3, #4]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	50004074 	.word	0x50004074

08000ae0 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR |= (uint32_t)event;
 8000ae8:	4905      	ldr	r1, [pc, #20]	; (8000b00 <XMC_SCU_INTERRUPT_ClearEventStatus+0x20>)
 8000aea:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <XMC_SCU_INTERRUPT_ClearEventStatus+0x20>)
 8000aec:	68da      	ldr	r2, [r3, #12]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	60cb      	str	r3, [r1, #12]
}
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	50004074 	.word	0x50004074

08000b04 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8000b04:	b5b0      	push	{r4, r5, r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af02      	add	r7, sp, #8
 8000b0a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
		          (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
		         (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	f000 f885 	bl	8000c1c <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 8000b12:	f000 fa17 	bl	8000f44 <XMC_SCU_HIB_EnableHibernateDomain>
  if (config->enable_osculp == true)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	79db      	ldrb	r3, [r3, #7]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <XMC_SCU_CLOCK_Init+0x1e>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 8000b1e:	f000 fa59 	bl	8000fd4 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
  }
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	7a5b      	ldrb	r3, [r3, #9]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 f8f2 	bl	8000d10 <XMC_SCU_HIB_SetStandbyClockSource>

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	7a1b      	ldrb	r3, [r3, #8]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f000 f9e1 	bl	8000ef8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	7c1b      	ldrb	r3, [r3, #16]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 f906 	bl	8000d4c <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	7c5b      	ldrb	r3, [r3, #17]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f000 f929 	bl	8000d9c <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	7c9b      	ldrb	r3, [r3, #18]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 f910 	bl	8000d74 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	7cdb      	ldrb	r3, [r3, #19]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f000 f933 	bl	8000dc4 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	799b      	ldrb	r3, [r3, #6]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <XMC_SCU_CLOCK_Init+0x66>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 8000b66:	f000 fa6f 	bl	8001048 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	78db      	ldrb	r3, [r3, #3]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d102      	bne.n	8000b78 <XMC_SCU_CLOCK_Init+0x74>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 8000b72:	f000 faa9 	bl	80010c8 <XMC_SCU_CLOCK_DisableSystemPll>
 8000b76:	e014      	b.n	8000ba2 <XMC_SCU_CLOCK_Init+0x9e>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8000b78:	f000 fa96 	bl	80010a8 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	8899      	ldrh	r1, [r3, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000b88:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000b8e:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000b94:	9300      	str	r3, [sp, #0]
 8000b96:	4608      	mov	r0, r1
 8000b98:	4611      	mov	r1, r2
 8000b9a:	462a      	mov	r2, r5
 8000b9c:	4623      	mov	r3, r4
 8000b9e:	f000 faa3 	bl	80010e8 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	68db      	ldr	r3, [r3, #12]
 8000ba6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000baa:	d103      	bne.n	8000bb4 <XMC_SCU_CLOCK_Init+0xb0>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 8000bac:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000bb0:	f000 f834 	bl	8000c1c <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8000bb4:	f7ff fbbe 	bl	8000334 <SystemCoreClockUpdate>
}
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bdb0      	pop	{r4, r5, r7, pc}
 8000bbe:	bf00      	nop

08000bc0 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *set_peripheral_reset[index] |= (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	0f1b      	lsrs	r3, r3, #28
 8000bcc:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000bd4:	60bb      	str	r3, [r7, #8]
  static __O uint32_t *const clear_peripheral_reset[] = {&(SCU_RESET->PRCLR0),
                                                         &(SCU_RESET->PRCLR1),
                                                         &(SCU_RESET->PRCLR2)};
#endif

  *clear_peripheral_reset[index] |= (uint32_t)mask;
 8000bd6:	4a08      	ldr	r2, [pc, #32]	; (8000bf8 <XMC_SCU_RESET_DeassertPeripheralReset+0x38>)
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bde:	4906      	ldr	r1, [pc, #24]	; (8000bf8 <XMC_SCU_RESET_DeassertPeripheralReset+0x38>)
 8000be0:	68fa      	ldr	r2, [r7, #12]
 8000be2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000be6:	6811      	ldr	r1, [r2, #0]
 8000be8:	68ba      	ldr	r2, [r7, #8]
 8000bea:	430a      	orrs	r2, r1
 8000bec:	601a      	str	r2, [r3, #0]
}
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	08007b5c 	.word	0x08007b5c

08000bfc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8000c00:	f7ff ff22 	bl	8000a48 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8000c04:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 8000c06:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8000c08:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	50004600 	.word	0x50004600

08000c1c <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8000c24:	4906      	ldr	r1, [pc, #24]	; (8000c40 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000c28:	68db      	ldr	r3, [r3, #12]
 8000c2a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	50004600 	.word	0x50004600

08000c44 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8000c4c:	4906      	ldr	r1, [pc, #24]	; (8000c68 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8000c50:	699b      	ldr	r3, [r3, #24]
 8000c52:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	50004600 	.word	0x50004600

08000c6c <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8000c74:	4906      	ldr	r1, [pc, #24]	; (8000c90 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000c76:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c7a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	50004600 	.word	0x50004600

08000c94 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 8000c9e:	88fb      	ldrh	r3, [r7, #6]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d108      	bne.n	8000cb6 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000ca4:	4a0a      	ldr	r2, [pc, #40]	; (8000cd0 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000ca8:	68db      	ldr	r3, [r3, #12]
 8000caa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000cae:	f023 0301 	bic.w	r3, r3, #1
 8000cb2:	60d3      	str	r3, [r2, #12]
 8000cb4:	e007      	b.n	8000cc6 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000cb6:	4a06      	ldr	r2, [pc, #24]	; (8000cd0 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000cb8:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	60d3      	str	r3, [r2, #12]
  }
}
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	50004710 	.word	0x50004710

08000cd4 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000cde:	bf00      	nop
 8000ce0:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 8000ce2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000ce6:	f003 0308 	and.w	r3, r3, #8
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d1f8      	bne.n	8000ce0 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8000cee:	4907      	ldr	r1, [pc, #28]	; (8000d0c <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	50004000 	.word	0x50004000
 8000d0c:	50004300 	.word	0x50004300

08000d10 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000d1a:	bf00      	nop
 8000d1c:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 8000d1e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000d22:	f003 0308 	and.w	r3, r3, #8
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d1f8      	bne.n	8000d1c <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8000d2a:	4907      	ldr	r1, [pc, #28]	; (8000d48 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 8000d34:	79fb      	ldrb	r3, [r7, #7]
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8000d36:	4313      	orrs	r3, r2
 8000d38:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	50004000 	.word	0x50004000
 8000d48:	50004300 	.word	0x50004300

08000d4c <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
		      (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000d54:	4906      	ldr	r1, [pc, #24]	; (8000d70 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000d56:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000d58:	68db      	ldr	r3, [r3, #12]
 8000d5a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
		      (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000d62:	4313      	orrs	r3, r2
 8000d64:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	50004600 	.word	0x50004600

08000d74 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000d7c:	4906      	ldr	r1, [pc, #24]	; (8000d98 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000d80:	6a1b      	ldr	r3, [r3, #32]
 8000d82:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	50004600 	.word	0x50004600

08000d9c <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000da4:	4906      	ldr	r1, [pc, #24]	; (8000dc0 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000da8:	691b      	ldr	r3, [r3, #16]
 8000daa:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000db2:	4313      	orrs	r3, r2
 8000db4:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	50004600 	.word	0x50004600

08000dc4 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000dcc:	4906      	ldr	r1, [pc, #24]	; (8000de8 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000dce:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000dd0:	695b      	ldr	r3, [r3, #20]
 8000dd2:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	50004600 	.word	0x50004600

08000dec <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
		      (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000df4:	4906      	ldr	r1, [pc, #24]	; (8000e10 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000df8:	699b      	ldr	r3, [r3, #24]
 8000dfa:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
		      (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000e02:	4313      	orrs	r3, r2
 8000e04:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	50004600 	.word	0x50004600

08000e14 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
		      (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8000e1c:	4906      	ldr	r1, [pc, #24]	; (8000e38 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8000e20:	69db      	ldr	r3, [r3, #28]
 8000e22:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
		      (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	50004600 	.word	0x50004600

08000e3c <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
		      (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000e44:	4906      	ldr	r1, [pc, #24]	; (8000e60 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8000e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e4a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
		      (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000e52:	4313      	orrs	r3, r2
 8000e54:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	50004600 	.word	0x50004600

08000e64 <XMC_SCU_CLOCK_EnableClock>:
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EXTCLKCR_ECKDIV_Pos);
}

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 8000e6e:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	6053      	str	r3, [r2, #4]
}
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	50004600 	.word	0x50004600

08000e84 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000e8e:	4a19      	ldr	r2, [pc, #100]	; (8000ef4 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000e90:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000e92:	695b      	ldr	r3, [r3, #20]
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000e9a:	4a16      	ldr	r2, [pc, #88]	; (8000ef4 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000e9c:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000e9e:	695b      	ldr	r3, [r3, #20]
 8000ea0:	f043 0310 	orr.w	r3, r3, #16
 8000ea4:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000ea6:	4913      	ldr	r1, [pc, #76]	; (8000ef4 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	614b      	str	r3, [r1, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000eb8:	4a0e      	ldr	r2, [pc, #56]	; (8000ef4 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000ebc:	695b      	ldr	r3, [r3, #20]
 8000ebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ec2:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000ec4:	4a0b      	ldr	r2, [pc, #44]	; (8000ef4 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000ec8:	695b      	ldr	r3, [r3, #20]
 8000eca:	f023 0310 	bic.w	r3, r3, #16
 8000ece:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8000ed0:	4a08      	ldr	r2, [pc, #32]	; (8000ef4 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000ed2:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000ed4:	695b      	ldr	r3, [r3, #20]
 8000ed6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eda:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8000edc:	bf00      	nop
 8000ede:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000ee0:	691b      	ldr	r3, [r3, #16]
 8000ee2:	f003 0304 	and.w	r3, r3, #4
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d0f9      	beq.n	8000ede <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	50004710 	.word	0x50004710

08000ef8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
  SCU_PLL->USBPLLCON = (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk |
		                          SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8000f02:	4a0f      	ldr	r2, [pc, #60]	; (8000f40 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000f04:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000f0c:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d10e      	bne.n	8000f32 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000f14:	4a0a      	ldr	r2, [pc, #40]	; (8000f40 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000f16:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000f1e:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8000f20:	2064      	movs	r0, #100	; 0x64
 8000f22:	f7ff fd9d 	bl	8000a60 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8000f26:	4a06      	ldr	r2, [pc, #24]	; (8000f40 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f30:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8000f32:	2064      	movs	r0, #100	; 0x64
 8000f34:	f7ff fd94 	bl	8000a60 <XMC_SCU_lDelay>
}
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	50004710 	.word	0x50004710

08000f44 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000f48:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <XMC_SCU_HIB_EnableHibernateDomain+0x4c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d10c      	bne.n	8000f6e <XMC_SCU_HIB_EnableHibernateDomain+0x2a>
  {
    SCU_POWER->PWRSET |= (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8000f54:	4a0e      	ldr	r2, [pc, #56]	; (8000f90 <XMC_SCU_HIB_EnableHibernateDomain+0x4c>)
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <XMC_SCU_HIB_EnableHibernateDomain+0x4c>)
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	6053      	str	r3, [r2, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000f60:	bf00      	nop
 8000f62:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <XMC_SCU_HIB_EnableHibernateDomain+0x4c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d0f9      	beq.n	8000f62 <XMC_SCU_HIB_EnableHibernateDomain+0x1e>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d008      	beq.n	8000f8c <XMC_SCU_HIB_EnableHibernateDomain+0x48>
  {
    SCU_RESET->RSTCLR |= (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000f7a:	4a06      	ldr	r2, [pc, #24]	; (8000f94 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f84:	6093      	str	r3, [r2, #8]
    XMC_SCU_lDelay(150U);
 8000f86:	2096      	movs	r0, #150	; 0x96
 8000f88:	f7ff fd6a 	bl	8000a60 <XMC_SCU_lDelay>
  }
}
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	50004200 	.word	0x50004200
 8000f94:	50004400 	.word	0x50004400

08000f98 <XMC_SCU_HIB_IsHibernateDomainEnabled>:
  /* Reset of hibernate domain reset */  
  SCU_RESET->RSTSET |= (uint32_t)SCU_RESET_RSTSET_HIBRS_Msk;
}

bool XMC_SCU_HIB_IsHibernateDomainEnabled(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <XMC_SCU_HIB_IsHibernateDomainEnabled+0x34>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d007      	beq.n	8000fb8 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x20>
          !(bool)(SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk));
 8000fa8:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x38>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f403 7300 	and.w	r3, r3, #512	; 0x200
  SCU_RESET->RSTSET |= (uint32_t)SCU_RESET_RSTSET_HIBRS_Msk;
}

bool XMC_SCU_HIB_IsHibernateDomainEnabled(void)
{
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d101      	bne.n	8000fb8 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x20>
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e000      	b.n	8000fba <XMC_SCU_HIB_IsHibernateDomainEnabled+0x22>
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	b2db      	uxtb	r3, r3
          !(bool)(SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk));
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	50004200 	.word	0x50004200
 8000fd0:	50004400 	.word	0x50004400

08000fd4 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:
  }
}

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8000fd8:	bf00      	nop
 8000fda:	4b19      	ldr	r3, [pc, #100]	; (8001040 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000fdc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d1f8      	bne.n	8000fda <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6>
  {
    /* Wait until the update of OSCULCTRL register in hibernate domain is completed */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000fe8:	4a16      	ldr	r2, [pc, #88]	; (8001044 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8000fea:	4b16      	ldr	r3, [pc, #88]	; (8001044 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000ff2:	61d3      	str	r3, [r2, #28]

  /* Check if the input clock is OK using OSCULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000ff4:	bf00      	nop
 8000ff6:	4b12      	ldr	r3, [pc, #72]	; (8001040 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000ff8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000ffc:	f003 0308 	and.w	r3, r3, #8
 8001000:	2b00      	cmp	r3, #0
 8001002:	d1f8      	bne.n	8000ff6 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x22>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8001004:	4a0f      	ldr	r2, [pc, #60]	; (8001044 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8001006:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	f043 0308 	orr.w	r3, r3, #8
 800100e:	60d3      	str	r3, [r2, #12]

  /* wait till clock is stable */
  do
  {
    while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCLR_Msk)
 8001010:	bf00      	nop
 8001012:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8001014:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001018:	f003 0302 	and.w	r3, r3, #2
 800101c:	2b00      	cmp	r3, #0
 800101e:	d1f8      	bne.n	8001012 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3e>
    {
      /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    }
    SCU_HIBERNATE->HDCLR |= (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8001020:	4a08      	ldr	r2, [pc, #32]	; (8001044 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8001022:	4b08      	ldr	r3, [pc, #32]	; (8001044 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f043 0308 	orr.w	r3, r3, #8
 800102a:	6053      	str	r3, [r2, #4]

    XMC_SCU_lDelay(50U);
 800102c:	2032      	movs	r0, #50	; 0x32
 800102e:	f7ff fd17 	bl	8000a60 <XMC_SCU_lDelay>

  } while ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) != 0UL);
 8001032:	4b04      	ldr	r3, [pc, #16]	; (8001044 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 0308 	and.w	r3, r3, #8
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1e8      	bne.n	8001010 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3c>

}
 800103e:	bd80      	pop	{r7, pc}
 8001040:	50004000 	.word	0x50004000
 8001044:	50004300 	.word	0x50004300

08001048 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  }
}

/* API to configure High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8001048:	b5b0      	push	{r4, r5, r7, lr}
 800104a:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 800104c:	4a13      	ldr	r2, [pc, #76]	; (800109c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x54>)
 800104e:	4b13      	ldr	r3, [pc, #76]	; (800109c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x54>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001056:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8001058:	4d11      	ldr	r5, [pc, #68]	; (80010a0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x58>)
 800105a:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x58>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8001062:	f024 0430 	bic.w	r4, r4, #48	; 0x30
		                          (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8001066:	f003 faa1 	bl	80045ac <OSCHP_GetFrequency>
 800106a:	4602      	mov	r2, r0
 800106c:	4b0d      	ldr	r3, [pc, #52]	; (80010a4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x5c>)
 800106e:	fba3 2302 	umull	r2, r3, r3, r2
 8001072:	0d1b      	lsrs	r3, r3, #20
 8001074:	3b01      	subs	r3, #1
 8001076:	041b      	lsls	r3, r3, #16
/* API to configure High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8001078:	4323      	orrs	r3, r4
 800107a:	606b      	str	r3, [r5, #4]
		                          (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 800107c:	4a07      	ldr	r2, [pc, #28]	; (800109c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x54>)
 800107e:	4b07      	ldr	r3, [pc, #28]	; (800109c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x54>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001086:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) != XMC_SCU_PLL_PLLSTAT_OSC_USABLE)
 8001088:	bf00      	nop
 800108a:	4b04      	ldr	r3, [pc, #16]	; (800109c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x54>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8001092:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8001096:	d1f8      	bne.n	800108a <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x42>
  {
      /* wait till OSC_HP output frequency is usable */
  }
}
 8001098:	bdb0      	pop	{r4, r5, r7, pc}
 800109a:	bf00      	nop
 800109c:	50004710 	.word	0x50004710
 80010a0:	50004700 	.word	0x50004700
 80010a4:	6b5fca6b 	.word	0x6b5fca6b

080010a8 <XMC_SCU_CLOCK_EnableSystemPll>:
{
  SCU_OSC->OSCHPCTRL |= (uint32_t)SCU_OSC_OSCHPCTRL_MODE_Msk;
}

void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80010ac:	4a05      	ldr	r2, [pc, #20]	; (80010c4 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 80010ae:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010b6:	f023 0302 	bic.w	r3, r3, #2
 80010ba:	6053      	str	r3, [r2, #4]
}
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	50004710 	.word	0x50004710

080010c8 <XMC_SCU_CLOCK_DisableSystemPll>:

void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80010cc:	4a05      	ldr	r2, [pc, #20]	; (80010e4 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 80010ce:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d6:	f043 0302 	orr.w	r3, r3, #2
 80010da:	6053      	str	r3, [r2, #4]
}
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	50004710 	.word	0x50004710

080010e8 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 80010e8:	b590      	push	{r4, r7, lr}
 80010ea:	b087      	sub	sp, #28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60ba      	str	r2, [r7, #8]
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	4603      	mov	r3, r0
 80010f4:	81fb      	strh	r3, [r7, #14]
 80010f6:	460b      	mov	r3, r1
 80010f8:	737b      	strb	r3, [r7, #13]

  float vco_frequency;
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 80010fa:	89fb      	ldrh	r3, [r7, #14]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fdc9 	bl	8000c94 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8001102:	7b7b      	ldrb	r3, [r7, #13]
 8001104:	2b01      	cmp	r3, #1
 8001106:	f040 8095 	bne.w	8001234 <XMC_SCU_CLOCK_StartSystemPll+0x14c>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 800110a:	89fb      	ldrh	r3, [r7, #14]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d108      	bne.n	8001122 <XMC_SCU_CLOCK_StartSystemPll+0x3a>
    {
      vco_frequency = (float)OSCHP_GetFrequency();
 8001110:	f003 fa4c 	bl	80045ac <OSCHP_GetFrequency>
 8001114:	4603      	mov	r3, r0
 8001116:	4618      	mov	r0, r3
 8001118:	f004 fa14 	bl	8005544 <__aeabi_ui2f>
 800111c:	4603      	mov	r3, r0
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	e001      	b.n	8001126 <XMC_SCU_CLOCK_StartSystemPll+0x3e>
    }
    else
    {
      vco_frequency = (float)OFI_FREQUENCY;
 8001122:	4b51      	ldr	r3, [pc, #324]	; (8001268 <XMC_SCU_CLOCK_StartSystemPll+0x180>)
 8001124:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = (float)((vco_frequency * (float)ndiv) / (float)pdiv);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f004 fa0c 	bl	8005544 <__aeabi_ui2f>
 800112c:	4603      	mov	r3, r0
 800112e:	4618      	mov	r0, r3
 8001130:	6979      	ldr	r1, [r7, #20]
 8001132:	f004 fa5f 	bl	80055f4 <__aeabi_fmul>
 8001136:	4603      	mov	r3, r0
 8001138:	461c      	mov	r4, r3
 800113a:	68b8      	ldr	r0, [r7, #8]
 800113c:	f004 fa02 	bl	8005544 <__aeabi_ui2f>
 8001140:	4603      	mov	r3, r0
 8001142:	4620      	mov	r0, r4
 8001144:	4619      	mov	r1, r3
 8001146:	f004 fb09 	bl	800575c <__aeabi_fdiv>
 800114a:	4603      	mov	r3, r0
 800114c:	617b      	str	r3, [r7, #20]
    kdiv_temp = (uint32_t)((uint32_t)vco_frequency / OFI_FREQUENCY);
 800114e:	6978      	ldr	r0, [r7, #20]
 8001150:	f004 fba0 	bl	8005894 <__aeabi_f2uiz>
 8001154:	4602      	mov	r2, r0
 8001156:	4b45      	ldr	r3, [pc, #276]	; (800126c <XMC_SCU_CLOCK_StartSystemPll+0x184>)
 8001158:	fba3 2302 	umull	r2, r3, r3, r2
 800115c:	0d5b      	lsrs	r3, r3, #21
 800115e:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8001160:	4a43      	ldr	r2, [pc, #268]	; (8001270 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8001162:	4b43      	ldr	r3, [pc, #268]	; (8001270 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f043 0301 	orr.w	r3, r3, #1
 800116a:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 800116c:	4a40      	ldr	r2, [pc, #256]	; (8001270 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 800116e:	4b40      	ldr	r3, [pc, #256]	; (8001270 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f043 0310 	orr.w	r3, r3, #16
 8001176:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8001178:	493d      	ldr	r1, [pc, #244]	; (8001270 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 800117a:	4b3d      	ldr	r3, [pc, #244]	; (8001270 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 800117c:	689a      	ldr	r2, [r3, #8]
 800117e:	4b3d      	ldr	r3, [pc, #244]	; (8001274 <XMC_SCU_CLOCK_StartSystemPll+0x18c>)
 8001180:	4013      	ands	r3, r2
    		                       SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	3a01      	subs	r2, #1
 8001186:	0212      	lsls	r2, r2, #8
 8001188:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	3b01      	subs	r3, #1
 800118e:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
    		                       SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8001190:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	3b01      	subs	r3, #1
 8001196:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8001198:	4313      	orrs	r3, r2
 800119a:	608b      	str	r3, [r1, #8]
    		                       SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 800119c:	4a34      	ldr	r2, [pc, #208]	; (8001270 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 800119e:	4b34      	ldr	r3, [pc, #208]	; (8001270 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011a6:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 80011a8:	4a31      	ldr	r2, [pc, #196]	; (8001270 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 80011aa:	4b31      	ldr	r3, [pc, #196]	; (8001270 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f023 0310 	bic.w	r3, r3, #16
 80011b2:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 80011b4:	4a2e      	ldr	r2, [pc, #184]	; (8001270 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 80011b6:	4b2e      	ldr	r3, [pc, #184]	; (8001270 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011be:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80011c0:	bf00      	nop
 80011c2:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0304 	and.w	r3, r3, #4
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d0f9      	beq.n	80011c2 <XMC_SCU_CLOCK_StartSystemPll+0xda>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 80011ce:	4a28      	ldr	r2, [pc, #160]	; (8001270 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 80011d0:	4b27      	ldr	r3, [pc, #156]	; (8001270 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f023 0301 	bic.w	r3, r3, #1
 80011d8:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 80011da:	bf00      	nop
 80011dc:	4b24      	ldr	r3, [pc, #144]	; (8001270 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1f9      	bne.n	80011dc <XMC_SCU_CLOCK_StartSystemPll+0xf4>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (uint32_t)((uint32_t)vco_frequency / 60000000UL);
 80011e8:	6978      	ldr	r0, [r7, #20]
 80011ea:	f004 fb53 	bl	8005894 <__aeabi_f2uiz>
 80011ee:	4603      	mov	r3, r0
 80011f0:	0a1b      	lsrs	r3, r3, #8
 80011f2:	4a21      	ldr	r2, [pc, #132]	; (8001278 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 80011f4:	fba2 2303 	umull	r2, r3, r2, r3
 80011f8:	0a9b      	lsrs	r3, r3, #10
 80011fa:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 80011fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	429a      	cmp	r2, r3
 8001202:	d202      	bcs.n	800120a <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8001204:	6938      	ldr	r0, [r7, #16]
 8001206:	f000 f83b 	bl	8001280 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (uint32_t)((uint32_t)vco_frequency / 90000000UL);
 800120a:	6978      	ldr	r0, [r7, #20]
 800120c:	f004 fb42 	bl	8005894 <__aeabi_f2uiz>
 8001210:	4603      	mov	r3, r0
 8001212:	09db      	lsrs	r3, r3, #7
 8001214:	4a19      	ldr	r2, [pc, #100]	; (800127c <XMC_SCU_CLOCK_StartSystemPll+0x194>)
 8001216:	fba2 2303 	umull	r2, r3, r2, r3
 800121a:	0adb      	lsrs	r3, r3, #11
 800121c:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 800121e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	429a      	cmp	r2, r3
 8001224:	d202      	bcs.n	800122c <XMC_SCU_CLOCK_StartSystemPll+0x144>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8001226:	6938      	ldr	r0, [r7, #16]
 8001228:	f000 f82a 	bl	8001280 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 800122c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800122e:	f000 f827 	bl	8001280 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8001232:	e015      	b.n	8001260 <XMC_SCU_CLOCK_StartSystemPll+0x178>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8001234:	490e      	ldr	r1, [pc, #56]	; (8001270 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 800123e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001240:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8001242:	4313      	orrs	r3, r2
 8001244:	608b      	str	r3, [r1, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8001246:	4a0a      	ldr	r2, [pc, #40]	; (8001270 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8001248:	4b09      	ldr	r3, [pc, #36]	; (8001270 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8001252:	bf00      	nop
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	2b00      	cmp	r3, #0
 800125e:	d0f9      	beq.n	8001254 <XMC_SCU_CLOCK_StartSystemPll+0x16c>
    {
      /* wait for prescaler mode */
    }
  }
}
 8001260:	371c      	adds	r7, #28
 8001262:	46bd      	mov	sp, r7
 8001264:	bd90      	pop	{r4, r7, pc}
 8001266:	bf00      	nop
 8001268:	4bb71b00 	.word	0x4bb71b00
 800126c:	165e9f81 	.word	0x165e9f81
 8001270:	50004710 	.word	0x50004710
 8001274:	f08080ff 	.word	0xf08080ff
 8001278:	011e54c7 	.word	0x011e54c7
 800127c:	00bee32f 	.word	0x00bee32f

08001280 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
{
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8001288:	4907      	ldr	r1, [pc, #28]	; (80012a8 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 800128a:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3b01      	subs	r3, #1
 8001296:	041b      	lsls	r3, r3, #16
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8001298:	4313      	orrs	r3, r2
 800129a:	608b      	str	r3, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 800129c:	2032      	movs	r0, #50	; 0x32
 800129e:	f7ff fbdf 	bl	8000a60 <XMC_SCU_lDelay>
}
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	50004710 	.word	0x50004710

080012ac <XMC_SCU_INTERRUPT_SetEventHandler>:
/*
 *
 */
XMC_SCU_STATUS_t XMC_SCU_INTERRUPT_SetEventHandler(const XMC_SCU_INTERRUPT_EVENT_t event,
		                                           const XMC_SCU_INTERRUPT_EVENT_HANDLER_t handler)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  uint32_t index;
  XMC_SCU_STATUS_t status;
  
  index = 0U;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 80012ba:	e002      	b.n	80012c2 <XMC_SCU_INTERRUPT_SetEventHandler+0x16>
  {
    index++;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	3301      	adds	r3, #1
 80012c0:	60fb      	str	r3, [r7, #12]
{
  uint32_t index;
  XMC_SCU_STATUS_t status;
  
  index = 0U;
  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	fa22 f303 	lsr.w	r3, r2, r3
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d102      	bne.n	80012d8 <XMC_SCU_INTERRUPT_SetEventHandler+0x2c>
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2b1f      	cmp	r3, #31
 80012d6:	d9f1      	bls.n	80012bc <XMC_SCU_INTERRUPT_SetEventHandler+0x10>
  {
    index++;
  }
  
  if (index == XMC_SCU_INTERRUPT_EVENT_MAX)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2b20      	cmp	r3, #32
 80012dc:	d102      	bne.n	80012e4 <XMC_SCU_INTERRUPT_SetEventHandler+0x38>
  {
    status = XMC_SCU_STATUS_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	72fb      	strb	r3, [r7, #11]
 80012e2:	e006      	b.n	80012f2 <XMC_SCU_INTERRUPT_SetEventHandler+0x46>
  }
  else
  {
    event_handler_list[index] = handler;
 80012e4:	4906      	ldr	r1, [pc, #24]	; (8001300 <XMC_SCU_INTERRUPT_SetEventHandler+0x54>)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    status = XMC_SCU_STATUS_OK;      
 80012ee:	2300      	movs	r3, #0
 80012f0:	72fb      	strb	r3, [r7, #11]
  }
  
  return status;
 80012f2:	7afb      	ldrb	r3, [r7, #11]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	20000208 	.word	0x20000208

08001304 <XMC_SCU_IRQHandler>:

/*
 *
 */
void XMC_SCU_IRQHandler(uint32_t sr_num)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  XMC_SCU_INTERRUPT_EVENT_t event;
  XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler;
  
  XMC_UNUSED_ARG(sr_num);
  
  index = 0U;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
  event = XMC_SCU_INTERUPT_GetEventStatus();
 8001310:	f7ff fbda 	bl	8000ac8 <XMC_SCU_INTERUPT_GetEventStatus>
 8001314:	6138      	str	r0, [r7, #16]
  while (index < XMC_SCU_INTERRUPT_EVENT_MAX)
 8001316:	e01c      	b.n	8001352 <XMC_SCU_IRQHandler+0x4e>
  {    
    if ((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) != 0U)
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	fa22 f303 	lsr.w	r3, r2, r3
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	2b00      	cmp	r3, #0
 8001326:	d011      	beq.n	800134c <XMC_SCU_IRQHandler+0x48>
    {
      event_handler = event_handler_list[index];
 8001328:	4a0d      	ldr	r2, [pc, #52]	; (8001360 <XMC_SCU_IRQHandler+0x5c>)
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001330:	60fb      	str	r3, [r7, #12]
      if (event_handler != NULL)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <XMC_SCU_IRQHandler+0x38>
      {
          (event_handler)();
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4798      	blx	r3
      }
      
      XMC_SCU_INTERRUPT_ClearEventStatus((uint32_t)(1UL << index));
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	2201      	movs	r2, #1
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fbcb 	bl	8000ae0 <XMC_SCU_INTERRUPT_ClearEventStatus>
      
      break;
 800134a:	e005      	b.n	8001358 <XMC_SCU_IRQHandler+0x54>
    }   
    index++;    
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	3301      	adds	r3, #1
 8001350:	617b      	str	r3, [r7, #20]
  
  XMC_UNUSED_ARG(sr_num);
  
  index = 0U;
  event = XMC_SCU_INTERUPT_GetEventStatus();
  while (index < XMC_SCU_INTERRUPT_EVENT_MAX)
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	2b1f      	cmp	r3, #31
 8001356:	d9df      	bls.n	8001318 <XMC_SCU_IRQHandler+0x14>
      
      break;
    }   
    index++;    
  }
}
 8001358:	3718      	adds	r7, #24
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000208 	.word	0x20000208

08001364 <XMC_USIC_Enable>:
 * @brief API to enable the USIC driver
 * @retval void
 *
 */
void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4a0d      	ldr	r2, [pc, #52]	; (80013a4 <XMC_USIC_Enable+0x40>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d104      	bne.n	800137e <XMC_USIC_Enable+0x1a>
  {
#if(UC_SERIES != XMC45)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8001374:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001378:	f7ff fc22 	bl	8000bc0 <XMC_SCU_RESET_DeassertPeripheralReset>
 800137c:	e00e      	b.n	800139c <XMC_USIC_Enable+0x38>
  }
#if defined(USIC1)  
  else if (usic == USIC1)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a09      	ldr	r2, [pc, #36]	; (80013a8 <XMC_USIC_Enable+0x44>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d103      	bne.n	800138e <XMC_USIC_Enable+0x2a>
  {
#if(UC_SERIES != XMC45)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
#endif	
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 8001386:	4809      	ldr	r0, [pc, #36]	; (80013ac <XMC_USIC_Enable+0x48>)
 8001388:	f7ff fc1a 	bl	8000bc0 <XMC_SCU_RESET_DeassertPeripheralReset>
 800138c:	e006      	b.n	800139c <XMC_USIC_Enable+0x38>
  }
#endif  
#if defined(USIC2)  
  else if (usic == USIC2)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a07      	ldr	r2, [pc, #28]	; (80013b0 <XMC_USIC_Enable+0x4c>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d102      	bne.n	800139c <XMC_USIC_Enable+0x38>
  {
#if(UC_SERIES != XMC45)  
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_CLOCK_USIC2);
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 8001396:	4807      	ldr	r0, [pc, #28]	; (80013b4 <XMC_USIC_Enable+0x50>)
 8001398:	f7ff fc12 	bl	8000bc0 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40030008 	.word	0x40030008
 80013a8:	48020008 	.word	0x48020008
 80013ac:	10000080 	.word	0x10000080
 80013b0:	48024008 	.word	0x48024008
 80013b4:	10000100 	.word	0x10000100

080013b8 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_CHECK_MODULE_PTR(module));

# if (UC_FAMILY == XMC4)
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 80013c0:	2010      	movs	r0, #16
 80013c2:	f7ff fd4f 	bl	8000e64 <XMC_SCU_CLOCK_EnableClock>

  /* De-assert CCU4 module */
  XMC_CCU4_lDeassertReset(module);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f000 f8d8 	bl	800157c <XMC_CCU4_lDeassertReset>
# if ((UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41) || (UC_FAMILY == XMC1))
  /* Disable CCU4 clock gating */
  XMC_CCU4_lUngateClock(module);
# endif

}
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop

080013d4 <XMC_CCU4_Init>:

}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_CHECK_MODULE_PTR(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff ffe9 	bl	80013b8 <XMC_CCU4_EnableModule>

  gctrl = module->GCTRL;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013f2:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 80013f4:	78fb      	ldrb	r3, [r7, #3]
 80013f6:	039b      	lsls	r3, r3, #14
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68fa      	ldr	r2, [r7, #12]
 8001402:	601a      	str	r2, [r3, #0]
}
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop

0800140c <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
		                            const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	795b      	ldrb	r3, [r3, #5]
 8001422:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001426:	b2db      	uxtb	r3, r3
 8001428:	051a      	lsls	r2, r3, #20
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	791b      	ldrb	r3, [r3, #4]
 8001432:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001436:	b2db      	uxtb	r3, r3
 8001438:	461a      	mov	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	795b      	ldrb	r3, [r3, #5]
 8001442:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001446:	b2db      	uxtb	r3, r3
 8001448:	461a      	mov	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	795b      	ldrb	r3, [r3, #5]
 8001452:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001456:	b2db      	uxtb	r3, r3
 8001458:	461a      	mov	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	791b      	ldrb	r3, [r3, #4]
 8001462:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001466:	b2db      	uxtb	r3, r3
 8001468:	461a      	mov	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <XMC_CCU4_EnableShadowTransfer>:
  slice->PSC = (uint32_t) div_val;
}

/* Transfers value from shadow timer registers to actual timer registers */
void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_CHECK_MODULE_PTR(module));
  module->GCSS |= (uint32_t)shadow_transfer_msk;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	691a      	ldr	r2, [r3, #16]
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	431a      	orrs	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	611a      	str	r2, [r3, #16]
}
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <XMC_CCU4_SLICE_GetEvent>:

/* Determines if the requested event has occurred or not */
bool XMC_CCU4_SLICE_GetEvent(const XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	460b      	mov	r3, r1
 80014a2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_GetEvent:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_GetEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));

  return(((uint32_t)(slice->INTS & ((uint32_t)1 << (uint32_t)event))) != 0U);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80014aa:	78fb      	ldrb	r3, [r7, #3]
 80014ac:	fa22 f303 	lsr.w	r3, r2, r3
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	bf14      	ite	ne
 80014b8:	2301      	movne	r3, #1
 80014ba:	2300      	moveq	r3, #0
 80014bc:	b2db      	uxtb	r3, r3
}
 80014be:	4618      	mov	r0, r3
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop

080014cc <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b087      	sub	sp, #28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	460b      	mov	r3, r1
 80014d6:	70fb      	strb	r3, [r7, #3]
 80014d8:	4613      	mov	r3, r2
 80014da:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80014e2:	60fb      	str	r3, [r7, #12]
  
  switch(event)
 80014e4:	78fb      	ldrb	r3, [r7, #3]
 80014e6:	2b09      	cmp	r3, #9
 80014e8:	d82c      	bhi.n	8001544 <XMC_CCU4_SLICE_SetInterruptNode+0x78>
 80014ea:	a201      	add	r2, pc, #4	; (adr r2, 80014f0 <XMC_CCU4_SLICE_SetInterruptNode+0x24>)
 80014ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f0:	08001519 	.word	0x08001519
 80014f4:	08001519 	.word	0x08001519
 80014f8:	08001523 	.word	0x08001523
 80014fc:	08001523 	.word	0x08001523
 8001500:	08001545 	.word	0x08001545
 8001504:	08001545 	.word	0x08001545
 8001508:	08001545 	.word	0x08001545
 800150c:	08001545 	.word	0x08001545
 8001510:	0800152d 	.word	0x0800152d
 8001514:	08001539 	.word	0x08001539
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 8001518:	2303      	movs	r3, #3
 800151a:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
      break;
 8001520:	e016      	b.n	8001550 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 8001522:	230c      	movs	r3, #12
 8001524:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 8001526:	2302      	movs	r3, #2
 8001528:	617b      	str	r3, [r7, #20]
      break;
 800152a:	e011      	b.n	8001550 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 800152c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001530:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 8001532:	2308      	movs	r3, #8
 8001534:	617b      	str	r3, [r7, #20]
      break;
 8001536:	e00b      	b.n	8001550 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 8001538:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800153c:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 800153e:	230a      	movs	r3, #10
 8001540:	617b      	str	r3, [r7, #20]
      break;
 8001542:	e005      	b.n	8001550 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 8001544:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001548:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 800154a:	230c      	movs	r3, #12
 800154c:	617b      	str	r3, [r7, #20]
      break;
 800154e:	bf00      	nop
  }
  
  srs &= ~mask; 
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	43db      	mvns	r3, r3
 8001554:	68fa      	ldr	r2, [r7, #12]
 8001556:	4013      	ands	r3, r2
 8001558:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 800155a:	78ba      	ldrb	r2, [r7, #2]
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	4313      	orrs	r3, r2
 8001566:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8001570:	371c      	adds	r7, #28
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop

0800157c <XMC_CCU4_lDeassertReset>:
}

#if (UC_FAMILY == XMC4)
/* De-asserts CCU4 module from reset state */
void XMC_CCU4_lDeassertReset(XMC_CCU4_MODULE_t *const module)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Enable the module */
  # if ((UC_SERIES == XMC45) || (UC_SERIES == XMC44))
	if (CCU40 == module)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a0e      	ldr	r2, [pc, #56]	; (80015c0 <XMC_CCU4_lDeassertReset+0x44>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d103      	bne.n	8001594 <XMC_CCU4_lDeassertReset+0x18>
	{
	  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 800158c:	2004      	movs	r0, #4
 800158e:	f7ff fb17 	bl	8000bc0 <XMC_SCU_RESET_DeassertPeripheralReset>
 8001592:	e012      	b.n	80015ba <XMC_CCU4_lDeassertReset+0x3e>
	}
	else if (CCU41 == module)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a0b      	ldr	r2, [pc, #44]	; (80015c4 <XMC_CCU4_lDeassertReset+0x48>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d103      	bne.n	80015a4 <XMC_CCU4_lDeassertReset+0x28>
	{
	  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 800159c:	2008      	movs	r0, #8
 800159e:	f7ff fb0f 	bl	8000bc0 <XMC_SCU_RESET_DeassertPeripheralReset>
 80015a2:	e00a      	b.n	80015ba <XMC_CCU4_lDeassertReset+0x3e>
	}
	else if (CCU42 == module)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a08      	ldr	r2, [pc, #32]	; (80015c8 <XMC_CCU4_lDeassertReset+0x4c>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d103      	bne.n	80015b4 <XMC_CCU4_lDeassertReset+0x38>
	{
	  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 80015ac:	2010      	movs	r0, #16
 80015ae:	f7ff fb07 	bl	8000bc0 <XMC_SCU_RESET_DeassertPeripheralReset>
 80015b2:	e002      	b.n	80015ba <XMC_CCU4_lDeassertReset+0x3e>
	}
	else
	{
	  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 80015b4:	4805      	ldr	r0, [pc, #20]	; (80015cc <XMC_CCU4_lDeassertReset+0x50>)
 80015b6:	f7ff fb03 	bl	8000bc0 <XMC_SCU_RESET_DeassertPeripheralReset>
	else
	{
	  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
	}
  # endif
}
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	4000c000 	.word	0x4000c000
 80015c4:	40010000 	.word	0x40010000
 80015c8:	40014000 	.word	0x40014000
 80015cc:	10000001 	.word	0x10000001

080015d0 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80015e2:	b2db      	uxtb	r3, r3
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	431a      	orrs	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <XMC_I2C_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/
/* Initializes the USIC channel by setting the data format, slave address, baudrate, transfer buffer */
void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  XMC_USIC_CH_Enable(channel);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 fa48 	bl	8001ab0 <XMC_USIC_CH_Enable>
  
  /* Data format configuration */
  channel->SCTR = ((uint32_t)TRANSMISSION_MODE << (uint32_t)USIC_CH_SCTR_TRM_Pos) | /* Transmision mode */
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a0e      	ldr	r2, [pc, #56]	; (800165c <XMC_I2C_CH_Init+0x4c>)
 8001624:	635a      	str	r2, [r3, #52]	; 0x34
                  ((uint32_t)WORDLENGTH << (uint32_t)USIC_CH_SCTR_WLE_Pos) | /* 8 data bits */
                  USIC_CH_SCTR_FLE_Msk |           /* unlimited data flow */
                  USIC_CH_SCTR_SDIR_Msk |          /* MSB shifted first */
                  USIC_CH_SCTR_PDL_Msk;            /* Passive Data Level */

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	889b      	ldrh	r3, [r3, #4]
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	4619      	mov	r1, r3
 800162e:	f000 f817 	bl	8001660 <XMC_I2C_CH_SetSlaveAddress>
  (void)XMC_I2C_CH_SetBaudrate(channel, config->baudrate);
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	4619      	mov	r1, r3
 800163a:	f000 f82b 	bl	8001694 <XMC_I2C_CH_SetBaudrate>
    
  /* Enable transfer buffer */
  channel->TCSR = ((uint32_t)SET_TDV << (uint32_t)USIC_CH_TCSR_TDEN_Pos) | USIC_CH_TCSR_TDSSM_Msk;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001644:	639a      	str	r2, [r3, #56]	; 0x38

  /* Clear status flags */
  channel->PSCR = 0xFFFFFFFF;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f04f 32ff 	mov.w	r2, #4294967295
 800164c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Disable parity generation */
  channel->CCR = 0x0U;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	073f0303 	.word	0x073f0303

08001660 <XMC_I2C_CH_SetSlaveAddress>:
/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	460b      	mov	r3, r1
 800166a:	807b      	strh	r3, [r7, #2]
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
 800166c:	887b      	ldrh	r3, [r7, #2]
 800166e:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8001672:	f5b3 4f70 	cmp.w	r3, #61440	; 0xf000
 8001676:	d103      	bne.n	8001680 <XMC_I2C_CH_SetSlaveAddress+0x20>
  {
    channel->PCR_IICMode = address;
 8001678:	887a      	ldrh	r2, [r7, #2]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	63da      	str	r2, [r3, #60]	; 0x3c
 800167e:	e003      	b.n	8001688 <XMC_I2C_CH_SetSlaveAddress+0x28>
  }
  else
  {
    channel->PCR_IICMode = ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
 8001680:	887b      	ldrh	r3, [r7, #2]
 8001682:	021a      	lsls	r2, r3, #8
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	63da      	str	r2, [r3, #60]	; 0x3c
  }
}
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop

08001694 <XMC_I2C_CH_SetBaudrate>:
  
  return (uint16_t)address;
}
/* Sets the baudrate and oversampling based on standard speed or fast speed */
XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_STATUS_t status;
  
  status = XMC_I2C_CH_STATUS_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	73fb      	strb	r3, [r7, #15]
  
  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	4a14      	ldr	r2, [pc, #80]	; (80016f8 <XMC_I2C_CH_SetBaudrate+0x64>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d80a      	bhi.n	80016c0 <XMC_I2C_CH_SetBaudrate+0x2c>
  {
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD) == XMC_USIC_CH_STATUS_OK)
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	6839      	ldr	r1, [r7, #0]
 80016ae:	220a      	movs	r2, #10
 80016b0:	f000 fa4a 	bl	8001b48 <XMC_USIC_CH_SetBaudrate>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d119      	bne.n	80016ee <XMC_I2C_CH_SetBaudrate+0x5a>
    {
      status = XMC_I2C_CH_STATUS_OK;
 80016ba:	2300      	movs	r3, #0
 80016bc:	73fb      	strb	r3, [r7, #15]
 80016be:	e016      	b.n	80016ee <XMC_I2C_CH_SetBaudrate+0x5a>
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	4a0e      	ldr	r2, [pc, #56]	; (80016fc <XMC_I2C_CH_SetBaudrate+0x68>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d810      	bhi.n	80016ea <XMC_I2C_CH_SetBaudrate+0x56>
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016cc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	63da      	str	r2, [r3, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST) == XMC_USIC_CH_STATUS_OK)
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	6839      	ldr	r1, [r7, #0]
 80016d8:	2219      	movs	r2, #25
 80016da:	f000 fa35 	bl	8001b48 <XMC_USIC_CH_SetBaudrate>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d104      	bne.n	80016ee <XMC_I2C_CH_SetBaudrate+0x5a>
    {
      status = XMC_I2C_CH_STATUS_OK;
 80016e4:	2300      	movs	r3, #0
 80016e6:	73fb      	strb	r3, [r7, #15]
 80016e8:	e001      	b.n	80016ee <XMC_I2C_CH_SetBaudrate+0x5a>
    }
  }
  else 
  {
    status = XMC_I2C_CH_STATUS_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80016ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	000186a0 	.word	0x000186a0
 80016fc:	00061a80 	.word	0x00061a80

08001700 <XMC_I2C_CH_MasterStart>:
/* Sends master start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	807b      	strh	r3, [r7, #2]
 800170c:	4613      	mov	r3, r2
 800170e:	707b      	strb	r3, [r7, #1]
  uint32_t temp;
  
  temp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_START;
 8001710:	887b      	ldrh	r3, [r7, #2]
 8001712:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001716:	b29b      	uxth	r3, r3
 8001718:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 800171a:	787b      	ldrb	r3, [r7, #1]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d103      	bne.n	8001728 <XMC_I2C_CH_MasterStart+0x28>
  {
    temp |= 0x1U;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800172e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d110      	bne.n	8001758 <XMC_I2C_CH_MasterStart+0x58>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001736:	bf00      	nop
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ff49 	bl	80015d0 <XMC_USIC_CH_GetTransmitBufferStatus>
 800173e:	4603      	mov	r3, r0
 8001740:	2b80      	cmp	r3, #128	; 0x80
 8001742:	d0f9      	beq.n	8001738 <XMC_I2C_CH_MasterStart+0x38>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800174a:	f7ff ff51 	bl	80015f0 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = temp;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001756:	e003      	b.n	8001760 <XMC_I2C_CH_MasterStart+0x60>
  }
  else
  {
    channel->IN[0U] = temp;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop

08001768 <XMC_I2C_CH_MasterRepeatedStart>:
/* Sends master repeated start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	807b      	strh	r3, [r7, #2]
 8001774:	4613      	mov	r3, r2
 8001776:	707b      	strb	r3, [r7, #1]
  uint32_t tmp;
  tmp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_RESTART;
 8001778:	887b      	ldrh	r3, [r7, #2]
 800177a:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 800177e:	b29b      	uxth	r3, r3
 8001780:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 8001782:	787b      	ldrb	r3, [r7, #1]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d103      	bne.n	8001790 <XMC_I2C_CH_MasterRepeatedStart+0x28>
  {
    tmp |= 0x1U;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f043 0301 	orr.w	r3, r3, #1
 800178e:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001796:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d110      	bne.n	80017c0 <XMC_I2C_CH_MasterRepeatedStart+0x58>
  {  
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 800179e:	bf00      	nop
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff ff15 	bl	80015d0 <XMC_USIC_CH_GetTransmitBufferStatus>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b80      	cmp	r3, #128	; 0x80
 80017aa:	d0f9      	beq.n	80017a0 <XMC_I2C_CH_MasterRepeatedStart+0x38>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017b2:	f7ff ff1d 	bl	80015f0 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = tmp;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80017be:	e003      	b.n	80017c8 <XMC_I2C_CH_MasterRepeatedStart+0x60>
  }
  else
  {
    channel->IN[0U] = tmp;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop

080017d0 <XMC_I2C_CH_MasterStop>:
/* Sends master stop command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80017de:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d111      	bne.n	800180a <XMC_I2C_CH_MasterStop+0x3a>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80017e6:	bf00      	nop
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff fef1 	bl	80015d0 <XMC_USIC_CH_GetTransmitBufferStatus>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b80      	cmp	r3, #128	; 0x80
 80017f2:	d0f9      	beq.n	80017e8 <XMC_I2C_CH_MasterStop+0x18>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017fa:	f7ff fef9 	bl	80015f0 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001804:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001808:	e004      	b.n	8001814 <XMC_I2C_CH_MasterStop+0x44>
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001810:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop

0800181c <XMC_I2C_CH_MasterTransmit>:
/* Sends master send command along with data to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	70fb      	strb	r3, [r7, #3]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800182e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d110      	bne.n	8001858 <XMC_I2C_CH_MasterTransmit+0x3c>
  {    
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001836:	bf00      	nop
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff fec9 	bl	80015d0 <XMC_USIC_CH_GetTransmitBufferStatus>
 800183e:	4603      	mov	r3, r0
 8001840:	2b80      	cmp	r3, #128	; 0x80
 8001842:	d0f9      	beq.n	8001838 <XMC_I2C_CH_MasterTransmit+0x1c>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800184a:	f7ff fed1 	bl	80015f0 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 800184e:	78fa      	ldrb	r2, [r7, #3]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001856:	e003      	b.n	8001860 <XMC_I2C_CH_MasterTransmit+0x44>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8001858:	78fa      	ldrb	r2, [r7, #3]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop

08001868 <XMC_I2C_CH_MasterReceiveAck>:
  }
}

/* Sends master receive ack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveAck(XMC_USIC_CH_t *const channel)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
/* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001876:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d111      	bne.n	80018a2 <XMC_I2C_CH_MasterReceiveAck+0x3a>
  {    
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 800187e:	bf00      	nop
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff fea5 	bl	80015d0 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001886:	4603      	mov	r3, r0
 8001888:	2b80      	cmp	r3, #128	; 0x80
 800188a:	d0f9      	beq.n	8001880 <XMC_I2C_CH_MasterReceiveAck+0x18>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001892:	f7ff fead 	bl	80015f0 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800189c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80018a0:	e004      	b.n	80018ac <XMC_I2C_CH_MasterReceiveAck+0x44>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018a8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop

080018b4 <XMC_I2C_CH_MasterReceiveNack>:
/* Sends master receive nack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80018c2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d111      	bne.n	80018ee <XMC_I2C_CH_MasterReceiveNack+0x3a>
  {    
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80018ca:	bf00      	nop
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7ff fe7f 	bl	80015d0 <XMC_USIC_CH_GetTransmitBufferStatus>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b80      	cmp	r3, #128	; 0x80
 80018d6:	d0f9      	beq.n	80018cc <XMC_I2C_CH_MasterReceiveNack+0x18>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018de:	f7ff fe87 	bl	80015f0 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80018e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80018ec:	e004      	b.n	80018f8 <XMC_I2C_CH_MasterReceiveNack+0x44>
  }
  else 
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80018f4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop

08001900 <XMC_I2C_CH_GetReceivedData>:
/* Reads the data from RBUF if FIFO size is 0 otherwise from OUTR. */
uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint8_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800190e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d103      	bne.n	800191e <XMC_I2C_CH_GetReceivedData+0x1e>
  {
    retval = (uint8_t)channel->RBUF;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800191a:	73fb      	strb	r3, [r7, #15]
 800191c:	e003      	b.n	8001926 <XMC_I2C_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint8_t)channel->OUTR;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001924:	73fb      	strb	r3, [r7, #15]
  }

  return retval;
 8001926:	7bfb      	ldrb	r3, [r7, #15]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <XMC_I2C_CH_EnableEvent>:
  }
  return status;
}
/* Enables the input parameter event by updating CCR register */
void XMC_I2C_CH_EnableEvent(XMC_USIC_CH_t *const channel, uint32_t event)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  if ((event & 0x80000000U) != 0U)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	da08      	bge.n	8001956 <XMC_I2C_CH_EnableEvent+0x22>
  {
    channel->CCR |= event & 0x7fffffffU;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800194e:	431a      	orrs	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	641a      	str	r2, [r3, #64]	; 0x40
 8001954:	e005      	b.n	8001962 <XMC_I2C_CH_EnableEvent+0x2e>
  }
  else
  {
    channel->PCR_IICMode |= event;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	431a      	orrs	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	63da      	str	r2, [r3, #60]	; 0x3c
  }
}
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <XMC_I2C_CH_DisableEvent>:
/* Disables the input parameter event by updating CCR register */
void XMC_I2C_CH_DisableEvent(XMC_USIC_CH_t *const channel, uint32_t event)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  if ((event & 0x80000000U) != 0U)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	da09      	bge.n	8001990 <XMC_I2C_CH_DisableEvent+0x24>
  {
    channel->CCR &= ~(event & 0x7fffffffU);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001986:	43db      	mvns	r3, r3
 8001988:	401a      	ands	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	641a      	str	r2, [r3, #64]	; 0x40
 800198e:	e006      	b.n	800199e <XMC_I2C_CH_DisableEvent+0x32>
  }
  else
  {
    channel->PCR_IICMode &= ~event;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	43db      	mvns	r3, r3
 8001998:	401a      	ands	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
}
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 80019ac:	4b03      	ldr	r3, [pc, #12]	; (80019bc <XMC_SCU_GetMirrorStatus+0x14>)
 80019ae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	50004000 	.word	0x50004000

080019c0 <XMC_RTC_Start>:

/*
 * Enables RTC peripheral to start counting time
 */
void XMC_RTC_Start(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  while((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
 80019c4:	bf00      	nop
 80019c6:	f7ff ffef 	bl	80019a8 <XMC_SCU_GetMirrorStatus>
 80019ca:	4603      	mov	r3, r0
 80019cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1f8      	bne.n	80019c6 <XMC_RTC_Start+0x6>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->CTR |= (uint32_t)RTC_CTR_ENB_Msk;
 80019d4:	4a03      	ldr	r2, [pc, #12]	; (80019e4 <XMC_RTC_Start+0x24>)
 80019d6:	4b03      	ldr	r3, [pc, #12]	; (80019e4 <XMC_RTC_Start+0x24>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	6053      	str	r3, [r2, #4]
}
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	50004a00 	.word	0x50004a00

080019e8 <XMC_RTC_Stop>:

/*
 * Disables RTC peripheral to start counting time
 */
void XMC_RTC_Stop(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  while((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
 80019ec:	bf00      	nop
 80019ee:	f7ff ffdb 	bl	80019a8 <XMC_SCU_GetMirrorStatus>
 80019f2:	4603      	mov	r3, r0
 80019f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d1f8      	bne.n	80019ee <XMC_RTC_Stop+0x6>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->CTR &= ~(uint32_t)RTC_CTR_ENB_Msk;
 80019fc:	4a03      	ldr	r2, [pc, #12]	; (8001a0c <XMC_RTC_Stop+0x24>)
 80019fe:	4b03      	ldr	r3, [pc, #12]	; (8001a0c <XMC_RTC_Stop+0x24>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f023 0301 	bic.w	r3, r3, #1
 8001a06:	6053      	str	r3, [r2, #4]
}
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	50004a00 	.word	0x50004a00

08001a10 <XMC_RTC_SetPrescaler>:

/*
 * Sets the RTC module prescaler value
 */
void XMC_RTC_SetPrescaler(uint16_t prescaler)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	80fb      	strh	r3, [r7, #6]
  XMC_ASSERT("XMC_RTC_SetPrescaler:Wrong prescaler value", (prescaler < XMC_RTC_MAXPRESCALER));
  
  while((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
 8001a1a:	bf00      	nop
 8001a1c:	f7ff ffc4 	bl	80019a8 <XMC_SCU_GetMirrorStatus>
 8001a20:	4603      	mov	r3, r0
 8001a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f8      	bne.n	8001a1c <XMC_RTC_SetPrescaler+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->CTR = (RTC->CTR & ~(uint32_t)RTC_CTR_DIV_Msk) |
 8001a2a:	4905      	ldr	r1, [pc, #20]	; (8001a40 <XMC_RTC_SetPrescaler+0x30>)
 8001a2c:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <XMC_RTC_SetPrescaler+0x30>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	b29a      	uxth	r2, r3
             ((uint32_t)prescaler << (uint32_t)RTC_CTR_DIV_Pos);
 8001a32:	88fb      	ldrh	r3, [r7, #6]
 8001a34:	041b      	lsls	r3, r3, #16
  
  while((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->CTR = (RTC->CTR & ~(uint32_t)RTC_CTR_DIV_Msk) |
 8001a36:	4313      	orrs	r3, r2
 8001a38:	604b      	str	r3, [r1, #4]
             ((uint32_t)prescaler << (uint32_t)RTC_CTR_DIV_Pos);
}
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	50004a00 	.word	0x50004a00

08001a44 <XMC_RTC_SetTime>:

/*
 * Sets the RTC_TIM0, RTC_TIM1 registers with time values
 */
void XMC_RTC_SetTime(const XMC_RTC_TIME_t *const time)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_RTC_SetTime:Wrong week day value", ((uint32_t)time->daysofweek < XMC_RTC_MAXDAYSOFWEEK));
  XMC_ASSERT("XMC_RTC_SetTime:Wrong month value", ((uint32_t)time->month < XMC_RTC_MAXMONTH));
  XMC_ASSERT("XMC_RTC_SetTime:Wrong year value", ((uint32_t)time->year < XMC_RTC_MAXYEAR));

  #if (XMC_RTC_INIT_SEQUENCE == 1U)
      while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_TIM0_Msk) != 0U)
 8001a4c:	bf00      	nop
 8001a4e:	f7ff ffab 	bl	80019a8 <XMC_SCU_GetMirrorStatus>
 8001a52:	4603      	mov	r3, r0
 8001a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1f8      	bne.n	8001a4e <XMC_RTC_SetTime+0xa>
      { 
         /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
      }
      RTC->TIM0 = time->raw0;
 8001a5c:	4a09      	ldr	r2, [pc, #36]	; (8001a84 <XMC_RTC_SetTime+0x40>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6213      	str	r3, [r2, #32]
      
      while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_TIM1_Msk) != 0U)
 8001a64:	bf00      	nop
 8001a66:	f7ff ff9f 	bl	80019a8 <XMC_SCU_GetMirrorStatus>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1f8      	bne.n	8001a66 <XMC_RTC_SetTime+0x22>
      {
        /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
      }
      RTC->TIM1 = time->raw1;	     
 8001a74:	4a03      	ldr	r2, [pc, #12]	; (8001a84 <XMC_RTC_SetTime+0x40>)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	6253      	str	r3, [r2, #36]	; 0x24
        /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
      }
      RTC->TIM0 = time->raw0;
      RTC->TIM1 = time->raw1;	; 
  #endif  
}
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	50004a00 	.word	0x50004a00

08001a88 <XMC_RTC_GetTime>:

/*
 * Gets the RTC module time value
 */
void XMC_RTC_GetTime(XMC_RTC_TIME_t *const time)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  time->raw0 = RTC->TIM0;
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <XMC_RTC_GetTime+0x24>)
 8001a92:	6a1a      	ldr	r2, [r3, #32]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	601a      	str	r2, [r3, #0]
  time->raw1 = RTC->TIM1;
 8001a98:	4b04      	ldr	r3, [pc, #16]	; (8001aac <XMC_RTC_GetTime+0x24>)
 8001a9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	605a      	str	r2, [r3, #4]
}
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	50004a00 	.word	0x50004a00

08001ab0 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_CHECK_CH(channel));
  
  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a1a      	ldr	r2, [pc, #104]	; (8001b24 <XMC_USIC_CH_Enable+0x74>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d003      	beq.n	8001ac8 <XMC_USIC_CH_Enable+0x18>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a19      	ldr	r2, [pc, #100]	; (8001b28 <XMC_USIC_CH_Enable+0x78>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d103      	bne.n	8001ad0 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 8001ac8:	4818      	ldr	r0, [pc, #96]	; (8001b2c <XMC_USIC_CH_Enable+0x7c>)
 8001aca:	f7ff fc4b 	bl	8001364 <XMC_USIC_Enable>
 8001ace:	e016      	b.n	8001afe <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a17      	ldr	r2, [pc, #92]	; (8001b30 <XMC_USIC_CH_Enable+0x80>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d003      	beq.n	8001ae0 <XMC_USIC_CH_Enable+0x30>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a16      	ldr	r2, [pc, #88]	; (8001b34 <XMC_USIC_CH_Enable+0x84>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d103      	bne.n	8001ae8 <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 8001ae0:	4815      	ldr	r0, [pc, #84]	; (8001b38 <XMC_USIC_CH_Enable+0x88>)
 8001ae2:	f7ff fc3f 	bl	8001364 <XMC_USIC_Enable>
 8001ae6:	e00a      	b.n	8001afe <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4a14      	ldr	r2, [pc, #80]	; (8001b3c <XMC_USIC_CH_Enable+0x8c>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d003      	beq.n	8001af8 <XMC_USIC_CH_Enable+0x48>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a13      	ldr	r2, [pc, #76]	; (8001b40 <XMC_USIC_CH_Enable+0x90>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d102      	bne.n	8001afe <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 8001af8:	4812      	ldr	r0, [pc, #72]	; (8001b44 <XMC_USIC_CH_Enable+0x94>)
 8001afa:	f7ff fc33 	bl	8001364 <XMC_USIC_Enable>
  else
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }
  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2203      	movs	r2, #3
 8001b02:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8001b04:	bf00      	nop
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d0f9      	beq.n	8001b06 <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	f023 020f 	bic.w	r2, r3, #15
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40030000 	.word	0x40030000
 8001b28:	40030200 	.word	0x40030200
 8001b2c:	40030008 	.word	0x40030008
 8001b30:	48020000 	.word	0x48020000
 8001b34:	48020200 	.word	0x48020200
 8001b38:	48020008 	.word	0x48020008
 8001b3c:	48024000 	.word	0x48024000
 8001b40:	48024200 	.word	0x48024200
 8001b44:	48024008 	.word	0x48024008

08001b48 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08e      	sub	sp, #56	; 0x38
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	2b63      	cmp	r3, #99	; 0x63
 8001b58:	d958      	bls.n	8001c0c <XMC_USIC_CH_SetBaudrate+0xc4>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d055      	beq.n	8001c0c <XMC_USIC_CH_SetBaudrate+0xc4>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8001b60:	f7ff f84c 	bl	8000bfc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8001b64:	4602      	mov	r2, r0
 8001b66:	4b2e      	ldr	r3, [pc, #184]	; (8001c20 <XMC_USIC_CH_SetBaudrate+0xd8>)
 8001b68:	fba3 2302 	umull	r2, r3, r3, r2
 8001b6c:	095b      	lsrs	r3, r3, #5
 8001b6e:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	4a2b      	ldr	r2, [pc, #172]	; (8001c20 <XMC_USIC_CH_SetBaudrate+0xd8>)
 8001b74:	fba2 2303 	umull	r2, r3, r2, r3
 8001b78:	095b      	lsrs	r3, r3, #5
 8001b7a:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 8001b80:	2301      	movs	r3, #1
 8001b82:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 8001b84:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8001b8a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001b8e:	633b      	str	r3, [r7, #48]	; 0x30
 8001b90:	e022      	b.n	8001bd8 <XMC_USIC_CH_SetBaudrate+0x90>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 8001b92:	6a3b      	ldr	r3, [r7, #32]
 8001b94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b96:	fb02 f203 	mul.w	r2, r2, r3
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	6879      	ldr	r1, [r7, #4]
 8001b9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba6:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	0a9b      	lsrs	r3, r3, #10
 8001bac:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bb4:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bbc:	d209      	bcs.n	8001bd2 <XMC_USIC_CH_SetBaudrate+0x8a>
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d205      	bcs.n	8001bd2 <XMC_USIC_CH_SetBaudrate+0x8a>
      {
        pdiv_frac_min = pdiv_frac;
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 8001bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bd0:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8001bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	633b      	str	r3, [r7, #48]	; 0x30
 8001bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1d9      	bne.n	8001b92 <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 8001bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be0:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	695a      	ldr	r2, [r3, #20]
 8001bec:	4b0d      	ldr	r3, [pc, #52]	; (8001c24 <XMC_USIC_CH_SetBaudrate+0xdc>)
 8001bee:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	3a01      	subs	r2, #1
 8001bf4:	0292      	lsls	r2, r2, #10
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8001bf6:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 8001bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001bfe:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001c0a:	e002      	b.n	8001c12 <XMC_USIC_CH_SetBaudrate+0xca>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  return status;
 8001c12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3738      	adds	r7, #56	; 0x38
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	51eb851f 	.word	0x51eb851f
 8001c24:	fc0080ef 	.word	0xfc0080ef

08001c28 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	603b      	str	r3, [r7, #0]
 8001c34:	4613      	mov	r3, r2
 8001c36:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c3e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001c4e:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 8001c50:	4013      	ands	r3, r2
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	0211      	lsls	r1, r2, #8
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 8001c5a:	79fa      	ldrb	r2, [r7, #7]
 8001c5c:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8001c5e:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
 8001c60:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	f8ffc0c0 	.word	0xf8ffc0c0

08001c78 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	603b      	str	r3, [r7, #0]
 8001c84:	4613      	mov	r3, r2
 8001c86:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001c8e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 8001ca0:	4013      	ands	r3, r2
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	0211      	lsls	r1, r2, #8
 8001ca6:	68ba      	ldr	r2, [r7, #8]
 8001ca8:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 8001caa:	79fa      	ldrb	r2, [r7, #7]
 8001cac:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 8001cae:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                   (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	efffc0c0 	.word	0xefffc0c0

08001ccc <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>:


void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
                                            const XMC_USIC_CH_FIFO_SIZE_t size,
                                            const uint32_t limit)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	607a      	str	r2, [r7, #4]
 8001cd8:	72fb      	strb	r3, [r7, #11]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001ce0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001cf0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	021b      	lsls	r3, r3, #8
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8001cf8:	431a      	orrs	r2, r3
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
 8001cfa:	7afb      	ldrb	r3, [r7, #11]
 8001cfc:	061b      	lsls	r3, r3, #24
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
}
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <XMC_USIC_CH_SetInterruptNodePointer>:


void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	607a      	str	r2, [r7, #4]
 8001d1c:	72fb      	strb	r3, [r7, #11]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	699a      	ldr	r2, [r3, #24]
 8001d22:	7afb      	ldrb	r3, [r7, #11]
 8001d24:	2107      	movs	r1, #7
 8001d26:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	401a      	ands	r2, r3
                  (service_request << (uint32_t)interrupt_node));
 8001d2e:	7afb      	ldrb	r3, [r7, #11]
 8001d30:	6879      	ldr	r1, [r7, #4]
 8001d32:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001d36:	431a      	orrs	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	619a      	str	r2, [r3, #24]
                  (service_request << (uint32_t)interrupt_node));
}
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop

08001d48 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	460b      	mov	r3, r1
 8001d52:	607a      	str	r2, [r7, #4]
 8001d54:	72fb      	strb	r3, [r7, #11]
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001d5c:	7afb      	ldrb	r3, [r7, #11]
 8001d5e:	2107      	movs	r1, #7
 8001d60:	fa01 f303 	lsl.w	r3, r1, r3
 8001d64:	43db      	mvns	r3, r3
 8001d66:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
 8001d68:	7afb      	ldrb	r3, [r7, #11]
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001d70:	431a      	orrs	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (service_request << (uint32_t)interrupt_node));
}
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop

08001d84 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	607a      	str	r2, [r7, #4]
 8001d90:	72fb      	strb	r3, [r7, #11]
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001d98:	7afb      	ldrb	r3, [r7, #11]
 8001d9a:	2107      	movs	r1, #7
 8001d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
 8001da4:	7afb      	ldrb	r3, [r7, #11]
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001dac:	431a      	orrs	r2, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                   (service_request << (uint32_t)interrupt_node));
}
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop

08001dc0 <XMC_VADC_GROUP_ExternalMuxControlInit>:
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
                                                           const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 8001dca:	783b      	ldrb	r3, [r7, #0]
 8001dcc:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	461a      	mov	r2, r3
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
 8001dd4:	78bb      	ldrb	r3, [r7, #2]
 8001dd6:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	041b      	lsls	r3, r3, #16
{
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 8001dde:	4313      	orrs	r3, r2
 8001de0:	60fb      	str	r3, [r7, #12]
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 8001dea:	78fb      	ldrb	r3, [r7, #3]
 8001dec:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	071a      	lsls	r2, r3, #28
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
 8001df4:	78fb      	ldrb	r3, [r7, #3]
 8001df6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	069b      	lsls	r3, r3, #26

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 8001dfe:	431a      	orrs	r2, r3
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
 8001e00:	78fb      	ldrb	r3, [r7, #3]
 8001e02:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	075b      	lsls	r3, r3, #29

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 8001e22:	3714      	adds	r7, #20
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <XMC_VADC_GLOBAL_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/*API to enable the VADC Module*/
void XMC_VADC_GLOBAL_EnableModule(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
#endif

#if(XMC_VADC_DEASSERT_RESET_NEEDED == 1U)
  /* Reset the Hardware */
  XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 8001e30:	2001      	movs	r0, #1
 8001e32:	f7fe fec5 	bl	8000bc0 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
}
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <XMC_VADC_GLOBAL_Init>:
}


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  uint32_t reg;
#endif
  XMC_ASSERT("XMC_VADC_GLOBAL_Init:Wrong Module Pointer", (global_ptr == VADC))

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();
 8001e42:	f7ff fff3 	bl	8001e2c <XMC_VADC_GLOBAL_EnableModule>

  global_ptr->CLC = (uint32_t)(config->clc);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	695a      	ldr	r2, [r3, #20]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	601a      	str	r2, [r3, #0]

  /* Clock configuration */

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	68da      	ldr	r2, [r3, #12]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	691a      	ldr	r2, [r3, #16]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280

#if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)

  /* Boundaries */
  global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* From the Errata sheet of XMC1100 V1.7*/
  XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
#endif

}
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop

08001e8c <XMC_VADC_GLOBAL_StartupCalibration>:
#endif
}

/* API to enable startup calibration feature */
void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  VADC_G_TypeDef *group_ptr;
#endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e9a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	73fb      	strb	r3, [r7, #15]
 8001ea8:	e016      	b.n	8001ed8 <XMC_VADC_GLOBAL_StartupCalibration+0x4c>
  {
    group_ptr = g_xmc_vadc_group_array[i];
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
 8001eac:	4a0e      	ldr	r2, [pc, #56]	; (8001ee8 <XMC_VADC_GLOBAL_StartupCalibration+0x5c>)
 8001eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb2:	60bb      	str	r3, [r7, #8]
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001eba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d007      	beq.n	8001ed2 <XMC_VADC_GLOBAL_StartupCalibration+0x46>
    {
      /* This group is active. Loop until it finishes calibration */
      while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 8001ec2:	bf00      	nop
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f8      	bne.n	8001ec4 <XMC_VADC_GLOBAL_StartupCalibration+0x38>

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001ed2:	7bfb      	ldrb	r3, [r7, #15]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	73fb      	strb	r3, [r7, #15]
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
 8001eda:	2b03      	cmp	r3, #3
 8001edc:	d9e5      	bls.n	8001eaa <XMC_VADC_GLOBAL_StartupCalibration+0x1e>
  while( ( (SHS0->SHSCFG) & (uint32_t)SHS_SHSCFG_STATE_Msk) == XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    /* NOP */
  }
#endif
}
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	08007b6c 	.word	0x08007b6c

08001eec <XMC_VADC_GROUP_Init>:
}

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)  
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Program the input classes */
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	6859      	ldr	r1, [r3, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	2300      	movs	r3, #0
 8001f00:	f000 f828 	bl	8001f54 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	6859      	ldr	r1, [r3, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	f000 f821 	bl	8001f54 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	6899      	ldr	r1, [r3, #8]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	f000 f81a 	bl	8001f54 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	6899      	ldr	r1, [r3, #8]
 8001f26:	2201      	movs	r2, #1
 8001f28:	2301      	movs	r3, #1
 8001f2a:	f000 f813 	bl	8001f54 <XMC_VADC_GROUP_InputClassInit>

  group_ptr->ARBCFG = config->g_arbcfg;
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	691a      	ldr	r2, [r3, #16]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  group_ptr->BOUND = config->g_bound;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* External mux configuration */
  XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr,config->emux_config);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	6819      	ldr	r1, [r3, #0]
 8001f48:	f7ff ff3a 	bl	8001dc0 <XMC_VADC_GROUP_ExternalMuxControlInit>

}
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop

08001f54 <XMC_VADC_GROUP_InputClassInit>:

/* API to program conversion characteristics */
void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b08d      	sub	sp, #52	; 0x34
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	603b      	str	r3, [r7, #0]
 8001f60:	4613      	mov	r3, r2
 8001f62:	71fb      	strb	r3, [r7, #7]

  /* 
   * Obtain the mask and position macros of the parameters based on what is being requested - Standard channels vs
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d113      	bne.n	8001f92 <XMC_VADC_GROUP_InputClassInit+0x3e>
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 8001f6a:	2308      	movs	r3, #8
 8001f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 8001f6e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001f72:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
 8001f74:	2300      	movs	r3, #0
 8001f76:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 8001f78:	231f      	movs	r3, #31
 8001f7a:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sample_time_std_conv;
 8001f7c:	7a3b      	ldrb	r3, [r7, #8]
 8001f7e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 8001f86:	7a7b      	ldrb	r3, [r7, #9]
 8001f88:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	76fb      	strb	r3, [r7, #27]
 8001f90:	e013      	b.n	8001fba <XMC_VADC_GROUP_InputClassInit+0x66>
  }
  else
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 8001f92:	2318      	movs	r3, #24
 8001f94:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 8001f96:	f04f 63e0 	mov.w	r3, #117440512	; 0x7000000
 8001f9a:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 8001f9c:	2310      	movs	r3, #16
 8001f9e:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 8001fa0:	f44f 13f8 	mov.w	r3, #2031616	; 0x1f0000
 8001fa4:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 8001fa6:	7abb      	ldrb	r3, [r7, #10]
 8001fa8:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 8001fb0:	7afb      	ldrb	r3, [r7, #11]
 8001fb2:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	76fb      	strb	r3, [r7, #27]
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	3228      	adds	r2, #40	; 0x28
 8001fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fc4:	617b      	str	r3, [r7, #20]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 8001fd0:	7efa      	ldrb	r2, [r7, #27]
 8001fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	617b      	str	r3, [r7, #20]
  conv_class &= ~(sample_time_mask);
 8001fde:	6a3b      	ldr	r3, [r7, #32]
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 8001fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fea:	69fa      	ldr	r2, [r7, #28]
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	617b      	str	r3, [r7, #20]
  group_ptr->ICLASS[set_num] = conv_class;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	3228      	adds	r2, #40	; 0x28
 8001ffc:	6979      	ldr	r1, [r7, #20]
 8001ffe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8002002:	3734      	adds	r7, #52	; 0x34
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <XMC_VADC_GROUP_SetPowerMode>:

/* API which sets the power mode of analog converter of a VADC group */
void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_t power_mode)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	460b      	mov	r3, r1
 8002016:	70fb      	strb	r3, [r7, #3]
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800201e:	60fb      	str	r3, [r7, #12]

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f023 0303 	bic.w	r3, r3, #3
 8002026:	60fb      	str	r3, [r7, #12]
  arbcfg |= (uint32_t)power_mode;
 8002028:	78fb      	ldrb	r3, [r7, #3]
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	4313      	orrs	r3, r2
 800202e:	60fb      	str	r3, [r7, #12]

  group_ptr->ARBCFG = arbcfg;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8002038:	3714      	adds	r7, #20
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop

08002044 <_sbrk>:
/* ========================================================================= */
/*
 * Heap break (position)
 */
__attribute__((weak)) void *_sbrk(int RequestedSize)
{
 8002044:	b480      	push	{r7}
 8002046:	b087      	sub	sp, #28
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 unsigned int  HeapSize;
 static unsigned char *HeapBound;
 static unsigned char * heap= (unsigned char *)NULL;


 HeapSize   = (unsigned int)(&Heap_Bank1_Size);
 800204c:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <_sbrk+0x60>)
 800204e:	617b      	str	r3, [r7, #20]

 /*
  * If this is the first time malloc() was invoked, we start with the
  * begining of the heap.
  */
 if(heap == (unsigned char *)NULL)
 8002050:	4b15      	ldr	r3, [pc, #84]	; (80020a8 <_sbrk+0x64>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d108      	bne.n	800206a <_sbrk+0x26>
  {
   heap = (unsigned char *)&Heap_Bank1_Start;
 8002058:	4b13      	ldr	r3, [pc, #76]	; (80020a8 <_sbrk+0x64>)
 800205a:	4a14      	ldr	r2, [pc, #80]	; (80020ac <_sbrk+0x68>)
 800205c:	601a      	str	r2, [r3, #0]
   HeapBound  = (unsigned char *) (heap + HeapSize);
 800205e:	4b12      	ldr	r3, [pc, #72]	; (80020a8 <_sbrk+0x64>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	4413      	add	r3, r2
 8002066:	4a12      	ldr	r2, [pc, #72]	; (80020b0 <_sbrk+0x6c>)
 8002068:	6013      	str	r3, [r2, #0]
  }

 /* Super duper algo to find out if we have memory for the latest request */
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;
 800206a:	4b0f      	ldr	r3, [pc, #60]	; (80020a8 <_sbrk+0x64>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	613b      	str	r3, [r7, #16]

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
 8002070:	4b0d      	ldr	r3, [pc, #52]	; (80020a8 <_sbrk+0x64>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	461a      	mov	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4413      	add	r3, r2
 800207a:	3307      	adds	r3, #7
                                          & 0xFFFFFFF8);
 800207c:	f023 0307 	bic.w	r3, r3, #7
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
 8002080:	60fb      	str	r3, [r7, #12]
                                          & 0xFFFFFFF8);

 /* Return no memory condition if we sense we are crossing the limit */
 if (NextBreak >=  HeapBound )
 8002082:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <_sbrk+0x6c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	429a      	cmp	r2, r3
 800208a:	d301      	bcc.n	8002090 <_sbrk+0x4c>
  return ((unsigned char *)NULL);
 800208c:	2300      	movs	r3, #0
 800208e:	e003      	b.n	8002098 <_sbrk+0x54>
 else
 {
  heap = NextBreak;
 8002090:	4a05      	ldr	r2, [pc, #20]	; (80020a8 <_sbrk+0x64>)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6013      	str	r3, [r2, #0]
  return CurrBreak;
 8002096:	693b      	ldr	r3, [r7, #16]
 }
}
 8002098:	4618      	mov	r0, r3
 800209a:	371c      	adds	r7, #28
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	0000fac8 	.word	0x0000fac8
 80020a8:	200001c8 	.word	0x200001c8
 80020ac:	200004f8 	.word	0x200004f8
 80020b0:	200001cc 	.word	0x200001cc

080020b4 <_init>:
 while(1){}
}

/* Init */
__attribute__((weak)) void _init(void)
{}
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <SW_IRQ_1>:
 * @post       Function updates global variables
 * @attention  checkout Infineon Note SYSTIMER_XMC45.PDF
 * @note       If I2C-Bus crashes, this handler keeps bus back to life.
 */
void SW_IRQ_1 (void *args)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
		f.eject_at_I2C_NACK=1;
 80020c8:	4b08      	ldr	r3, [pc, #32]	; (80020ec <SW_IRQ_1+0x2c>)
 80020ca:	881a      	ldrh	r2, [r3, #0]
 80020cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020d0:	801a      	strh	r2, [r3, #0]

		I2C_MASTER_AbortTransmit(&I2C_MASTER_0);
 80020d2:	4807      	ldr	r0, [pc, #28]	; (80020f0 <SW_IRQ_1+0x30>)
 80020d4:	f001 feba 	bl	8003e4c <I2C_MASTER_AbortTransmit>
		I2C_MASTER_AbortReceive(&I2C_MASTER_0);
 80020d8:	4805      	ldr	r0, [pc, #20]	; (80020f0 <SW_IRQ_1+0x30>)
 80020da:	f001 feef 	bl	8003ebc <I2C_MASTER_AbortReceive>
//		I2C_MASTER_SendStop(&I2C_MASTER_0);
		I2C_MASTER_Init(&I2C_MASTER_0);
 80020de:	4804      	ldr	r0, [pc, #16]	; (80020f0 <SW_IRQ_1+0x30>)
 80020e0:	f001 f8f2 	bl	80032c8 <I2C_MASTER_Init>
}
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	200001f8 	.word	0x200001f8
 80020f0:	2000007c 	.word	0x2000007c

080020f4 <Soft_WDG_1>:
 * It is responsible for assert ADC Result to global struct @ref ADC_B.
 */

//on_or_off: if 0:off; 1: on
void Soft_WDG_1 (bool on_or_off)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	71fb      	strb	r3, [r7, #7]
	if(on_or_off)
 80020fe:	79fb      	ldrb	r3, [r7, #7]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d005      	beq.n	8002110 <Soft_WDG_1+0x1c>
	{
		SYSTIMER_StartTimerFromISR(timer_1_of_16);
 8002104:	4b06      	ldr	r3, [pc, #24]	; (8002120 <Soft_WDG_1+0x2c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f000 fd79 	bl	8002c00 <SYSTIMER_StartTimerFromISR>
 800210e:	e004      	b.n	800211a <Soft_WDG_1+0x26>
	}
	else
	{
		SYSTIMER_StopTimerFromISR(timer_1_of_16);
 8002110:	4b03      	ldr	r3, [pc, #12]	; (8002120 <Soft_WDG_1+0x2c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f000 fd91 	bl	8002c3c <SYSTIMER_StopTimerFromISR>
	}
}
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20000204 	.word	0x20000204

08002124 <tx_callback_0>:


//IRQ-Handler of I2C-MASTER-Interface  initiated by DAVE
void tx_callback_0(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
       f.tx_completion = 1;
 8002128:	4b04      	ldr	r3, [pc, #16]	; (800213c <tx_callback_0+0x18>)
 800212a:	881a      	ldrh	r2, [r3, #0]
 800212c:	f042 0220 	orr.w	r2, r2, #32
 8002130:	801a      	strh	r2, [r3, #0]
}
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	200001f8 	.word	0x200001f8

08002140 <rx_callback_0>:

//IRQ-Handler of I2C-Interface MASTER initiated by DAVE
void rx_callback_0(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
       f.rx_completion = 1;
 8002144:	4b04      	ldr	r3, [pc, #16]	; (8002158 <rx_callback_0+0x18>)
 8002146:	881a      	ldrh	r2, [r3, #0]
 8002148:	f042 0210 	orr.w	r2, r2, #16
 800214c:	801a      	strh	r2, [r3, #0]
}
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	200001f8 	.word	0x200001f8

0800215c <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_CHECK_MODULE_PTR(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	78fb      	ldrb	r3, [r7, #3]
 800216e:	2101      	movs	r1, #1
 8002170:	fa01 f303 	lsl.w	r3, r1, r3
 8002174:	431a      	orrs	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	60da      	str	r2, [r3, #12]
}
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <XMC_CCU4_SLICE_IsTimerRunning>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer()<BR> XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE bool XMC_CCU4_SLICE_IsTimerRunning(const XMC_CCU4_SLICE_t *const slice)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  return (bool)(((slice->TCST) & CCU4_CC4_TCST_TRB_Msk) == CCU4_CC4_TCST_TRB_Msk);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	2b00      	cmp	r3, #0
 8002196:	bf14      	ite	ne
 8002198:	2301      	movne	r3, #1
 800219a:	2300      	moveq	r3, #0
 800219c:	b2db      	uxtb	r3, r3
}
 800219e:	4618      	mov	r0, r3
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop

080021ac <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	60da      	str	r2, [r3, #12]
}
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <XMC_CCU4_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StopTimer(XMC_CCU4_SLICE_t *const slice)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  slice->TCCLR |= (uint32_t) CCU4_CC4_TCCLR_TRBC_Msk;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	f043 0201 	orr.w	r2, r3, #1
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	611a      	str	r2, [r3, #16]
}
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop

080021e4 <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  slice->TCCLR |= (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	f043 0202 	orr.w	r2, r3, #2
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	611a      	str	r2, [r3, #16]
}
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop

08002204 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  slice->PRS = (uint32_t) period_val;
 8002210:	887a      	ldrh	r2, [r7, #2]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	460b      	mov	r3, r1
 800222a:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  slice->CRS = (uint32_t) compare_val;
 800222c:	887a      	ldrh	r2, [r7, #2]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	460b      	mov	r3, r1
 8002246:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800224e:	78fb      	ldrb	r3, [r7, #3]
 8002250:	2101      	movs	r1, #1
 8002252:	fa01 f303 	lsl.w	r3, r1, r3
 8002256:	431a      	orrs	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <XMC_CCU4_SLICE_ClearEvent>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_EnableEvent()<BR> XMC_CCU4_SLICE_SetEvent()<BR> XMC_CCU4_SLICE_GetEvent().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearEvent(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	460b      	mov	r3, r1
 8002272:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->SWR |= ((uint32_t) 1) << ((uint32_t) event);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800227a:	78fb      	ldrb	r3, [r7, #3]
 800227c:	2101      	movs	r1, #1
 800227e:	fa01 f303 	lsl.w	r3, r1, r3
 8002282:	431a      	orrs	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
 800229c:	2300      	movs	r3, #0
 800229e:	73fb      	strb	r3, [r7, #15]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80022a6:	f083 0301 	eor.w	r3, r3, #1
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d009      	beq.n	80022c4 <TIMER_Init+0x30>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d104      	bne.n	80022c4 <TIMER_Init+0x30>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f88c 	bl	80023d8 <TIMER_CCU4_lInit>
 80022c0:	4603      	mov	r3, r0
 80022c2:	73fb      	strb	r3, [r7, #15]
      status = TIMER_CCU8_lInit(handle_ptr);
    }
#endif
  }

  return (status);
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop

080022d0 <TIMER_Start>:

/*
 * This function starts the timer to generate the events for the specified time_interval value
 */
TIMER_STATUS_t TIMER_Start(TIMER_t  *const handle_ptr)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Start:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00c      	beq.n	80022fc <TIMER_Start+0x2c>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d104      	bne.n	80022f6 <TIMER_Start+0x26>
    {
      /* Start the timer manually */
      XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff ff5b 	bl	80021ac <XMC_CCU4_SLICE_StartTimer>
       {
      /* Start the timer manually */
      XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 80022f6:	2300      	movs	r3, #0
 80022f8:	73fb      	strb	r3, [r7, #15]
 80022fa:	e001      	b.n	8002300 <TIMER_Start+0x30>
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 80022fc:	2301      	movs	r3, #1
 80022fe:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8002300:	7bfb      	ldrb	r3, [r7, #15]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop

0800230c <TIMER_Stop>:

/*
 * This function stops and clears the timer
 */
TIMER_STATUS_t TIMER_Stop(TIMER_t  *const handle_ptr)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Stop:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check whether timer is initialized and in running state */
  if ((TIMER_GetTimerStatus(handle_ptr)) && (true == handle_ptr->initialized))
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f000 f81d 	bl	8002354 <TIMER_GetTimerStatus>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d011      	beq.n	8002344 <TIMER_Stop+0x38>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00c      	beq.n	8002344 <TIMER_Stop+0x38>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002330:	2b00      	cmp	r3, #0
 8002332:	d104      	bne.n	800233e <TIMER_Stop+0x32>
    {
      /* Stops the timer */
      XMC_CCU4_SLICE_StopTimer(handle_ptr->ccu4_slice_ptr);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff ff43 	bl	80021c4 <XMC_CCU4_SLICE_StopTimer>
       {
      /* Stops the timer */
      XMC_CCU8_SLICE_StopTimer(handle_ptr->ccu8_slice_ptr);
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 800233e:	2300      	movs	r3, #0
 8002340:	73fb      	strb	r3, [r7, #15]
 8002342:	e001      	b.n	8002348 <TIMER_Stop+0x3c>
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 8002344:	2301      	movs	r3, #1
 8002346:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8002348:	7bfb      	ldrb	r3, [r7, #15]
}
 800234a:	4618      	mov	r0, r3
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop

08002354 <TIMER_GetTimerStatus>:

/*
 * This function returns the status of the timer
 */
bool TIMER_GetTimerStatus(TIMER_t  *const handle_ptr)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  bool status;

  XMC_ASSERT("TIMER_GetTimerStatus:handle_ptr NULL" , (handle_ptr != NULL));

  status = false;
 800235c:	2300      	movs	r3, #0
 800235e:	73fb      	strb	r3, [r7, #15]

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002366:	2b00      	cmp	r3, #0
 8002368:	d106      	bne.n	8002378 <TIMER_GetTimerStatus+0x24>
  {
    /* Returns the current status of the timer */
    status = XMC_CCU4_SLICE_IsTimerRunning(handle_ptr->ccu4_slice_ptr);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff ff08 	bl	8002184 <XMC_CCU4_SLICE_IsTimerRunning>
 8002374:	4603      	mov	r3, r0
 8002376:	73fb      	strb	r3, [r7, #15]
    /* Returns the current status of the timer */
    status = XMC_CCU8_SLICE_IsTimerRunning(handle_ptr->ccu8_slice_ptr);
  }
#endif

  return (status);
 8002378:	7bfb      	ldrb	r3, [r7, #15]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop

08002384 <TIMER_GetInterruptStatus>:

/*
 * This function reads the timer event(period match interrupt) status of the given timer
 */
bool TIMER_GetInterruptStatus(TIMER_t * const handle_ptr)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  bool status;
  XMC_ASSERT("TIMER_GetInterruptStatus:handle_ptr NULL" , (handle_ptr != NULL));
  status = false;
 800238c:	2300      	movs	r3, #0
 800238e:	73fb      	strb	r3, [r7, #15]
#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002396:	2b00      	cmp	r3, #0
 8002398:	d107      	bne.n	80023aa <TIMER_GetInterruptStatus+0x26>
  {
    /* Reads the interrupt status */
    status = XMC_CCU4_SLICE_GetEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	4618      	mov	r0, r3
 80023a0:	2100      	movs	r1, #0
 80023a2:	f7ff f879 	bl	8001498 <XMC_CCU4_SLICE_GetEvent>
 80023a6:	4603      	mov	r3, r0
 80023a8:	73fb      	strb	r3, [r7, #15]
  {
    /* Reads the interrupt status */
    status = XMC_CCU8_SLICE_GetEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
  }
#endif
  return (status);
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <TIMER_ClearEvent>:

/*
 * This function clears the period match interrupt status of the given timer.
 */
void TIMER_ClearEvent(TIMER_t *const handle_ptr)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("TIME_CCU_AcknowledgeInterrupt:handle_ptr NULL" , (handle_ptr != NULL));

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d105      	bne.n	80023d2 <TIMER_ClearEvent+0x1e>
  {
    /* clears the timer event(period match interrupt) */
    XMC_CCU4_SLICE_ClearEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	4618      	mov	r0, r3
 80023cc:	2100      	movs	r1, #0
 80023ce:	f7ff ff4b 	bl	8002268 <XMC_CCU4_SLICE_ClearEvent>
  {
    /* clears the timer event(period match interrupt) */
    XMC_CCU8_SLICE_ClearEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
  }
#endif
}
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f001 fffd 	bl	80043e4 <GLOBAL_CCU4_Init>
 80023ea:	4603      	mov	r3, r0
 80023ec:	73fb      	strb	r3, [r7, #15]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	7e1b      	ldrb	r3, [r3, #24]
 80023f8:	4610      	mov	r0, r2
 80023fa:	4619      	mov	r1, r3
 80023fc:	f7ff feae 	bl	800215c <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	695a      	ldr	r2, [r3, #20]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	69db      	ldr	r3, [r3, #28]
 8002408:	4610      	mov	r0, r2
 800240a:	4619      	mov	r1, r3
 800240c:	f7fe fffe 	bl	800140c <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 f82d 	bl	8002470 <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00f      	beq.n	8002440 <TIMER_CCU4_lInit+0x68>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	695a      	ldr	r2, [r3, #20]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 3020 	ldrb.w	r3, [r3, #32]
 800242a:	4610      	mov	r0, r2
 800242c:	2100      	movs	r1, #0
 800242e:	461a      	mov	r2, r3
 8002430:	f7ff f84c 	bl	80014cc <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	4618      	mov	r0, r3
 800243a:	2100      	movs	r1, #0
 800243c:	f7ff fefe 	bl	800223c <XMC_CCU4_SLICE_EnableEvent>
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff fecd 	bl	80021e4 <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002458:	2b00      	cmp	r3, #0
 800245a:	d004      	beq.n	8002466 <TIMER_CCU4_lInit+0x8e>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	695b      	ldr	r3, [r3, #20]
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff fea3 	bl	80021ac <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
 8002466:	7bfb      	ldrb	r3, [r7, #15]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	695a      	ldr	r2, [r3, #20]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002480:	4610      	mov	r0, r2
 8002482:	4619      	mov	r1, r3
 8002484:	f7ff febe 	bl	8002204 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	4618      	mov	r0, r3
 800248e:	2100      	movs	r1, #0
 8002490:	f7ff fec6 	bl	8002220 <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	689a      	ldr	r2, [r3, #8]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	4610      	mov	r0, r2
 80024a0:	4619      	mov	r1, r3
 80024a2:	f7fe ffe9 	bl	8001478 <XMC_CCU4_EnableShadowTransfer>
}
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <NVIC_GetPriorityGrouping>:
  The function reads the priority grouping field from the NVIC Interrupt Controller.

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
 80024b0:	4b04      	ldr	r3, [pc, #16]	; (80024c4 <NVIC_GetPriorityGrouping+0x18>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80024b8:	0a1b      	lsrs	r3, r3, #8
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	e000ed00 	.word	0xe000ed00

080024c8 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	6039      	str	r1, [r7, #0]
 80024d2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80024d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	da0b      	bge.n	80024f4 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80024dc:	490d      	ldr	r1, [pc, #52]	; (8002514 <NVIC_SetPriority+0x4c>)
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	f003 030f 	and.w	r3, r3, #15
 80024e4:	3b04      	subs	r3, #4
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	0092      	lsls	r2, r2, #2
 80024ec:	b2d2      	uxtb	r2, r2
 80024ee:	440b      	add	r3, r1
 80024f0:	761a      	strb	r2, [r3, #24]
 80024f2:	e009      	b.n	8002508 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80024f4:	4908      	ldr	r1, [pc, #32]	; (8002518 <NVIC_SetPriority+0x50>)
 80024f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	b2d2      	uxtb	r2, r2
 80024fe:	0092      	lsls	r2, r2, #2
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	440b      	add	r3, r1
 8002504:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	e000ed00 	.word	0xe000ed00
 8002518:	e000e100 	.word	0xe000e100

0800251c <NVIC_EncodePriority>:
    \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
    \param [in]       SubPriority  Subpriority value (starting from 0).
    \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800251c:	b480      	push	{r7}
 800251e:	b089      	sub	sp, #36	; 0x24
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f1c3 0307 	rsb	r3, r3, #7
 8002536:	2b06      	cmp	r3, #6
 8002538:	bf28      	it	cs
 800253a:	2306      	movcs	r3, #6
 800253c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	3306      	adds	r3, #6
 8002542:	2b06      	cmp	r3, #6
 8002544:	d902      	bls.n	800254c <NVIC_EncodePriority+0x30>
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	3b01      	subs	r3, #1
 800254a:	e000      	b.n	800254e <NVIC_EncodePriority+0x32>
 800254c:	2300      	movs	r3, #0
 800254e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	2201      	movs	r2, #1
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	3b01      	subs	r3, #1
 800255a:	461a      	mov	r2, r3
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	401a      	ands	r2, r3
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	409a      	lsls	r2, r3
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	2101      	movs	r1, #1
 8002568:	fa01 f303 	lsl.w	r3, r1, r3
 800256c:	3b01      	subs	r3, #1
 800256e:	4619      	mov	r1, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
 8002574:	4313      	orrs	r3, r2
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
         );
}
 8002576:	4618      	mov	r0, r3
 8002578:	3724      	adds	r7, #36	; 0x24
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop

08002584 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3b01      	subs	r3, #1
 8002590:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002594:	d301      	bcc.n	800259a <SysTick_Config+0x16>
 8002596:	2301      	movs	r3, #1
 8002598:	e00f      	b.n	80025ba <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 800259a:	4a0a      	ldr	r2, [pc, #40]	; (80025c4 <SysTick_Config+0x40>)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3b01      	subs	r3, #1
 80025a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 80025a2:	f04f 30ff 	mov.w	r0, #4294967295
 80025a6:	213f      	movs	r1, #63	; 0x3f
 80025a8:	f7ff ff8e 	bl	80024c8 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80025ac:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <SysTick_Config+0x40>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025b2:	4b04      	ldr	r3, [pc, #16]	; (80025c4 <SysTick_Config+0x40>)
 80025b4:	2207      	movs	r2, #7
 80025b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	e000e010 	.word	0xe000e010

080025c8 <SYSTIMER_lInsertTimerList>:
**********************************************************************************************************************/
/*
 * This function is called to insert a timer into the timer list.
 */
static void SYSTIMER_lInsertTimerList(uint32_t tbl_index)
{
 80025c8:	b490      	push	{r4, r7}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  int32_t delta_ticks;
  int32_t timer_count;
  bool found_flag = false;
 80025d0:	2300      	movs	r3, #0
 80025d2:	73fb      	strb	r3, [r7, #15]
   /* Get timer time */
  timer_count = (int32_t)g_timer_tbl[tbl_index].count;
 80025d4:	496b      	ldr	r1, [pc, #428]	; (8002784 <SYSTIMER_lInsertTimerList+0x1bc>)
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	4613      	mov	r3, r2
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	4413      	add	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	440b      	add	r3, r1
 80025e2:	3318      	adds	r3, #24
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	60bb      	str	r3, [r7, #8]
  /* Check if Timer list is NULL */
  if (NULL == g_timer_list)
 80025e8:	4b67      	ldr	r3, [pc, #412]	; (8002788 <SYSTIMER_lInsertTimerList+0x1c0>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d109      	bne.n	8002604 <SYSTIMER_lInsertTimerList+0x3c>
  {
    /* Set this as first Timer */
    g_timer_list = &g_timer_tbl[tbl_index];
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	4613      	mov	r3, r2
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	4413      	add	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4a62      	ldr	r2, [pc, #392]	; (8002784 <SYSTIMER_lInsertTimerList+0x1bc>)
 80025fc:	4413      	add	r3, r2
 80025fe:	4a62      	ldr	r2, [pc, #392]	; (8002788 <SYSTIMER_lInsertTimerList+0x1c0>)
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	e0bb      	b.n	800277c <SYSTIMER_lInsertTimerList+0x1b4>
  }
  /* If not, find the correct place, and insert the specified timer */
  else
  {
    object_ptr = g_timer_list;
 8002604:	4b60      	ldr	r3, [pc, #384]	; (8002788 <SYSTIMER_lInsertTimerList+0x1c0>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	617b      	str	r3, [r7, #20]
    /* Get timer tick */
    delta_ticks = timer_count;
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	613b      	str	r3, [r7, #16]
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 800260e:	e0ab      	b.n	8002768 <SYSTIMER_lInsertTimerList+0x1a0>
    {
      /* Get timer Count Difference */
      delta_ticks -= (int32_t)object_ptr->count;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	461a      	mov	r2, r3
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1a9b      	subs	r3, r3, r2
 800261a:	613b      	str	r3, [r7, #16]
      /* Check for delta ticks < 0 */
      if (delta_ticks <= 0)
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	2b00      	cmp	r3, #0
 8002620:	dc7a      	bgt.n	8002718 <SYSTIMER_lInsertTimerList+0x150>
      {
        /* Check If head item */
        if (NULL != object_ptr->prev)
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d026      	beq.n	8002678 <SYSTIMER_lInsertTimerList+0xb0>
        {
          /* If Insert to list */
          object_ptr->prev->next = &g_timer_tbl[tbl_index];
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	6859      	ldr	r1, [r3, #4]
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	4613      	mov	r3, r2
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	4413      	add	r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4a52      	ldr	r2, [pc, #328]	; (8002784 <SYSTIMER_lInsertTimerList+0x1bc>)
 800263a:	4413      	add	r3, r2
 800263c:	600b      	str	r3, [r1, #0]
          g_timer_tbl[tbl_index].prev = object_ptr->prev;
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	6859      	ldr	r1, [r3, #4]
 8002642:	4850      	ldr	r0, [pc, #320]	; (8002784 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	4613      	mov	r3, r2
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	4413      	add	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	4403      	add	r3, r0
 8002650:	6059      	str	r1, [r3, #4]
          g_timer_tbl[tbl_index].next = object_ptr;
 8002652:	494c      	ldr	r1, [pc, #304]	; (8002784 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	4613      	mov	r3, r2
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	4413      	add	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	440b      	add	r3, r1
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	601a      	str	r2, [r3, #0]
          object_ptr->prev = &g_timer_tbl[tbl_index];
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	4613      	mov	r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	4413      	add	r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4a45      	ldr	r2, [pc, #276]	; (8002784 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002670:	441a      	add	r2, r3
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	605a      	str	r2, [r3, #4]
 8002676:	e01c      	b.n	80026b2 <SYSTIMER_lInsertTimerList+0xea>
        }
        else
        {
          /* Set Timer as first item */
          g_timer_tbl[tbl_index].next = g_timer_list;
 8002678:	4b43      	ldr	r3, [pc, #268]	; (8002788 <SYSTIMER_lInsertTimerList+0x1c0>)
 800267a:	6819      	ldr	r1, [r3, #0]
 800267c:	4841      	ldr	r0, [pc, #260]	; (8002784 <SYSTIMER_lInsertTimerList+0x1bc>)
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	4613      	mov	r3, r2
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	4413      	add	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4403      	add	r3, r0
 800268a:	6019      	str	r1, [r3, #0]
          g_timer_list->prev = &g_timer_tbl[tbl_index];
 800268c:	4b3e      	ldr	r3, [pc, #248]	; (8002788 <SYSTIMER_lInsertTimerList+0x1c0>)
 800268e:	6819      	ldr	r1, [r3, #0]
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	4613      	mov	r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	4413      	add	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4a3a      	ldr	r2, [pc, #232]	; (8002784 <SYSTIMER_lInsertTimerList+0x1bc>)
 800269c:	4413      	add	r3, r2
 800269e:	604b      	str	r3, [r1, #4]
          g_timer_list = &g_timer_tbl[tbl_index];
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	4613      	mov	r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	4413      	add	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4a36      	ldr	r2, [pc, #216]	; (8002784 <SYSTIMER_lInsertTimerList+0x1bc>)
 80026ac:	4413      	add	r3, r2
 80026ae:	4a36      	ldr	r2, [pc, #216]	; (8002788 <SYSTIMER_lInsertTimerList+0x1c0>)
 80026b0:	6013      	str	r3, [r2, #0]
        }
        g_timer_tbl[tbl_index].count = g_timer_tbl[tbl_index].next->count + (uint32_t)delta_ticks;
 80026b2:	4934      	ldr	r1, [pc, #208]	; (8002784 <SYSTIMER_lInsertTimerList+0x1bc>)
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	4613      	mov	r3, r2
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	4413      	add	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	440b      	add	r3, r1
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	699a      	ldr	r2, [r3, #24]
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	18d1      	adds	r1, r2, r3
 80026c8:	482e      	ldr	r0, [pc, #184]	; (8002784 <SYSTIMER_lInsertTimerList+0x1bc>)
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	4413      	add	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4403      	add	r3, r0
 80026d6:	3318      	adds	r3, #24
 80026d8:	6019      	str	r1, [r3, #0]
        g_timer_tbl[tbl_index].next->count  -= g_timer_tbl[tbl_index].count;
 80026da:	492a      	ldr	r1, [pc, #168]	; (8002784 <SYSTIMER_lInsertTimerList+0x1bc>)
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	4613      	mov	r3, r2
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	4413      	add	r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	440b      	add	r3, r1
 80026e8:	6819      	ldr	r1, [r3, #0]
 80026ea:	4826      	ldr	r0, [pc, #152]	; (8002784 <SYSTIMER_lInsertTimerList+0x1bc>)
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	4613      	mov	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	4413      	add	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4403      	add	r3, r0
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6998      	ldr	r0, [r3, #24]
 80026fc:	4c21      	ldr	r4, [pc, #132]	; (8002784 <SYSTIMER_lInsertTimerList+0x1bc>)
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	4613      	mov	r3, r2
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	4413      	add	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	4423      	add	r3, r4
 800270a:	3318      	adds	r3, #24
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	1ac3      	subs	r3, r0, r3
 8002710:	618b      	str	r3, [r1, #24]
        found_flag = true;
 8002712:	2301      	movs	r3, #1
 8002714:	73fb      	strb	r3, [r7, #15]
 8002716:	e024      	b.n	8002762 <SYSTIMER_lInsertTimerList+0x19a>
      }
      /* Check for last item in list */
      else
      {
        if ((delta_ticks > 0) && (NULL == object_ptr->next))
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	2b00      	cmp	r3, #0
 800271c:	dd21      	ble.n	8002762 <SYSTIMER_lInsertTimerList+0x19a>
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d11d      	bne.n	8002762 <SYSTIMER_lInsertTimerList+0x19a>
        {
          /* Yes, insert into */
          g_timer_tbl[tbl_index].prev = object_ptr;
 8002726:	4917      	ldr	r1, [pc, #92]	; (8002784 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	4613      	mov	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	4413      	add	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	440b      	add	r3, r1
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	605a      	str	r2, [r3, #4]
          object_ptr->next = &g_timer_tbl[tbl_index];
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	4613      	mov	r3, r2
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	4413      	add	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4a10      	ldr	r2, [pc, #64]	; (8002784 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002744:	441a      	add	r2, r3
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	601a      	str	r2, [r3, #0]
          g_timer_tbl[tbl_index].count = (uint32_t)delta_ticks;
 800274a:	6939      	ldr	r1, [r7, #16]
 800274c:	480d      	ldr	r0, [pc, #52]	; (8002784 <SYSTIMER_lInsertTimerList+0x1bc>)
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	4413      	add	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4403      	add	r3, r0
 800275a:	3318      	adds	r3, #24
 800275c:	6019      	str	r1, [r3, #0]
          found_flag = true;
 800275e:	2301      	movs	r3, #1
 8002760:	73fb      	strb	r3, [r7, #15]
        }
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	617b      	str	r3, [r7, #20]
  {
    object_ptr = g_timer_list;
    /* Get timer tick */
    delta_ticks = timer_count;
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d006      	beq.n	800277c <SYSTIMER_lInsertTimerList+0x1b4>
 800276e:	7bfb      	ldrb	r3, [r7, #15]
 8002770:	f083 0301 	eor.w	r3, r3, #1
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	f47f af4a 	bne.w	8002610 <SYSTIMER_lInsertTimerList+0x48>
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
    }
  }
}
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bc90      	pop	{r4, r7}
 8002782:	4770      	bx	lr
 8002784:	20000288 	.word	0x20000288
 8002788:	200001d8 	.word	0x200001d8

0800278c <SYSTIMER_lRemoveTimerList>:

/*
 * This function is called to remove a timer from the timer list. 
 */
static void SYSTIMER_lRemoveTimerList(uint32_t tbl_index)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = &g_timer_tbl[tbl_index];
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	4613      	mov	r3, r2
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	4413      	add	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4a29      	ldr	r2, [pc, #164]	; (8002844 <SYSTIMER_lRemoveTimerList+0xb8>)
 80027a0:	4413      	add	r3, r2
 80027a2:	60fb      	str	r3, [r7, #12]
  /* Check whether only one timer available */
  if ((NULL == object_ptr->prev) && (NULL == object_ptr->next ))
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d107      	bne.n	80027bc <SYSTIMER_lRemoveTimerList+0x30>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d103      	bne.n	80027bc <SYSTIMER_lRemoveTimerList+0x30>
  {
    /* set timer list as NULL */ 
    g_timer_list = NULL;                  
 80027b4:	4b24      	ldr	r3, [pc, #144]	; (8002848 <SYSTIMER_lRemoveTimerList+0xbc>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	e03d      	b.n	8002838 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the first item in timer list */
  else if (NULL == object_ptr->prev)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d114      	bne.n	80027ee <SYSTIMER_lRemoveTimerList+0x62>
  {
    /* Remove timer from list, and reset timer list */
    g_timer_list  = object_ptr->next;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a1f      	ldr	r2, [pc, #124]	; (8002848 <SYSTIMER_lRemoveTimerList+0xbc>)
 80027ca:	6013      	str	r3, [r2, #0]
    g_timer_list->prev = NULL;
 80027cc:	4b1e      	ldr	r3, [pc, #120]	; (8002848 <SYSTIMER_lRemoveTimerList+0xbc>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2200      	movs	r2, #0
 80027d2:	605a      	str	r2, [r3, #4]
    g_timer_list->count += object_ptr->count;
 80027d4:	4b1c      	ldr	r3, [pc, #112]	; (8002848 <SYSTIMER_lRemoveTimerList+0xbc>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a1b      	ldr	r2, [pc, #108]	; (8002848 <SYSTIMER_lRemoveTimerList+0xbc>)
 80027da:	6812      	ldr	r2, [r2, #0]
 80027dc:	6991      	ldr	r1, [r2, #24]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	6992      	ldr	r2, [r2, #24]
 80027e2:	440a      	add	r2, r1
 80027e4:	619a      	str	r2, [r3, #24]
    object_ptr->next    = NULL;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	e024      	b.n	8002838 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the last item in timer list */
  else if (NULL == object_ptr->next)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d107      	bne.n	8002806 <SYSTIMER_lRemoveTimerList+0x7a>
  {
    /* Remove timer from list */
    object_ptr->prev->next = NULL;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	605a      	str	r2, [r3, #4]
 8002804:	e018      	b.n	8002838 <SYSTIMER_lRemoveTimerList+0xac>
  }
  else                       
  {
    /* Remove timer from list */
    object_ptr->prev->next  =  object_ptr->next;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	6812      	ldr	r2, [r2, #0]
 800280e:	601a      	str	r2, [r3, #0]
    object_ptr->next->prev  =  object_ptr->prev;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	6852      	ldr	r2, [r2, #4]
 8002818:	605a      	str	r2, [r3, #4]
    object_ptr->next->count += object_ptr->count;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	6812      	ldr	r2, [r2, #0]
 8002822:	6991      	ldr	r1, [r2, #24]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	6992      	ldr	r2, [r2, #24]
 8002828:	440a      	add	r2, r1
 800282a:	619a      	str	r2, [r3, #24]
    object_ptr->next = NULL;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	605a      	str	r2, [r3, #4]
  }
}
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	20000288 	.word	0x20000288
 8002848:	200001d8 	.word	0x200001d8

0800284c <SYSTIMER_lTimerHandler>:

/*
 * Handler function called from SysTick event handler.
 */
static void SYSTIMER_lTimerHandler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
 8002852:	4b2f      	ldr	r3, [pc, #188]	; (8002910 <SYSTIMER_lTimerHandler+0xc4>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	607b      	str	r3, [r7, #4]
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 8002858:	e050      	b.n	80028fc <SYSTIMER_lTimerHandler+0xb0>
  {
    if (true == object_ptr->delete_swtmr)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d013      	beq.n	800288c <SYSTIMER_lTimerHandler+0x40>
    {
      /* Yes, remove this timer from timer list */
      SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff ff8f 	bl	800278c <SYSTIMER_lRemoveTimerList>
      /* Set timer status as SYSTIMER_STATE_NOT_INITIALIZED */
      object_ptr->state = SYSTIMER_STATE_NOT_INITIALIZED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	735a      	strb	r2, [r3, #13]
      /* Release resource which are hold by this timer */
      g_timer_tracker &= ~(1U << object_ptr->id);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	461a      	mov	r2, r3
 800287a:	2301      	movs	r3, #1
 800287c:	4093      	lsls	r3, r2
 800287e:	43da      	mvns	r2, r3
 8002880:	4b24      	ldr	r3, [pc, #144]	; (8002914 <SYSTIMER_lTimerHandler+0xc8>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4013      	ands	r3, r2
 8002886:	4a23      	ldr	r2, [pc, #140]	; (8002914 <SYSTIMER_lTimerHandler+0xc8>)
 8002888:	6013      	str	r3, [r2, #0]
 800288a:	e034      	b.n	80028f6 <SYSTIMER_lTimerHandler+0xaa>
    }
    /* Check whether timer is a one shot timer */
    else if (SYSTIMER_MODE_ONE_SHOT == object_ptr->mode)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	7b1b      	ldrb	r3, [r3, #12]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d112      	bne.n	80028ba <SYSTIMER_lTimerHandler+0x6e>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	7b5b      	ldrb	r3, [r3, #13]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d12c      	bne.n	80028f6 <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff ff73 	bl	800278c <SYSTIMER_lRemoveTimerList>
        /* Set timer status as SYSTIMER_STATE_STOPPED */
        object_ptr->state = SYSTIMER_STATE_STOPPED;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2202      	movs	r2, #2
 80028aa:	735a      	strb	r2, [r3, #13]
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6912      	ldr	r2, [r2, #16]
 80028b4:	4610      	mov	r0, r2
 80028b6:	4798      	blx	r3
 80028b8:	e01d      	b.n	80028f6 <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    /* Check whether timer is periodic timer */
    else if (SYSTIMER_MODE_PERIODIC == object_ptr->mode)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	7b1b      	ldrb	r3, [r3, #12]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d118      	bne.n	80028f4 <SYSTIMER_lTimerHandler+0xa8>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	7b5b      	ldrb	r3, [r3, #13]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d115      	bne.n	80028f6 <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff ff5c 	bl	800278c <SYSTIMER_lRemoveTimerList>
        /* Reset timer tick */
        object_ptr->count = object_ptr->reload;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	69da      	ldr	r2, [r3, #28]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	619a      	str	r2, [r3, #24]
        /* Insert timer into timer list */
        SYSTIMER_lInsertTimerList((uint32_t)object_ptr->id);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff fe71 	bl	80025c8 <SYSTIMER_lInsertTimerList>
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6912      	ldr	r2, [r2, #16]
 80028ee:	4610      	mov	r0, r2
 80028f0:	4798      	blx	r3
 80028f2:	e000      	b.n	80028f6 <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    else
    {
      break;
 80028f4:	e009      	b.n	800290a <SYSTIMER_lTimerHandler+0xbe>
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
 80028f6:	4b06      	ldr	r3, [pc, #24]	; (8002910 <SYSTIMER_lTimerHandler+0xc4>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	607b      	str	r3, [r7, #4]
static void SYSTIMER_lTimerHandler(void)
{
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <SYSTIMER_lTimerHandler+0xbe>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d0a7      	beq.n	800285a <SYSTIMER_lTimerHandler+0xe>
      break;
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
  }
}
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	200001d8 	.word	0x200001d8
 8002914:	200001dc 	.word	0x200001dc

08002918 <SysTick_Handler>:

/*
 *  SysTick Event Handler.
 */
void SysTick_Handler(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = g_timer_list;
 800291e:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <SysTick_Handler+0x40>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	607b      	str	r3, [r7, #4]
  g_systick_count++;
 8002924:	4b0d      	ldr	r3, [pc, #52]	; (800295c <SysTick_Handler+0x44>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	3301      	adds	r3, #1
 800292a:	4a0c      	ldr	r2, [pc, #48]	; (800295c <SysTick_Handler+0x44>)
 800292c:	6013      	str	r3, [r2, #0]

  if (NULL != object_ptr)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00e      	beq.n	8002952 <SysTick_Handler+0x3a>
  {
    if (object_ptr->count > 1UL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d905      	bls.n	8002948 <SysTick_Handler+0x30>
    {
      object_ptr->count--;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	1e5a      	subs	r2, r3, #1
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	619a      	str	r2, [r3, #24]
 8002946:	e004      	b.n	8002952 <SysTick_Handler+0x3a>
    }
    else
    {
      object_ptr->count = 0U;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	619a      	str	r2, [r3, #24]
      SYSTIMER_lTimerHandler();
 800294e:	f7ff ff7d 	bl	800284c <SYSTIMER_lTimerHandler>
    }
  }
}
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	200001d8 	.word	0x200001d8
 800295c:	200001e0 	.word	0x200001e0

08002960 <SYSTIMER_Init>:

/*
 * Initialization function which initializes the SYSTIMER APP, configures SysTick timer and SysTick exception.
 */
SYSTIMER_STATUS_t SYSTIMER_Init(SYSTIMER_t *handle)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status = SYSTIMER_STATUS_SUCCESS;
 8002968:	2300      	movs	r3, #0
 800296a:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_Init: SYSTIMER APP handle pointer uninitialized", (handle != NULL));

  /* Check APP initialization status to ensure whether SYSTIMER_Init called or not, initialize SYSTIMER if
   * SYSTIMER_Init called first time.
   */
  if (false == handle->init_status)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	f083 0301 	eor.w	r3, r3, #1
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d020      	beq.n	80029bc <SYSTIMER_Init+0x5c>
  {
    /* Initialize the header of the list */
    g_timer_list = NULL;
 800297a:	4b13      	ldr	r3, [pc, #76]	; (80029c8 <SYSTIMER_Init+0x68>)
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
    /* Initialize SysTick timer */
    status = (SYSTIMER_STATUS_t)SysTick_Config((uint32_t)(SYSTIMER_SYSTICK_CLOCK * SYSTIMER_TICK_PERIOD));
 8002980:	4812      	ldr	r0, [pc, #72]	; (80029cc <SYSTIMER_Init+0x6c>)
 8002982:	f7ff fdff 	bl	8002584 <SysTick_Config>
 8002986:	4603      	mov	r3, r0
 8002988:	73fb      	strb	r3, [r7, #15]

    if (SYSTIMER_STATUS_FAILURE == status)
 800298a:	7bfb      	ldrb	r3, [r7, #15]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d015      	beq.n	80029bc <SYSTIMER_Init+0x5c>
    }
    else
    {
#if (UC_FAMILY == XMC4)
      /* setting of First SW Timer period is always and subpriority value for XMC4000 devices */
      NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(
 8002990:	f7ff fd8c 	bl	80024ac <NVIC_GetPriorityGrouping>
 8002994:	4603      	mov	r3, r0
 8002996:	4618      	mov	r0, r3
 8002998:	213f      	movs	r1, #63	; 0x3f
 800299a:	2200      	movs	r2, #0
 800299c:	f7ff fdbe 	bl	800251c <NVIC_EncodePriority>
 80029a0:	4603      	mov	r3, r0
 80029a2:	f04f 30ff 	mov.w	r0, #4294967295
 80029a6:	4619      	mov	r1, r3
 80029a8:	f7ff fd8e 	bl	80024c8 <NVIC_SetPriority>
      NVIC_GetPriorityGrouping(), SYSTIMER_PRIORITY, SYSTIMER_SUBPRIORITY));
#elif (UC_FAMILY == XMC1)
      /* setting of priority value for XMC1000 devices */
      NVIC_SetPriority(SysTick_IRQn, SYSTIMER_PRIORITY);
#endif      
      g_timer_tracker = 0U;
 80029ac:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <SYSTIMER_Init+0x70>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
      /* Update the Initialization status of the SYSTIMER APP instance */
      handle->init_status = true;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	701a      	strb	r2, [r3, #0]
      status = SYSTIMER_STATUS_SUCCESS;
 80029b8:	2300      	movs	r3, #0
 80029ba:	73fb      	strb	r3, [r7, #15]
    }
  }

  return (status);
 80029bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	200001d8 	.word	0x200001d8
 80029cc:	0001d4c0 	.word	0x0001d4c0
 80029d0:	200001dc 	.word	0x200001dc

080029d4 <SYSTIMER_CreateTimer>:
  uint32_t period,
  SYSTIMER_MODE_t mode,
  SYSTIMER_CALLBACK_t callback,
  void  *args
)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b089      	sub	sp, #36	; 0x24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	607a      	str	r2, [r7, #4]
 80029de:	603b      	str	r3, [r7, #0]
 80029e0:	460b      	mov	r3, r1
 80029e2:	72fb      	strb	r3, [r7, #11]
  uint32_t id = 0U;
 80029e4:	2300      	movs	r3, #0
 80029e6:	61fb      	str	r3, [r7, #28]
  uint32_t count = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	61bb      	str	r3, [r7, #24]
  uint32_t period_ratio = 0U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	617b      	str	r3, [r7, #20]
            ((period >= SYSTIMER_TICK_PERIOD_US) && (period > 0U) && (period <= 0xFFFFFFFFU)));
  XMC_ASSERT("SYSTIMER_CreateTimer: Timer creation failure due to invalid timer mode",
            ((SYSTIMER_MODE_ONE_SHOT == mode) || (SYSTIMER_MODE_PERIODIC == mode)));
  XMC_ASSERT("SYSTIMER_CreateTimer: Can not create software without user callback", (NULL != callback));
  
  if (period < SYSTIMER_TICK_PERIOD_US)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029f6:	d202      	bcs.n	80029fe <SYSTIMER_CreateTimer+0x2a>
  {
    id = 0U;
 80029f8:	2300      	movs	r3, #0
 80029fa:	61fb      	str	r3, [r7, #28]
 80029fc:	e07b      	b.n	8002af6 <SYSTIMER_CreateTimer+0x122>
  }
  else
  {
    for (count = 0U; count < SYSTIMER_CFG_MAX_TMR; count++)
 80029fe:	2300      	movs	r3, #0
 8002a00:	61bb      	str	r3, [r7, #24]
 8002a02:	e075      	b.n	8002af0 <SYSTIMER_CreateTimer+0x11c>
    {
      /* Check for free timer ID */
      if (0U == (g_timer_tracker & (1U << count)))
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	2201      	movs	r2, #1
 8002a08:	409a      	lsls	r2, r3
 8002a0a:	4b3e      	ldr	r3, [pc, #248]	; (8002b04 <SYSTIMER_CreateTimer+0x130>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d16a      	bne.n	8002aea <SYSTIMER_CreateTimer+0x116>
      {
        /* If yes, assign ID to this timer */
        g_timer_tracker |= (1U << count);
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	2201      	movs	r2, #1
 8002a18:	409a      	lsls	r2, r3
 8002a1a:	4b3a      	ldr	r3, [pc, #232]	; (8002b04 <SYSTIMER_CreateTimer+0x130>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	4a38      	ldr	r2, [pc, #224]	; (8002b04 <SYSTIMER_CreateTimer+0x130>)
 8002a22:	6013      	str	r3, [r2, #0]
        /* Initialize the timer as per input values */
        g_timer_tbl[count].id     = count;
 8002a24:	4938      	ldr	r1, [pc, #224]	; (8002b08 <SYSTIMER_CreateTimer+0x134>)
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	4413      	add	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	440b      	add	r3, r1
 8002a32:	3310      	adds	r3, #16
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].mode   = mode;
 8002a38:	4933      	ldr	r1, [pc, #204]	; (8002b08 <SYSTIMER_CreateTimer+0x134>)
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	4413      	add	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	3308      	adds	r3, #8
 8002a48:	7afa      	ldrb	r2, [r7, #11]
 8002a4a:	711a      	strb	r2, [r3, #4]
        g_timer_tbl[count].state  = SYSTIMER_STATE_STOPPED;
 8002a4c:	492e      	ldr	r1, [pc, #184]	; (8002b08 <SYSTIMER_CreateTimer+0x134>)
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4613      	mov	r3, r2
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	4413      	add	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	440b      	add	r3, r1
 8002a5a:	3308      	adds	r3, #8
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	715a      	strb	r2, [r3, #5]
        period_ratio = (uint32_t)(period / SYSTIMER_TICK_PERIOD_US);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4a2a      	ldr	r2, [pc, #168]	; (8002b0c <SYSTIMER_CreateTimer+0x138>)
 8002a64:	fba2 2303 	umull	r2, r3, r2, r3
 8002a68:	099b      	lsrs	r3, r3, #6
 8002a6a:	617b      	str	r3, [r7, #20]
        g_timer_tbl[count].count  = (period_ratio + HW_TIMER_ADDITIONAL_CNT);
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	1c59      	adds	r1, r3, #1
 8002a70:	4825      	ldr	r0, [pc, #148]	; (8002b08 <SYSTIMER_CreateTimer+0x134>)
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4613      	mov	r3, r2
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	4413      	add	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4403      	add	r3, r0
 8002a7e:	3318      	adds	r3, #24
 8002a80:	6019      	str	r1, [r3, #0]
        g_timer_tbl[count].reload  = period_ratio;
 8002a82:	4921      	ldr	r1, [pc, #132]	; (8002b08 <SYSTIMER_CreateTimer+0x134>)
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	4613      	mov	r3, r2
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	4413      	add	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	440b      	add	r3, r1
 8002a90:	3318      	adds	r3, #24
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].callback = callback;
 8002a96:	491c      	ldr	r1, [pc, #112]	; (8002b08 <SYSTIMER_CreateTimer+0x134>)
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	4413      	add	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	440b      	add	r3, r1
 8002aa4:	3308      	adds	r3, #8
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	601a      	str	r2, [r3, #0]
        g_timer_tbl[count].args = args;
 8002aaa:	4917      	ldr	r1, [pc, #92]	; (8002b08 <SYSTIMER_CreateTimer+0x134>)
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	440b      	add	r3, r1
 8002ab8:	3310      	adds	r3, #16
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	601a      	str	r2, [r3, #0]
        g_timer_tbl[count].prev   = NULL;
 8002abe:	4912      	ldr	r1, [pc, #72]	; (8002b08 <SYSTIMER_CreateTimer+0x134>)
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	440b      	add	r3, r1
 8002acc:	2200      	movs	r2, #0
 8002ace:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].next   = NULL;
 8002ad0:	490d      	ldr	r1, [pc, #52]	; (8002b08 <SYSTIMER_CreateTimer+0x134>)
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	4413      	add	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]
        id = count + 1U;
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	61fb      	str	r3, [r7, #28]
        break;
 8002ae8:	e005      	b.n	8002af6 <SYSTIMER_CreateTimer+0x122>
  {
    id = 0U;
  }
  else
  {
    for (count = 0U; count < SYSTIMER_CFG_MAX_TMR; count++)
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	3301      	adds	r3, #1
 8002aee:	61bb      	str	r3, [r7, #24]
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	2b0f      	cmp	r3, #15
 8002af4:	d986      	bls.n	8002a04 <SYSTIMER_CreateTimer+0x30>
      }
    }

  }

  return (id);
 8002af6:	69fb      	ldr	r3, [r7, #28]
}  
 8002af8:	4618      	mov	r0, r3
 8002afa:	3724      	adds	r7, #36	; 0x24
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	200001dc 	.word	0x200001dc
 8002b08:	20000288 	.word	0x20000288
 8002b0c:	10624dd3 	.word	0x10624dd3

08002b10 <SYSTIMER_StartTimer>:

/*
 *  API to start the software timer.
 */
SYSTIMER_STATUS_t SYSTIMER_StartTimer(uint32_t id)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status;
  status = SYSTIMER_STATUS_FAILURE;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_StartTimer: Failure in timer restart operation due to invalid timer ID",
            ((id <= SYSTIMER_CFG_MAX_TMR) && (id > 0U)));
  XMC_ASSERT("SYSTIMER_StartTimer: Error during start of software timer", (0U != (g_timer_tracker & (1U << (id - 1U)))));
  
  /* Check if timer is running */
  if (SYSTIMER_STATE_STOPPED == g_timer_tbl[id - 1U].state)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	1e5a      	subs	r2, r3, #1
 8002b20:	491a      	ldr	r1, [pc, #104]	; (8002b8c <SYSTIMER_StartTimer+0x7c>)
 8002b22:	4613      	mov	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	4413      	add	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	440b      	add	r3, r1
 8002b2c:	3308      	adds	r3, #8
 8002b2e:	795b      	ldrb	r3, [r3, #5]
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d126      	bne.n	8002b82 <SYSTIMER_StartTimer+0x72>
  {
    g_timer_tbl[id - 1U].count = (g_timer_tbl[id - 1U].reload + HW_TIMER_ADDITIONAL_CNT);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	1e5a      	subs	r2, r3, #1
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	1e59      	subs	r1, r3, #1
 8002b3c:	4813      	ldr	r0, [pc, #76]	; (8002b8c <SYSTIMER_StartTimer+0x7c>)
 8002b3e:	460b      	mov	r3, r1
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	440b      	add	r3, r1
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4403      	add	r3, r0
 8002b48:	3318      	adds	r3, #24
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	1c59      	adds	r1, r3, #1
 8002b4e:	480f      	ldr	r0, [pc, #60]	; (8002b8c <SYSTIMER_StartTimer+0x7c>)
 8002b50:	4613      	mov	r3, r2
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	4413      	add	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4403      	add	r3, r0
 8002b5a:	3318      	adds	r3, #24
 8002b5c:	6019      	str	r1, [r3, #0]
    /* set timer status as SYSTIMER_STATE_RUNNING */
    g_timer_tbl[id - 1U].state = SYSTIMER_STATE_RUNNING;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	1e5a      	subs	r2, r3, #1
 8002b62:	490a      	ldr	r1, [pc, #40]	; (8002b8c <SYSTIMER_StartTimer+0x7c>)
 8002b64:	4613      	mov	r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	4413      	add	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	3308      	adds	r3, #8
 8002b70:	2201      	movs	r2, #1
 8002b72:	715a      	strb	r2, [r3, #5]
    /* Insert this timer into timer list */
    SYSTIMER_lInsertTimerList((id - 1U));
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3b01      	subs	r3, #1
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff fd25 	bl	80025c8 <SYSTIMER_lInsertTimerList>
    status = SYSTIMER_STATUS_SUCCESS;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8002b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	20000288 	.word	0x20000288

08002b90 <SYSTIMER_StopTimer>:

/*
 *  API to stop the software timer.
 */
SYSTIMER_STATUS_t SYSTIMER_StopTimer(uint32_t id)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status;
  status = SYSTIMER_STATUS_SUCCESS;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("SYSTIMER_StopTimer: Failure in timer restart operation due to invalid timer ID",
            ((id <= SYSTIMER_CFG_MAX_TMR) && (id > 0U)));
  XMC_ASSERT("SYSTIMER_StopTimer: Error during stop of software timer", (0U != (g_timer_tracker & (1U << (id - 1U)))));

  if (SYSTIMER_STATE_NOT_INITIALIZED == g_timer_tbl[id - 1U].state)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	1e5a      	subs	r2, r3, #1
 8002ba0:	4916      	ldr	r1, [pc, #88]	; (8002bfc <SYSTIMER_StopTimer+0x6c>)
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	4413      	add	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	440b      	add	r3, r1
 8002bac:	3308      	adds	r3, #8
 8002bae:	795b      	ldrb	r3, [r3, #5]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d102      	bne.n	8002bba <SYSTIMER_StopTimer+0x2a>
  {
    status = SYSTIMER_STATUS_FAILURE;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	73fb      	strb	r3, [r7, #15]
 8002bb8:	e01b      	b.n	8002bf2 <SYSTIMER_StopTimer+0x62>
  }
  else
  {
    /* Check whether Timer is in Stop state */
    if (SYSTIMER_STATE_RUNNING == g_timer_tbl[id - 1U].state)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	1e5a      	subs	r2, r3, #1
 8002bbe:	490f      	ldr	r1, [pc, #60]	; (8002bfc <SYSTIMER_StopTimer+0x6c>)
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	3308      	adds	r3, #8
 8002bcc:	795b      	ldrb	r3, [r3, #5]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d10f      	bne.n	8002bf2 <SYSTIMER_StopTimer+0x62>
    {
        /* Set timer status as SYSTIMER_STATE_STOPPED */
        g_timer_tbl[id - 1U].state = SYSTIMER_STATE_STOPPED;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	1e5a      	subs	r2, r3, #1
 8002bd6:	4909      	ldr	r1, [pc, #36]	; (8002bfc <SYSTIMER_StopTimer+0x6c>)
 8002bd8:	4613      	mov	r3, r2
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	4413      	add	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	3308      	adds	r3, #8
 8002be4:	2202      	movs	r2, #2
 8002be6:	715a      	strb	r2, [r3, #5]

        /* remove Timer from node list */
        SYSTIMER_lRemoveTimerList(id - 1U);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff fdcd 	bl	800278c <SYSTIMER_lRemoveTimerList>

    }
  }

  return (status);
 8002bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	20000288 	.word	0x20000288

08002c00 <SYSTIMER_StartTimerFromISR>:

  return (id);
}

SYSTIMER_STATUS_t SYSTIMER_StartTimerFromISR(uint32_t id)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b088      	sub	sp, #32
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002c08:	f3ef 8310 	mrs	r3, PRIMASK
 8002c0c:	617b      	str	r3, [r7, #20]
  return(result);
 8002c0e:	697b      	ldr	r3, [r7, #20]
}

__attribute__((always_inline)) __STATIC_INLINE uint32_t critical_section_enter(void)
{
  uint32_t status;
  status = __get_PRIMASK();
 8002c10:	613b      	str	r3, [r7, #16]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c12:	b672      	cpsid	i
  __disable_irq ();
  return status;
 8002c14:	693b      	ldr	r3, [r7, #16]
SYSTIMER_STATUS_t SYSTIMER_StartTimerFromISR(uint32_t id)
{
  SYSTIMER_STATUS_t status;

  uint32_t ics;
  ics = critical_section_enter();
 8002c16:	61fb      	str	r3, [r7, #28]

  status = SYSTIMER_StartTimer(id);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f7ff ff79 	bl	8002b10 <SYSTIMER_StartTimer>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	76fb      	strb	r3, [r7, #27]
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	60bb      	str	r3, [r7, #8]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	f383 8810 	msr	PRIMASK, r3

  critical_section_exit(ics);

  return (status);
 8002c30:	7efb      	ldrb	r3, [r7, #27]
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3720      	adds	r7, #32
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop

08002c3c <SYSTIMER_StopTimerFromISR>:

SYSTIMER_STATUS_t SYSTIMER_StopTimerFromISR(uint32_t id)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b088      	sub	sp, #32
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002c44:	f3ef 8310 	mrs	r3, PRIMASK
 8002c48:	617b      	str	r3, [r7, #20]
  return(result);
 8002c4a:	697b      	ldr	r3, [r7, #20]
}

__attribute__((always_inline)) __STATIC_INLINE uint32_t critical_section_enter(void)
{
  uint32_t status;
  status = __get_PRIMASK();
 8002c4c:	613b      	str	r3, [r7, #16]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c4e:	b672      	cpsid	i
  __disable_irq ();
  return status;
 8002c50:	693b      	ldr	r3, [r7, #16]
SYSTIMER_STATUS_t SYSTIMER_StopTimerFromISR(uint32_t id)
{
  SYSTIMER_STATUS_t status;

  uint32_t ics;
  ics = critical_section_enter();
 8002c52:	61fb      	str	r3, [r7, #28]

  status = SYSTIMER_StopTimer(id);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7ff ff9b 	bl	8002b90 <SYSTIMER_StopTimer>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	76fb      	strb	r3, [r7, #27]
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	60bb      	str	r3, [r7, #8]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	f383 8810 	msr	PRIMASK, r3

  critical_section_exit(ics);

  return (status);
 8002c6c:	7efb      	ldrb	r3, [r7, #27]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3720      	adds	r7, #32
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop

08002c78 <GLOBAL_SCU_XMC4_EnableEvent>:
 * @brief Enable a specific event
 *
 * @param event Events to be enabled. See GLOBAL_SCU_XMC4_EVENT_t.
 */
__STATIC_INLINE void GLOBAL_SCU_XMC4_EnableEvent(const GLOBAL_SCU_XMC4_EVENT_t event)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  XMC_SCU_INTERRUPT_EnableEvent(event);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7fd ff0f 	bl	8000aa4 <XMC_SCU_INTERRUPT_EnableEvent>
}
 8002c86:	3708      	adds	r7, #8
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <RTC_Start>:
 *   {}
 * }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void RTC_Start(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
	XMC_RTC_Start();
 8002c90:	f7fe fe96 	bl	80019c0 <XMC_RTC_Start>
}
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop

08002c98 <RTC_Init>:
/*
  Initialization function for the APP. Configures the registers
  based on options selected in UI.
*/
RTC_STATUS_t RTC_Init(RTC_t *const handler)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  RTC_STATUS_t rtc_initstatus;
  bool interrupt_configured;

  XMC_ASSERT("RTC_Init: NULL Handler", handler != NULL);

  status = XMC_RTC_STATUS_OK;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	73fb      	strb	r3, [r7, #15]
  rtc_initstatus = RTC_STATUS_FAILURE;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	73bb      	strb	r3, [r7, #14]

#if (RTC_INTERRUPT_ENABLED == 1)
#if (UC_FAMILY == XMC4)
  rtc_initstatus = (RTC_STATUS_t)GLOBAL_SCU_XMC4_Init(GLOBAL_SCU_HANDLE);
 8002ca8:	481f      	ldr	r0, [pc, #124]	; (8002d28 <RTC_Init+0x90>)
 8002caa:	f001 fb39 	bl	8004320 <GLOBAL_SCU_XMC4_Init>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	73bb      	strb	r3, [r7, #14]

  if (rtc_initstatus == RTC_STATUS_SUCCESS)
 8002cb2:	7bbb      	ldrb	r3, [r7, #14]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d132      	bne.n	8002d1e <RTC_Init+0x86>

    if (rtc_initstatus == RTC_STATUS_SUCCESS)
    {
#endif
#endif
      if (handler->initialized == false)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	7a1b      	ldrb	r3, [r3, #8]
 8002cbc:	f083 0301 	eor.w	r3, r3, #1
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d029      	beq.n	8002d1a <RTC_Init+0x82>
      {
        /* Initialize the clock source and pre-scalar */
        status = XMC_RTC_Init((XMC_RTC_CONFIG_t *)(handler->time_alarm_config));
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fd fe52 	bl	8000974 <XMC_RTC_Init>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	73fb      	strb	r3, [r7, #15]

        if (status == XMC_RTC_STATUS_OK)
 8002cd4:	7bfb      	ldrb	r3, [r7, #15]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d11c      	bne.n	8002d14 <RTC_Init+0x7c>
        {
          /* Configure periodic, alarm and hibernate periodic interrupts */
          interrupt_configured = RTC_lConfigureInterrupts(handler);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f826 	bl	8002d2c <RTC_lConfigureInterrupts>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	737b      	strb	r3, [r7, #13]

          if (interrupt_configured == true)
 8002ce4:	7b7b      	ldrb	r3, [r7, #13]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d004      	beq.n	8002cf4 <RTC_Init+0x5c>
          {
            status = RTC_lRegister_Callbacks(handler);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f860 	bl	8002db0 <RTC_lRegister_Callbacks>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	73fb      	strb	r3, [r7, #15]
          }

          if (status == XMC_RTC_STATUS_OK)
 8002cf4:	7bfb      	ldrb	r3, [r7, #15]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d111      	bne.n	8002d1e <RTC_Init+0x86>
          {
            /* Check RTC start during init is set or not in UI */
            if (handler->config->start == RTC_START_ENABLE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d101      	bne.n	8002d08 <RTC_Init+0x70>
            {
              RTC_Start();
 8002d04:	f7ff ffc2 	bl	8002c8c <RTC_Start>
            }
            handler->initialized = true;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	721a      	strb	r2, [r3, #8]
            rtc_initstatus = RTC_STATUS_SUCCESS;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	73bb      	strb	r3, [r7, #14]
 8002d12:	e004      	b.n	8002d1e <RTC_Init+0x86>
          }
        }
        else
        {
          rtc_initstatus = RTC_STATUS_FAILURE;
 8002d14:	2301      	movs	r3, #1
 8002d16:	73bb      	strb	r3, [r7, #14]
 8002d18:	e001      	b.n	8002d1e <RTC_Init+0x86>
        }
      }
      else
      {
        rtc_initstatus = RTC_STATUS_SUCCESS;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	73bb      	strb	r3, [r7, #14]
      }
#if (RTC_INTERRUPT_ENABLED == 1)
   } /* end of if(rtc_initstatus == GLOBAL_SCU_XMC4_STATUS_OK) */
#endif

  return (rtc_initstatus);
 8002d1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	20000088 	.word	0x20000088

08002d2c <RTC_lConfigureInterrupts>:
/*
 *  This function configures periodic and alarm interrupts
 */
bool RTC_lConfigureInterrupts(RTC_t *const handler)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  bool interrupt_configured = false;
 8002d34:	2300      	movs	r3, #0
 8002d36:	73fb      	strb	r3, [r7, #15]

  /* Enable periodic seconds, minutes, hours days, months and years interrupts */
  regval = (((uint32_t)handler->config->periodic_sec_intr << RTC_MSKSR_MPSE_Pos)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	789b      	ldrb	r3, [r3, #2]
 8002d3e:	461a      	mov	r2, r3
           | ((uint32_t)handler->config->periodic_min_intr << RTC_MSKSR_MPMI_Pos)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	78db      	ldrb	r3, [r3, #3]
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	431a      	orrs	r2, r3
           | ((uint32_t)handler->config->periodic_hour_intr << RTC_MSKSR_MPHO_Pos)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	791b      	ldrb	r3, [r3, #4]
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	431a      	orrs	r2, r3
           | ((uint32_t)handler->config->periodic_day_intr << RTC_MSKSR_MPDA_Pos)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	795b      	ldrb	r3, [r3, #5]
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	431a      	orrs	r2, r3
           | ((uint32_t)handler->config->periodic_month_intr << RTC_MSKSR_MPMO_Pos)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	799b      	ldrb	r3, [r3, #6]
 8002d64:	015b      	lsls	r3, r3, #5
 8002d66:	431a      	orrs	r2, r3
           | ((uint32_t)handler->config->periodic_year_intr << RTC_MSKSR_MPYE_Pos));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	79db      	ldrb	r3, [r3, #7]
 8002d6e:	019b      	lsls	r3, r3, #6
{
  uint32_t regval;
  bool interrupt_configured = false;

  /* Enable periodic seconds, minutes, hours days, months and years interrupts */
  regval = (((uint32_t)handler->config->periodic_sec_intr << RTC_MSKSR_MPSE_Pos)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	60bb      	str	r3, [r7, #8]
           | ((uint32_t)handler->config->periodic_month_intr << RTC_MSKSR_MPMO_Pos)
           | ((uint32_t)handler->config->periodic_year_intr << RTC_MSKSR_MPYE_Pos));

  /* Enable RTC periodic interrupt in SCU when any of the periodic interrupts
   * are enabled */
  if (regval != 0U)
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d007      	beq.n	8002d8a <RTC_lConfigureInterrupts+0x5e>
  {
    XMC_RTC_EnableEvent(regval);
 8002d7a:	68b8      	ldr	r0, [r7, #8]
 8002d7c:	f7fd fe4c 	bl	8000a18 <XMC_RTC_EnableEvent>
    #if ((UC_FAMILY == XMC4) && (RTC_INTERRUPT_ENABLED == 1))
      GLOBAL_SCU_XMC4_EnableEvent(GLOBAL_SCU_XMC4_EVENT_RTC_PERIODIC);
 8002d80:	2002      	movs	r0, #2
 8002d82:	f7ff ff79 	bl	8002c78 <GLOBAL_SCU_XMC4_EnableEvent>
    #endif
    interrupt_configured = true;
 8002d86:	2301      	movs	r3, #1
 8002d88:	73fb      	strb	r3, [r7, #15]
  }

    #ifdef RTC_EVENT_TRIG_TO_SCU
      if (handler->config->alarm_intr == RTC_INT_ALARM_ENABLE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	7a1b      	ldrb	r3, [r3, #8]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d108      	bne.n	8002da6 <RTC_lConfigureInterrupts+0x7a>
      {
        XMC_RTC_EnableEvent(XMC_RTC_EVENT_ALARM);
 8002d94:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002d98:	f7fd fe3e 	bl	8000a18 <XMC_RTC_EnableEvent>
        #if ((UC_FAMILY == XMC4) && (RTC_INTERRUPT_ENABLED == 1))
          GLOBAL_SCU_XMC4_EnableEvent(GLOBAL_SCU_XMC4_EVENT_RTC_ALARM);
 8002d9c:	2004      	movs	r0, #4
 8002d9e:	f7ff ff6b 	bl	8002c78 <GLOBAL_SCU_XMC4_EnableEvent>
        #endif
        interrupt_configured = true;
 8002da2:	2301      	movs	r3, #1
 8002da4:	73fb      	strb	r3, [r7, #15]
      }
    #endif

  return (interrupt_configured);
 8002da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <RTC_lRegister_Callbacks>:

/*
 *  Interface to register the RTC call backs
 */
XMC_RTC_STATUS_t RTC_lRegister_Callbacks(RTC_t *const handler)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  XMC_RTC_STATUS_t pi_status;
  XMC_RTC_STATUS_t ai_status;

  pi_status = XMC_RTC_STATUS_OK;
 8002db8:	2300      	movs	r3, #0
 8002dba:	73bb      	strb	r3, [r7, #14]
  ai_status = XMC_RTC_STATUS_OK;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	73fb      	strb	r3, [r7, #15]

#if (RTC_INTERRUPT_ENABLED == 1)
  #if (UC_FAMILY == XMC4)
    pi_status = (XMC_RTC_STATUS_t)GLOBAL_SCU_XMC4_RegisterCallback(GLOBAL_SCU_XMC4_EVENT_RTC_PERIODIC,
                                                                   handler->config->pi_listener);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
  pi_status = XMC_RTC_STATUS_OK;
  ai_status = XMC_RTC_STATUS_OK;

#if (RTC_INTERRUPT_ENABLED == 1)
  #if (UC_FAMILY == XMC4)
    pi_status = (XMC_RTC_STATUS_t)GLOBAL_SCU_XMC4_RegisterCallback(GLOBAL_SCU_XMC4_EVENT_RTC_PERIODIC,
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	2002      	movs	r0, #2
 8002dc8:	4619      	mov	r1, r3
 8002dca:	f001 fae5 	bl	8004398 <GLOBAL_SCU_XMC4_RegisterCallback>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	73bb      	strb	r3, [r7, #14]
                                                                   handler->config->pi_listener);
    if (handler->config->alarm_intr == RTC_INT_ALARM_ENABLE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	7a1b      	ldrb	r3, [r3, #8]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d108      	bne.n	8002dee <RTC_lRegister_Callbacks+0x3e>
    {
      ai_status = (XMC_RTC_STATUS_t)GLOBAL_SCU_XMC4_RegisterCallback(GLOBAL_SCU_XMC4_EVENT_RTC_ALARM,
                                                                     handler->config->ai_listener);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
  #if (UC_FAMILY == XMC4)
    pi_status = (XMC_RTC_STATUS_t)GLOBAL_SCU_XMC4_RegisterCallback(GLOBAL_SCU_XMC4_EVENT_RTC_PERIODIC,
                                                                   handler->config->pi_listener);
    if (handler->config->alarm_intr == RTC_INT_ALARM_ENABLE)
    {
      ai_status = (XMC_RTC_STATUS_t)GLOBAL_SCU_XMC4_RegisterCallback(GLOBAL_SCU_XMC4_EVENT_RTC_ALARM,
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	2004      	movs	r0, #4
 8002de4:	4619      	mov	r1, r3
 8002de6:	f001 fad7 	bl	8004398 <GLOBAL_SCU_XMC4_RegisterCallback>
 8002dea:	4603      	mov	r3, r0
 8002dec:	73fb      	strb	r3, [r7, #15]
                                                                     handler->config->ai_listener);
    }
  #endif
#endif

  return (XMC_RTC_STATUS_t)(pi_status & ai_status);
 8002dee:	7bba      	ldrb	r2, [r7, #14]
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
 8002df2:	4013      	ands	r3, r2
 8002df4:	b2db      	uxtb	r3, r3
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop

08002e00 <RTC_SetTime>:

/*
 *  This function is used to set RTC time.
 */
RTC_STATUS_t RTC_SetTime(XMC_RTC_TIME_t *current_time)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  RTC_STATUS_t status = RTC_STATUS_SUCCESS;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	75fb      	strb	r3, [r7, #23]
  XMC_RTC_TIME_t time_val;

  XMC_ASSERT("RTC_SetTime: NULL pointer", current_time != NULL);

  /* copy to local structure to keep data safe */
  time_val.year = current_time->year;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	88db      	ldrh	r3, [r3, #6]
 8002e10:	827b      	strh	r3, [r7, #18]
  time_val.month = current_time->month;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	795b      	ldrb	r3, [r3, #5]
 8002e16:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	7c7b      	ldrb	r3, [r7, #17]
 8002e1e:	f362 0303 	bfi	r3, r2, #0, #4
 8002e22:	747b      	strb	r3, [r7, #17]
  time_val.days = current_time->days;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	78db      	ldrb	r3, [r3, #3]
 8002e28:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
 8002e30:	f362 0304 	bfi	r3, r2, #0, #5
 8002e34:	73fb      	strb	r3, [r7, #15]
  time_val.hours = current_time->hours;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	789b      	ldrb	r3, [r3, #2]
 8002e3a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002e3e:	b2da      	uxtb	r2, r3
 8002e40:	7bbb      	ldrb	r3, [r7, #14]
 8002e42:	f362 0304 	bfi	r3, r2, #0, #5
 8002e46:	73bb      	strb	r3, [r7, #14]
  time_val.minutes = current_time->minutes;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	785b      	ldrb	r3, [r3, #1]
 8002e4c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	7b7b      	ldrb	r3, [r7, #13]
 8002e54:	f362 0305 	bfi	r3, r2, #0, #6
 8002e58:	737b      	strb	r3, [r7, #13]
  time_val.seconds = current_time->seconds;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8002e62:	b2da      	uxtb	r2, r3
 8002e64:	7b3b      	ldrb	r3, [r7, #12]
 8002e66:	f362 0305 	bfi	r3, r2, #0, #6
 8002e6a:	733b      	strb	r3, [r7, #12]

  if ((time_val.days != 0U) && (time_val.month != 0U))
 8002e6c:	7bfb      	ldrb	r3, [r7, #15]
 8002e6e:	f003 031f 	and.w	r3, r3, #31
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d025      	beq.n	8002ec4 <RTC_SetTime+0xc4>
 8002e78:	7c7b      	ldrb	r3, [r7, #17]
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d01f      	beq.n	8002ec4 <RTC_SetTime+0xc4>
  {
    time_val.days = time_val.days - 1U;
 8002e84:	7bfb      	ldrb	r3, [r7, #15]
 8002e86:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	f003 031f 	and.w	r3, r3, #31
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	7bfb      	ldrb	r3, [r7, #15]
 8002e98:	f362 0304 	bfi	r3, r2, #0, #5
 8002e9c:	73fb      	strb	r3, [r7, #15]
    time_val.month = time_val.month - 1U;
 8002e9e:	7c7b      	ldrb	r3, [r7, #17]
 8002ea0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	b2da      	uxtb	r2, r3
 8002eb0:	7c7b      	ldrb	r3, [r7, #17]
 8002eb2:	f362 0303 	bfi	r3, r2, #0, #4
 8002eb6:	747b      	strb	r3, [r7, #17]

    XMC_RTC_SetTime(&time_val);
 8002eb8:	f107 030c 	add.w	r3, r7, #12
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7fe fdc1 	bl	8001a44 <XMC_RTC_SetTime>
 8002ec2:	e001      	b.n	8002ec8 <RTC_SetTime+0xc8>
  }
  else
  {
    status = RTC_STATUS_FAILURE;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	75fb      	strb	r3, [r7, #23]
  }

  return (status);
 8002ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3718      	adds	r7, #24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop

08002ed4 <RTC_GetTime>:

/*
 *  This function is used to get RTC time.
 */
void RTC_GetTime(XMC_RTC_TIME_t *current_time)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("RTC_GetTime: NULL pointer", current_time != NULL);

  XMC_RTC_GetTime(current_time);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f7fe fdd3 	bl	8001a88 <XMC_RTC_GetTime>

  current_time->days = current_time->days + 1U;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	78db      	ldrb	r3, [r3, #3]
 8002ee6:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	3301      	adds	r3, #1
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	f003 031f 	and.w	r3, r3, #31
 8002ef4:	b2d9      	uxtb	r1, r3
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	78d3      	ldrb	r3, [r2, #3]
 8002efa:	f361 0304 	bfi	r3, r1, #0, #5
 8002efe:	70d3      	strb	r3, [r2, #3]
  current_time->month = current_time->month + 1U;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	795b      	ldrb	r3, [r3, #5]
 8002f04:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	f003 030f 	and.w	r3, r3, #15
 8002f12:	b2d9      	uxtb	r1, r3
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	7953      	ldrb	r3, [r2, #5]
 8002f18:	f361 0303 	bfi	r3, r1, #0, #4
 8002f1c:	7153      	strb	r3, [r2, #5]
}
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <NVIC_GetPriorityGrouping>:
  The function reads the priority grouping field from the NVIC Interrupt Controller.

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
 8002f28:	4b04      	ldr	r3, [pc, #16]	; (8002f3c <NVIC_GetPriorityGrouping+0x18>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f30:	0a1b      	lsrs	r3, r3, #8
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	e000ed00 	.word	0xe000ed00

08002f40 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8002f4a:	4908      	ldr	r1, [pc, #32]	; (8002f6c <NVIC_EnableIRQ+0x2c>)
 8002f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f50:	095b      	lsrs	r3, r3, #5
 8002f52:	79fa      	ldrb	r2, [r7, #7]
 8002f54:	f002 021f 	and.w	r2, r2, #31
 8002f58:	2001      	movs	r0, #1
 8002f5a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	e000e100 	.word	0xe000e100

08002f70 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	4603      	mov	r3, r0
 8002f78:	6039      	str	r1, [r7, #0]
 8002f7a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8002f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	da0b      	bge.n	8002f9c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002f84:	490d      	ldr	r1, [pc, #52]	; (8002fbc <NVIC_SetPriority+0x4c>)
 8002f86:	79fb      	ldrb	r3, [r7, #7]
 8002f88:	f003 030f 	and.w	r3, r3, #15
 8002f8c:	3b04      	subs	r3, #4
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	0092      	lsls	r2, r2, #2
 8002f94:	b2d2      	uxtb	r2, r2
 8002f96:	440b      	add	r3, r1
 8002f98:	761a      	strb	r2, [r3, #24]
 8002f9a:	e009      	b.n	8002fb0 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8002f9c:	4908      	ldr	r1, [pc, #32]	; (8002fc0 <NVIC_SetPriority+0x50>)
 8002f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	0092      	lsls	r2, r2, #2
 8002fa8:	b2d2      	uxtb	r2, r2
 8002faa:	440b      	add	r3, r1
 8002fac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	e000ed00 	.word	0xe000ed00
 8002fc0:	e000e100 	.word	0xe000e100

08002fc4 <NVIC_EncodePriority>:
    \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
    \param [in]       SubPriority  Subpriority value (starting from 0).
    \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b089      	sub	sp, #36	; 0x24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	f1c3 0307 	rsb	r3, r3, #7
 8002fde:	2b06      	cmp	r3, #6
 8002fe0:	bf28      	it	cs
 8002fe2:	2306      	movcs	r3, #6
 8002fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	3306      	adds	r3, #6
 8002fea:	2b06      	cmp	r3, #6
 8002fec:	d902      	bls.n	8002ff4 <NVIC_EncodePriority+0x30>
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	e000      	b.n	8002ff6 <NVIC_EncodePriority+0x32>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	3b01      	subs	r3, #1
 8003002:	461a      	mov	r2, r3
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	401a      	ands	r2, r3
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	409a      	lsls	r2, r3
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	2101      	movs	r1, #1
 8003010:	fa01 f303 	lsl.w	r3, r1, r3
 8003014:	3b01      	subs	r3, #1
 8003016:	4619      	mov	r1, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
 800301c:	4313      	orrs	r3, r2
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
         );
}
 800301e:	4618      	mov	r0, r3
 8003020:	3724      	adds	r7, #36	; 0x24
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop

0800302c <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	b25b      	sxtb	r3, r3
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff ff80 	bl	8002f40 <NVIC_EnableIRQ>
}
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop

08003048 <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 8003048:	b590      	push	{r4, r7, lr}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]

  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  status = (INTERRUPT_STATUS_t)CPU_CTRL_XMC4_Init(CPU_CTRL_HANDLE);
 8003050:	4816      	ldr	r0, [pc, #88]	; (80030ac <INTERRUPT_Init+0x64>)
 8003052:	f001 fa8d 	bl	8004570 <CPU_CTRL_XMC4_Init>
 8003056:	4603      	mov	r3, r0
 8003058:	73fb      	strb	r3, [r7, #15]

  if (status == INTERRUPT_STATUS_SUCCESS)
 800305a:	7bfb      	ldrb	r3, [r7, #15]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d11e      	bne.n	800309e <INTERRUPT_Init+0x56>
  {
    NVIC_SetPriority(handler->node,
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	781c      	ldrb	r4, [r3, #0]
 8003064:	f7ff ff5e 	bl	8002f24 <NVIC_GetPriorityGrouping>
 8003068:	4601      	mov	r1, r0
                     NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                         handler->priority,
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	785b      	ldrb	r3, [r3, #1]

  status = (INTERRUPT_STATUS_t)CPU_CTRL_XMC4_Init(CPU_CTRL_HANDLE);

  if (status == INTERRUPT_STATUS_SUCCESS)
  {
    NVIC_SetPriority(handler->node,
 800306e:	461a      	mov	r2, r3
                     NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                         handler->priority,
                                         handler->subpriority));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	789b      	ldrb	r3, [r3, #2]

  status = (INTERRUPT_STATUS_t)CPU_CTRL_XMC4_Init(CPU_CTRL_HANDLE);

  if (status == INTERRUPT_STATUS_SUCCESS)
  {
    NVIC_SetPriority(handler->node,
 8003074:	4608      	mov	r0, r1
 8003076:	4611      	mov	r1, r2
 8003078:	461a      	mov	r2, r3
 800307a:	f7ff ffa3 	bl	8002fc4 <NVIC_EncodePriority>
 800307e:	4602      	mov	r2, r0
 8003080:	b263      	sxtb	r3, r4
 8003082:	4618      	mov	r0, r3
 8003084:	4611      	mov	r1, r2
 8003086:	f7ff ff73 	bl	8002f70 <NVIC_SetPriority>
                     NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                         handler->priority,
                                         handler->subpriority));
    if (handler->enable_at_init == true)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	78db      	ldrb	r3, [r3, #3]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d002      	beq.n	8003098 <INTERRUPT_Init+0x50>
    {
      INTERRUPT_Enable(handler);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7ff ffca 	bl	800302c <INTERRUPT_Enable>
    }

    status = INTERRUPT_STATUS_SUCCESS;
 8003098:	2300      	movs	r3, #0
 800309a:	73fb      	strb	r3, [r7, #15]
 800309c:	e001      	b.n	80030a2 <INTERRUPT_Init+0x5a>
  }
  else
  {
    status = INTERRUPT_STATUS_FAILURE;
 800309e:	2301      	movs	r3, #1
 80030a0:	73fb      	strb	r3, [r7, #15]
  {
    status = INTERRUPT_STATUS_FAILURE;
  }
#endif

  return (status);
 80030a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3714      	adds	r7, #20
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd90      	pop	{r4, r7, pc}
 80030ac:	20000104 	.word	0x20000104

080030b0 <XMC_USIC_CH_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  channel->CCR |= event;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	431a      	orrs	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <XMC_USIC_CH_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~event;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	43db      	mvns	r3, r3
 80030e2:	401a      	ands	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop

080030f4 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003100:	b2db      	uxtb	r3, r3
 8003102:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003106:	b2db      	uxtb	r3, r3
}
 8003108:	4618      	mov	r0, r3
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <XMC_USIC_CH_TriggerServiceRequest>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t service_request_line)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  channel->FMR |= (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003128:	fa01 f303 	lsl.w	r3, r1, r3
 800312c:	431a      	orrs	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <XMC_USIC_CH_TXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  channel->TBCTR &= (uint32_t)~event;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	43db      	mvns	r3, r3
 8003150:	401a      	ands	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop

08003164 <XMC_USIC_CH_TXFIFO_Flush>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  channel->TRBSCR |= (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8003172:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop

08003188 <XMC_USIC_CH_TXFIFO_IsFull>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003196:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800319a:	2b00      	cmp	r3, #0
 800319c:	bf14      	ite	ne
 800319e:	2301      	movne	r3, #1
 80031a0:	2300      	moveq	r3, #0
 80031a2:	b2db      	uxtb	r3, r3
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <XMC_USIC_CH_TXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80031be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	bf14      	ite	ne
 80031c6:	2301      	movne	r3, #1
 80031c8:	2300      	moveq	r3, #0
 80031ca:	b2db      	uxtb	r3, r3
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	431a      	orrs	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <XMC_USIC_CH_RXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  channel->RBCTR &= (uint32_t)~event;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	43db      	mvns	r3, r3
 8003210:	401a      	ands	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop

08003224 <XMC_USIC_CH_RXFIFO_Flush>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  channel->TRBSCR |= (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8003232:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop

08003248 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003256:	f003 0308 	and.w	r3, r3, #8
 800325a:	2b00      	cmp	r3, #0
 800325c:	bf14      	ite	ne
 800325e:	2301      	movne	r3, #1
 8003260:	2300      	moveq	r3, #0
 8003262:	b2db      	uxtb	r3, r3
}
 8003264:	4618      	mov	r0, r3
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <XMC_I2C_CH_SetInterruptNodePointer>:
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_EnableEvent(), NVIC_SetPriority(), NVIC_EnableIRQ(), XMC_I2C_CH_SetInputSource()<br>
 */
__STATIC_INLINE void XMC_I2C_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                        const uint8_t service_request)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	460b      	mov	r3, r1
 800327a:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetInterruptNodePointer(channel, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL, service_request);
 800327c:	78fb      	ldrb	r3, [r7, #3]
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	2110      	movs	r1, #16
 8003282:	461a      	mov	r2, r3
 8003284:	f7fe fd44 	bl	8001d10 <XMC_USIC_CH_SetInterruptNodePointer>
}
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop

08003290 <XMC_I2C_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_ClearStatusFlag()\n\n
 */
__STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  return (channel->PSR_IICMode);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 800329c:	4618      	mov	r0, r3
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	431a      	orrs	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <I2C_MASTER_Init>:
  return (version);
}

/* Function to initialize the USIC Channel with GUI configured values.*/
I2C_MASTER_STATUS_t I2C_MASTER_Init(const I2C_MASTER_t *const handle)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  I2C_MASTER_STATUS_t status;

  if (handle != NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00e      	beq.n	80032f4 <I2C_MASTER_Init+0x2c>
  {
    #if (UC_FAMILY == XMC4)
      status = (I2C_MASTER_STATUS_t)CPU_CTRL_XMC4_Init(CPU_CTRL_HANDLE);
 80032d6:	480b      	ldr	r0, [pc, #44]	; (8003304 <I2C_MASTER_Init+0x3c>)
 80032d8:	f001 f94a 	bl	8004570 <CPU_CTRL_XMC4_Init>
 80032dc:	4603      	mov	r3, r0
 80032de:	73fb      	strb	r3, [r7, #15]
    #else
      status = (I2C_MASTER_STATUS_t)CPU_CTRL_XMC1_Init(CPU_CTRL_HANDLE);
    #endif
    if (status == I2C_MASTER_STATUS_SUCCESS)
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d108      	bne.n	80032f8 <I2C_MASTER_Init+0x30>
    {
      /*Initialize the multiplexers required for I2C_MASTER configuration*/
      handle->config->fptr_i2c_config();
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	4798      	blx	r3

      status = I2C_MASTER_STATUS_SUCCESS;
 80032ee:	2300      	movs	r3, #0
 80032f0:	73fb      	strb	r3, [r7, #15]
 80032f2:	e001      	b.n	80032f8 <I2C_MASTER_Init+0x30>
    }
  }
  else
  {
    status = I2C_MASTER_STATUS_FAILURE;
 80032f4:	2301      	movs	r3, #1
 80032f6:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 80032f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	20000104 	.word	0x20000104

08003308 <I2C_MASTER_GetFlagStatus>:

/* Function to get flag status of the requested parameter */
uint32_t I2C_MASTER_GetFlagStatus(const I2C_MASTER_t *handle, uint32_t flagtype)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t status;

  status = XMC_I2C_CH_GetStatusFlag(handle->channel);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff ffba 	bl	8003290 <XMC_I2C_CH_GetStatusFlag>
 800331c:	60f8      	str	r0, [r7, #12]

  return (status & flagtype);
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	4013      	ands	r3, r2
}
 8003324:	4618      	mov	r0, r3
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <I2C_MASTER_ClearFlag>:

/* Function to clear flag status of the requested parameter */
void I2C_MASTER_ClearFlag(const I2C_MASTER_t *handle, uint32_t flagtype)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_ClearStatusFlag(handle->channel,flagtype);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	6839      	ldr	r1, [r7, #0]
 800333e:	f7ff ffb3 	bl	80032a8 <XMC_I2C_CH_ClearStatusFlag>
}
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <I2C_MASTER_Transmit>:

/* Function to transmit the data to slave device */
I2C_MASTER_STATUS_t I2C_MASTER_Transmit(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                        uint8_t *data, const uint32_t size, bool send_stop)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	607a      	str	r2, [r7, #4]
 8003352:	603b      	str	r3, [r7, #0]
 8003354:	460b      	mov	r3, r1
 8003356:	72fb      	strb	r3, [r7, #11]

  I2C_MASTER_STATUS_t status = I2C_MASTER_STATUS_BUSY;
 8003358:	2302      	movs	r3, #2
 800335a:	75fb      	strb	r3, [r7, #23]

  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	613b      	str	r3, [r7, #16]

  /* If send_stop is set to TRUE, bus_acquired flag is set to FALSE.
     If send_start is set to FALSE and bus_acquired is set to FALSE then API will return an error. */
  if (((send_start == false) && (ptr_runtime->bus_acquired == false)) || (data == NULL) || (size == 0))
 8003362:	7afb      	ldrb	r3, [r7, #11]
 8003364:	f083 0301 	eor.w	r3, r3, #1
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d008      	beq.n	8003380 <I2C_MASTER_Transmit+0x38>
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003374:	b2db      	uxtb	r3, r3
 8003376:	f083 0301 	eor.w	r3, r3, #1
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	d105      	bne.n	800338c <I2C_MASTER_Transmit+0x44>
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d002      	beq.n	800338c <I2C_MASTER_Transmit+0x44>
 8003386:	6a3b      	ldr	r3, [r7, #32]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d102      	bne.n	8003392 <I2C_MASTER_Transmit+0x4a>
  {
    status = I2C_MASTER_STATUS_FAILURE;
 800338c:	2301      	movs	r3, #1
 800338e:	75fb      	strb	r3, [r7, #23]
 8003390:	e040      	b.n	8003414 <I2C_MASTER_Transmit+0xcc>
  /* If send_start is set to TRUE, and if the bus has been acquired then bus_acquired flag is set to TRUE,
     in this case a repeated start condition is generated otherwise a start condition is generated.
     If a start condition is generated( bus_acquired was FALSE), then the bus_acquired flag is set to TRUE. */
  else
  {
    ptr_runtime->direction = (uint32_t)I2C_MASTER_DIRECTION_TRANSMIT;
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	2200      	movs	r2, #0
 8003396:	619a      	str	r2, [r3, #24]

    if (ptr_runtime->tx_busy == false)
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	f083 0301 	eor.w	r3, r3, #1
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d034      	beq.n	8003414 <I2C_MASTER_Transmit+0xcc>
    {
      /*If there is no transmission in progress, obtain the address of data, size of data*/
      ptr_runtime->tx_data = data;
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	601a      	str	r2, [r3, #0]
      ptr_runtime->tx_data_count = size;
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	6a3a      	ldr	r2, [r7, #32]
 80033b4:	609a      	str	r2, [r3, #8]

      /*Initialize to first index and set the busy flag*/
      ptr_runtime->tx_data_index = 0U;
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	2200      	movs	r2, #0
 80033ba:	60da      	str	r2, [r3, #12]
      ptr_runtime->tx_busy = true;
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      ptr_runtime->send_stop = send_stop;
 80033c4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	61da      	str	r2, [r3, #28]

      /* Enable ACK event */
      XMC_I2C_CH_EnableEvent(handle->channel, (uint32_t)XMC_I2C_CH_EVENT_ACK);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80033d6:	f7fe faad 	bl	8001934 <XMC_I2C_CH_EnableEvent>
      XMC_I2C_CH_SetInterruptNodePointer(handle->channel,ptr_runtime->tx_ack_sr);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033e4:	4610      	mov	r0, r2
 80033e6:	4619      	mov	r1, r3
 80033e8:	f7ff ff42 	bl	8003270 <XMC_I2C_CH_SetInterruptNodePointer>

      if (send_start == true)
 80033ec:	7afb      	ldrb	r3, [r7, #11]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d005      	beq.n	80033fe <I2C_MASTER_Transmit+0xb6>
      {
        I2C_MASTER_lSendStart_Or_RepeatedStart(handle, address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_WRITE);
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	6879      	ldr	r1, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f000 fb10 	bl	8003a1c <I2C_MASTER_lSendStart_Or_RepeatedStart>
 80033fc:	e008      	b.n	8003410 <I2C_MASTER_Transmit+0xc8>
      }
      else
      {
        /*Trigger the Ack interrupt*/
        XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)ptr_runtime->tx_ack_sr);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003408:	4610      	mov	r0, r2
 800340a:	4619      	mov	r1, r3
 800340c:	f7ff fe82 	bl	8003114 <XMC_USIC_CH_TriggerServiceRequest>
      }
      status = I2C_MASTER_STATUS_SUCCESS;
 8003410:	2300      	movs	r3, #0
 8003412:	75fb      	strb	r3, [r7, #23]
    } /* end of else */
  }
  return (status);
 8003414:	7dfb      	ldrb	r3, [r7, #23]
} /* end of function */
 8003416:	4618      	mov	r0, r3
 8003418:	3718      	adds	r7, #24
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop

08003420 <I2C_MASTER_TransmitHandler>:
 *  @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 *  @return void
 */
void I2C_MASTER_TransmitHandler(I2C_MASTER_t * const handle)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;
  uint8_t fifo_min = 0U;
 8003428:	2300      	movs	r3, #0
 800342a:	73fb      	strb	r3, [r7, #15]

  ptr_runtime = handle->runtime;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	60bb      	str	r3, [r7, #8]

  /* check if any error flag is set */
  if (I2C_MASTER_GetFlagStatus(handle, ((uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED |
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8003438:	f7ff ff66 	bl	8003308 <I2C_MASTER_GetFlagStatus>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d011      	beq.n	8003466 <I2C_MASTER_TransmitHandler+0x46>
                                        (uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST |
                                        (uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR)))
  {
    /* Disable the transmit events */
    XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800344c:	f7ff fe76 	bl	800313c <XMC_USIC_CH_TXFIFO_DisableEvent>
    XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800345a:	f7ff fe39 	bl	80030d0 <XMC_USIC_CH_DisableEvent>
    I2C_MASTER_ProtocolHandler(handle);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 fc78 	bl	8003d54 <I2C_MASTER_ProtocolHandler>
 8003464:	e10b      	b.n	800367e <I2C_MASTER_TransmitHandler+0x25e>
  else
  {
/******************************************************************************************
  Direction = Transmit, Tx FIFO enabled
*******************************************************************************************/
  if (ptr_runtime->direction == (uint32_t)I2C_MASTER_DIRECTION_TRANSMIT)
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d170      	bne.n	8003550 <I2C_MASTER_TransmitHandler+0x130>
  {
    if (handle->config->txFIFO_size > 0U)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	7f1b      	ldrb	r3, [r3, #28]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d048      	beq.n	800350a <I2C_MASTER_TransmitHandler+0xea>
    {
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	68da      	ldr	r2, [r3, #12]
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	429a      	cmp	r2, r3
 8003482:	d224      	bcs.n	80034ce <I2C_MASTER_TransmitHandler+0xae>
      {
        /*Fill the transmit FIFO */
        while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 8003484:	e018      	b.n	80034b8 <I2C_MASTER_TransmitHandler+0x98>
        {
          /* transmit each byte till index reaches to the last byte */
          if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	429a      	cmp	r2, r3
 8003490:	d211      	bcs.n	80034b6 <I2C_MASTER_TransmitHandler+0x96>
          {
            /* load the FIFO, byte by byte till either FIFO is full or all data is loaded*/
            XMC_I2C_CH_MasterTransmit(handle->channel, (uint8_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6819      	ldr	r1, [r3, #0]
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	4413      	add	r3, r2
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	4608      	mov	r0, r1
 80034a4:	4619      	mov	r1, r3
 80034a6:	f7fe f9b9 	bl	800181c <XMC_I2C_CH_MasterTransmit>
            ptr_runtime->tx_data_index++;
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	1c5a      	adds	r2, r3, #1
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	60da      	str	r2, [r3, #12]
 80034b4:	e000      	b.n	80034b8 <I2C_MASTER_TransmitHandler+0x98>
          }
          else
          {
            break;
 80034b6:	e00a      	b.n	80034ce <I2C_MASTER_TransmitHandler+0xae>
    if (handle->config->txFIFO_size > 0U)
    {
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
      {
        /*Fill the transmit FIFO */
        while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff fe63 	bl	8003188 <XMC_USIC_CH_TXFIFO_IsFull>
 80034c2:	4603      	mov	r3, r0
 80034c4:	f083 0301 	eor.w	r3, r3, #1
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1db      	bne.n	8003486 <I2C_MASTER_TransmitHandler+0x66>
          }
        } /* end of while */
      }

      /*make sure data is transmitted in FIFO*/
      while (!XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel)){}
 80034ce:	bf00      	nop
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff fe6b 	bl	80031b0 <XMC_USIC_CH_TXFIFO_IsEmpty>
 80034da:	4603      	mov	r3, r0
 80034dc:	f083 0301 	eor.w	r3, r3, #1
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f4      	bne.n	80034d0 <I2C_MASTER_TransmitHandler+0xb0>

      /* if index is reached to last byte and "bus acquired" flag is set to true, then issue Send Stop */
      if (ptr_runtime->tx_data_index == ptr_runtime->tx_data_count)
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	f040 80c5 	bne.w	800367e <I2C_MASTER_TransmitHandler+0x25e>
      {
        if(ptr_runtime->bus_acquired == true)
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 80be 	beq.w	800367e <I2C_MASTER_TransmitHandler+0x25e>
        {
          I2C_MASTER_lSendStop_JumpTo_TxCallback(handle);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f8be 	bl	8003684 <I2C_MASTER_lSendStop_JumpTo_TxCallback>
 8003508:	e0b9      	b.n	800367e <I2C_MASTER_TransmitHandler+0x25e>
    Direction = transmit and Tx FIFO disabled
*******************************************************************************************/
    else
    {
      /* transmit each byte till the last byte */
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	429a      	cmp	r2, r3
 8003514:	d211      	bcs.n	800353a <I2C_MASTER_TransmitHandler+0x11a>
      {
        XMC_I2C_CH_MasterTransmit(handle->channel, ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6819      	ldr	r1, [r3, #0]
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	4413      	add	r3, r2
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	4608      	mov	r0, r1
 8003528:	4619      	mov	r1, r3
 800352a:	f7fe f977 	bl	800181c <XMC_I2C_CH_MasterTransmit>
        ptr_runtime->tx_data_index++;
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	1c5a      	adds	r2, r3, #1
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	60da      	str	r2, [r3, #12]
 8003538:	e0a1      	b.n	800367e <I2C_MASTER_TransmitHandler+0x25e>
      }
      else
      {
        /* if index reaches last byte and bus_acquired flag is set to true, issue send stop */
        if (ptr_runtime->bus_acquired == true)
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 809b 	beq.w	800367e <I2C_MASTER_TransmitHandler+0x25e>
        {
          I2C_MASTER_lSendStop_JumpTo_TxCallback(handle);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 f89b 	bl	8003684 <I2C_MASTER_lSendStop_JumpTo_TxCallback>
 800354e:	e096      	b.n	800367e <I2C_MASTER_TransmitHandler+0x25e>
/**************************************************************************************************
  Direction = Receive, Tx, Rx FIFO enabled.
  Minimum FIFO value is calculated by comparing Tx FIFO and Rx FIFO size.
  If Rx FIFO is not enabled, default size of 2 is considered.
***************************************************************************************************/
    if (handle->config->txFIFO_size > 0U)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	7f1b      	ldrb	r3, [r3, #28]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d060      	beq.n	800361c <I2C_MASTER_TransmitHandler+0x1fc>
    {
      if ((handle->config->rxFIFO_size > 0U))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	7f5b      	ldrb	r3, [r3, #29]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d01c      	beq.n	800359e <I2C_MASTER_TransmitHandler+0x17e>
      {
        fifo_min = FIFO_MIN((uint32_t)(0x01U << handle->config->txFIFO_size),
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	7f1b      	ldrb	r3, [r3, #28]
 800356a:	461a      	mov	r2, r3
 800356c:	2301      	movs	r3, #1
 800356e:	4093      	lsls	r3, r2
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	6852      	ldr	r2, [r2, #4]
 8003574:	7f52      	ldrb	r2, [r2, #29]
 8003576:	40d3      	lsrs	r3, r2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d107      	bne.n	800358c <I2C_MASTER_TransmitHandler+0x16c>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	7f1b      	ldrb	r3, [r3, #28]
 8003582:	461a      	mov	r2, r3
 8003584:	2301      	movs	r3, #1
 8003586:	4093      	lsls	r3, r2
 8003588:	b2db      	uxtb	r3, r3
 800358a:	e006      	b.n	800359a <I2C_MASTER_TransmitHandler+0x17a>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	7f5b      	ldrb	r3, [r3, #29]
 8003592:	461a      	mov	r2, r3
 8003594:	2301      	movs	r3, #1
 8003596:	4093      	lsls	r3, r2
 8003598:	b2db      	uxtb	r3, r3
 800359a:	73fb      	strb	r3, [r7, #15]
 800359c:	e001      	b.n	80035a2 <I2C_MASTER_TransmitHandler+0x182>
                            (uint32_t)(0x01U << handle->config->rxFIFO_size));
      }
      else
      {
        /* if Rx FIFO is disabled */
        fifo_min = 2U;
 800359e:	2302      	movs	r3, #2
 80035a0:	73fb      	strb	r3, [r7, #15]
      }

      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80035ac:	f7ff fdc6 	bl	800313c <XMC_USIC_CH_TXFIFO_DisableEvent>

      /* fill the FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 80035b0:	e027      	b.n	8003602 <I2C_MASTER_TransmitHandler+0x1e2>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	68da      	ldr	r2, [r3, #12]
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d220      	bcs.n	8003600 <I2C_MASTER_TransmitHandler+0x1e0>
        {
          /* check for last byte and send_nack is set to true */
          if (((ptr_runtime->tx_data_index + 1) == ptr_runtime->tx_data_count) &&
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	1c5a      	adds	r2, r3, #1
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d109      	bne.n	80035e0 <I2C_MASTER_TransmitHandler+0x1c0>
               (ptr_runtime->send_nack == true))
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	6a1b      	ldr	r3, [r3, #32]
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
        {
          /* check for last byte and send_nack is set to true */
          if (((ptr_runtime->tx_data_index + 1) == ptr_runtime->tx_data_count) &&
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d105      	bne.n	80035e0 <I2C_MASTER_TransmitHandler+0x1c0>
               (ptr_runtime->send_nack == true))
          {
            XMC_I2C_CH_MasterReceiveNack(handle->channel);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4618      	mov	r0, r3
 80035da:	f7fe f96b 	bl	80018b4 <XMC_I2C_CH_MasterReceiveNack>
 80035de:	e004      	b.n	80035ea <I2C_MASTER_TransmitHandler+0x1ca>
          }
          else
          {
            XMC_I2C_CH_MasterReceiveAck(handle->channel);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7fe f93f 	bl	8001868 <XMC_I2C_CH_MasterReceiveAck>
          }
          ptr_runtime->tx_data_index++;
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	1c5a      	adds	r2, r3, #1
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	60da      	str	r2, [r3, #12]

          /*if index reaches fifo size - break*/
          if ((ptr_runtime->tx_data_index) >= fifo_min)
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	68da      	ldr	r2, [r3, #12]
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d301      	bcc.n	8003602 <I2C_MASTER_TransmitHandler+0x1e2>
          {
            break;
 80035fe:	e00c      	b.n	800361a <I2C_MASTER_TransmitHandler+0x1fa>
          }
        }
        else
        {
          break;
 8003600:	e00b      	b.n	800361a <I2C_MASTER_TransmitHandler+0x1fa>
      }

      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);

      /* fill the FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff fdbe 	bl	8003188 <XMC_USIC_CH_TXFIFO_IsFull>
 800360c:	4603      	mov	r3, r0
 800360e:	f083 0301 	eor.w	r3, r3, #1
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1cc      	bne.n	80035b2 <I2C_MASTER_TransmitHandler+0x192>
 8003618:	e022      	b.n	8003660 <I2C_MASTER_TransmitHandler+0x240>
 800361a:	e021      	b.n	8003660 <I2C_MASTER_TransmitHandler+0x240>
/**************************************************************************************************
   Direction = Receive, Tx FIFO disabled
 ***************************************************************************************************/
    else
    {
      XMC_USIC_CH_DisableEvent(handle->channel,XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4618      	mov	r0, r3
 8003622:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003626:	f7ff fd53 	bl	80030d0 <XMC_USIC_CH_DisableEvent>

      /* check for last byte and send_nack is set to true */
      if (((ptr_runtime->tx_data_index + 1) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	1c5a      	adds	r2, r3, #1
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	429a      	cmp	r2, r3
 8003636:	d109      	bne.n	800364c <I2C_MASTER_TransmitHandler+0x22c>
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d105      	bne.n	800364c <I2C_MASTER_TransmitHandler+0x22c>
      {
        XMC_I2C_CH_MasterReceiveNack(handle->channel);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4618      	mov	r0, r3
 8003646:	f7fe f935 	bl	80018b4 <XMC_I2C_CH_MasterReceiveNack>
 800364a:	e004      	b.n	8003656 <I2C_MASTER_TransmitHandler+0x236>
      }
      else
      {
        XMC_I2C_CH_MasterReceiveAck(handle->channel);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f7fe f909 	bl	8001868 <XMC_I2C_CH_MasterReceiveAck>
      }
      ptr_runtime->tx_data_index++;
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	1c5a      	adds	r2, r3, #1
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	60da      	str	r2, [r3, #12]
    }

/**************************************************************************************************
   If last byte, then disable ACK event
 ***************************************************************************************************/
     if (handle->runtime->tx_data_index == handle->runtime->tx_data_count)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	429a      	cmp	r2, r3
 800366e:	d106      	bne.n	800367e <I2C_MASTER_TransmitHandler+0x25e>
     {
       XMC_I2C_CH_DisableEvent(handle->channel,(uint32_t)XMC_I2C_CH_EVENT_ACK);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800367a:	f7fe f977 	bl	800196c <XMC_I2C_CH_DisableEvent>
     }
  } /* end of else */
 } /* end of else */
}
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <I2C_MASTER_lSendStop_JumpTo_TxCallback>:

/* Function to issue Send Stop command and jump to callback routine */
static void I2C_MASTER_lSendStop_JumpTo_TxCallback(I2C_MASTER_t *const handle)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	60fb      	str	r3, [r7, #12]

  XMC_I2C_CH_DisableEvent(handle->channel,((uint32_t)XMC_I2C_CH_EVENT_ACK ));
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800369c:	f7fe f966 	bl	800196c <XMC_I2C_CH_DisableEvent>

  if (ptr_runtime->send_stop == true)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	69db      	ldr	r3, [r3, #28]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d108      	bne.n	80036ba <I2C_MASTER_lSendStop_JumpTo_TxCallback+0x36>
  {
    ptr_runtime->bus_acquired = false;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    XMC_I2C_CH_MasterStop(handle->channel);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7fe f88b 	bl	80017d0 <XMC_I2C_CH_MasterStop>
  }

  while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
 80036ba:	bf00      	nop
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7ff fd17 	bl	80030f4 <XMC_USIC_CH_GetTransmitBufferStatus>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b80      	cmp	r3, #128	; 0x80
 80036ca:	d0f7      	beq.n	80036bc <I2C_MASTER_lSendStop_JumpTo_TxCallback+0x38>

  /*All data is transmitted*/
  ptr_runtime->tx_busy = false;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  if (handle->config->tx_cbhandler != NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <I2C_MASTER_lSendStop_JumpTo_TxCallback+0x62>
  {
    /*Execute the 'End of transmission' callback function*/
    handle->config->tx_cbhandler();
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	4798      	blx	r3
  }
}
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <I2C_MASTER_Receive>:
 *
 *
 ******************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_Receive(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                       uint8_t * data, const uint32_t count, bool send_stop, bool send_nack)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	607a      	str	r2, [r7, #4]
 80036f6:	603b      	str	r3, [r7, #0]
 80036f8:	460b      	mov	r3, r1
 80036fa:	72fb      	strb	r3, [r7, #11]

  I2C_MASTER_STATUS_t status = I2C_MASTER_STATUS_BUSY;
 80036fc:	2302      	movs	r3, #2
 80036fe:	75fb      	strb	r3, [r7, #23]
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	613b      	str	r3, [r7, #16]

  if (((handle == NULL) || ((send_start == false) && (ptr_runtime->bus_acquired == false)) || (data == NULL) ||
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d014      	beq.n	8003736 <I2C_MASTER_Receive+0x4a>
 800370c:	7afb      	ldrb	r3, [r7, #11]
 800370e:	f083 0301 	eor.w	r3, r3, #1
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	d008      	beq.n	800372a <I2C_MASTER_Receive+0x3e>
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800371e:	b2db      	uxtb	r3, r3
 8003720:	f083 0301 	eor.w	r3, r3, #1
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d105      	bne.n	8003736 <I2C_MASTER_Receive+0x4a>
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d002      	beq.n	8003736 <I2C_MASTER_Receive+0x4a>
 8003730:	6a3b      	ldr	r3, [r7, #32]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d102      	bne.n	800373c <I2C_MASTER_Receive+0x50>
       (count == 0)))
  {
    status = I2C_MASTER_STATUS_FAILURE;
 8003736:	2301      	movs	r3, #1
 8003738:	75fb      	strb	r3, [r7, #23]
 800373a:	e042      	b.n	80037c2 <I2C_MASTER_Receive+0xd6>
  }
  else
  {
     if (ptr_runtime->rx_busy == false)
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003742:	b2db      	uxtb	r3, r3
 8003744:	f083 0301 	eor.w	r3, r3, #1
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d039      	beq.n	80037c2 <I2C_MASTER_Receive+0xd6>
     {
       ptr_runtime->direction = (uint32_t)I2C_MASTER_DIRECTION_RECEIVE;
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	2201      	movs	r2, #1
 8003752:	619a      	str	r2, [r3, #24]

       /*If no active reception in progress, obtain the address of data buffer and
         number of data bytes to be received*/
       ptr_runtime->rx_data = data;
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	605a      	str	r2, [r3, #4]
       ptr_runtime->rx_data_count = count;
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	6a3a      	ldr	r2, [r7, #32]
 800375e:	611a      	str	r2, [r3, #16]
       ptr_runtime->tx_data = data;
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	601a      	str	r2, [r3, #0]
       ptr_runtime->tx_data_count = count;
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	6a3a      	ldr	r2, [r7, #32]
 800376a:	609a      	str	r2, [r3, #8]
       ptr_runtime->tx_busy = true;
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
       ptr_runtime->rx_busy = true;
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
       ptr_runtime->send_stop = send_stop;
 800377c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	61da      	str	r2, [r3, #28]
       ptr_runtime->send_nack = send_nack;
 8003784:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	621a      	str	r2, [r3, #32]
       ptr_runtime->rx_data_index = 0U;
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	2200      	movs	r2, #0
 8003790:	615a      	str	r2, [r3, #20]
       ptr_runtime->tx_data_index = 0U;
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	2200      	movs	r2, #0
 8003796:	60da      	str	r2, [r3, #12]

       if (handle->config->rxFIFO_size > 0U)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	7f5b      	ldrb	r3, [r3, #29]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d007      	beq.n	80037b2 <I2C_MASTER_Receive+0xc6>
       {
         I2C_MASTER_lReceive_FIFOData(handle, send_start, address, count);
 80037a2:	7afb      	ldrb	r3, [r7, #11]
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	4619      	mov	r1, r3
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6a3b      	ldr	r3, [r7, #32]
 80037ac:	f000 f80e 	bl	80037cc <I2C_MASTER_lReceive_FIFOData>
 80037b0:	e005      	b.n	80037be <I2C_MASTER_Receive+0xd2>
       }
       else
       {
         I2C_MASTER_lReceive_StdData(handle, send_start, address);
 80037b2:	7afb      	ldrb	r3, [r7, #11]
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	4619      	mov	r1, r3
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	f000 f8a3 	bl	8003904 <I2C_MASTER_lReceive_StdData>
       }
     
       status = I2C_MASTER_STATUS_SUCCESS;
 80037be:	2300      	movs	r3, #0
 80037c0:	75fb      	strb	r3, [r7, #23]
     }
  }
  return (status);
 80037c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3718      	adds	r7, #24
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <I2C_MASTER_lReceive_FIFOData>:
/**************************************************************************************************
     Rx FIFO data
***************************************************************************************************/
static void I2C_MASTER_lReceive_FIFOData(I2C_MASTER_t * const handle, bool send_start,
                                         const uint32_t address, const uint32_t count)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	607a      	str	r2, [r7, #4]
 80037d6:	603b      	str	r3, [r7, #0]
 80037d8:	460b      	mov	r3, r1
 80037da:	72fb      	strb	r3, [r7, #11]
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	617b      	str	r3, [r7, #20]

  /*Clear the receive FIFO, configure the trigger lime
   * and enable the receive events*/
  XMC_USIC_CH_RXFIFO_Flush(handle->channel);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7ff fd1c 	bl	8003224 <XMC_USIC_CH_RXFIFO_Flush>

  /*Configure the FIFO trigger limit based on the required data size*/
  I2C_MASTER_ReconfigureRxFIFO(handle, count);
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	6839      	ldr	r1, [r7, #0]
 80037f0:	f000 faf4 	bl	8003ddc <I2C_MASTER_ReconfigureRxFIFO>

  XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel,
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 80037fe:	f7ff fceb 	bl	80031d8 <XMC_USIC_CH_RXFIFO_EnableEvent>
                                (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
                                (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
  if (send_start == true)
 8003802:	7afb      	ldrb	r3, [r7, #11]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d015      	beq.n	8003834 <I2C_MASTER_lReceive_FIFOData+0x68>
  {
    XMC_I2C_CH_EnableEvent(handle->channel, (uint32_t)XMC_I2C_CH_EVENT_ACK);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4618      	mov	r0, r3
 800380e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003812:	f7fe f88f 	bl	8001934 <XMC_I2C_CH_EnableEvent>
    XMC_I2C_CH_SetInterruptNodePointer(handle->channel,ptr_runtime->tx_ack_sr);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003820:	4610      	mov	r0, r2
 8003822:	4619      	mov	r1, r3
 8003824:	f7ff fd24 	bl	8003270 <XMC_I2C_CH_SetInterruptNodePointer>
    I2C_MASTER_lSendStart_Or_RepeatedStart(handle,address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_READ);
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	6879      	ldr	r1, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	f000 f8f5 	bl	8003a1c <I2C_MASTER_lSendStart_Or_RepeatedStart>
 8003832:	e064      	b.n	80038fe <I2C_MASTER_lReceive_FIFOData+0x132>
  }
  else
  {
    /* if Tx FIFO enabled */
    if (handle->config->txFIFO_size > 0U)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	7f1b      	ldrb	r3, [r3, #28]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d037      	beq.n	80038ae <I2C_MASTER_lReceive_FIFOData+0xe2>
    {
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003848:	f7ff fc78 	bl	800313c <XMC_USIC_CH_TXFIFO_DisableEvent>
                                     (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 800384c:	e023      	b.n	8003896 <I2C_MASTER_lReceive_FIFOData+0xca>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	429a      	cmp	r2, r3
 8003858:	d21b      	bcs.n	8003892 <I2C_MASTER_lReceive_FIFOData+0xc6>
        {
          if (((ptr_runtime->tx_data_index+1) == ptr_runtime->tx_data_count) &&
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	1c5a      	adds	r2, r3, #1
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	429a      	cmp	r2, r3
 8003866:	d109      	bne.n	800387c <I2C_MASTER_lReceive_FIFOData+0xb0>
               (ptr_runtime->send_nack == true))
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	6a1b      	ldr	r3, [r3, #32]
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
        {
          if (((ptr_runtime->tx_data_index+1) == ptr_runtime->tx_data_count) &&
 800386c:	2b01      	cmp	r3, #1
 800386e:	d105      	bne.n	800387c <I2C_MASTER_lReceive_FIFOData+0xb0>
               (ptr_runtime->send_nack == true))
          {
            XMC_I2C_CH_MasterReceiveNack(handle->channel);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4618      	mov	r0, r3
 8003876:	f7fe f81d 	bl	80018b4 <XMC_I2C_CH_MasterReceiveNack>
 800387a:	e004      	b.n	8003886 <I2C_MASTER_lReceive_FIFOData+0xba>
          }
          else
          {
            XMC_I2C_CH_MasterReceiveAck(handle->channel);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4618      	mov	r0, r3
 8003882:	f7fd fff1 	bl	8001868 <XMC_I2C_CH_MasterReceiveAck>
          }
          ptr_runtime->tx_data_index++;
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	1c5a      	adds	r2, r3, #1
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	60da      	str	r2, [r3, #12]
 8003890:	e001      	b.n	8003896 <I2C_MASTER_lReceive_FIFOData+0xca>
        }
        else
        {
          break;
 8003892:	bf00      	nop
 8003894:	e033      	b.n	80038fe <I2C_MASTER_lReceive_FIFOData+0x132>
    if (handle->config->txFIFO_size > 0U)
    {
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,
                                     (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f7ff fc74 	bl	8003188 <XMC_USIC_CH_TXFIFO_IsFull>
 80038a0:	4603      	mov	r3, r0
 80038a2:	f083 0301 	eor.w	r3, r3, #1
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1d0      	bne.n	800384e <I2C_MASTER_lReceive_FIFOData+0x82>
 80038ac:	e027      	b.n	80038fe <I2C_MASTER_lReceive_FIFOData+0x132>
        }
      } /* end of while */
    }
    else  /* Tx FIFO disabled and Rx FIFO enabled */
    {
      XMC_USIC_CH_DisableEvent(handle->channel,XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038b8:	f7ff fc0a 	bl	80030d0 <XMC_USIC_CH_DisableEvent>

      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	68da      	ldr	r2, [r3, #12]
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d21a      	bcs.n	80038fe <I2C_MASTER_lReceive_FIFOData+0x132>
      {
        if (((ptr_runtime->tx_data_index + 1) == ptr_runtime->tx_data_count) &&
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	1c5a      	adds	r2, r3, #1
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d109      	bne.n	80038ea <I2C_MASTER_lReceive_FIFOData+0x11e>
             (ptr_runtime->send_nack == true))
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
    {
      XMC_USIC_CH_DisableEvent(handle->channel,XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);

      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
      {
        if (((ptr_runtime->tx_data_index + 1) == ptr_runtime->tx_data_count) &&
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d105      	bne.n	80038ea <I2C_MASTER_lReceive_FIFOData+0x11e>
             (ptr_runtime->send_nack == true))
        {
          XMC_I2C_CH_MasterReceiveNack(handle->channel);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fd ffe6 	bl	80018b4 <XMC_I2C_CH_MasterReceiveNack>
 80038e8:	e004      	b.n	80038f4 <I2C_MASTER_lReceive_FIFOData+0x128>
        }
        else
        {
          XMC_I2C_CH_MasterReceiveAck(handle->channel);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fd ffba 	bl	8001868 <XMC_I2C_CH_MasterReceiveAck>
        }
        ptr_runtime->tx_data_index++;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	1c5a      	adds	r2, r3, #1
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	60da      	str	r2, [r3, #12]
      }
    } /* end of else */
   } /* end of  if(send_start == false) */
}
 80038fe:	3718      	adds	r7, #24
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <I2C_MASTER_lReceive_StdData>:
/**************************************************************************************************
    Standard receive mode
***************************************************************************************************/
static void I2C_MASTER_lReceive_StdData(I2C_MASTER_t * const handle, bool send_start, const uint32_t address)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	460b      	mov	r3, r1
 800390e:	607a      	str	r2, [r7, #4]
 8003910:	72fb      	strb	r3, [r7, #11]
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	617b      	str	r3, [r7, #20]
   
  XMC_USIC_CH_EnableEvent(handle->channel,
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8003922:	f7ff fbc5 	bl	80030b0 <XMC_USIC_CH_EnableEvent>
                         (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE |
                         (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));

  if (send_start == true)
 8003926:	7afb      	ldrb	r3, [r7, #11]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d015      	beq.n	8003958 <I2C_MASTER_lReceive_StdData+0x54>
  {
    XMC_I2C_CH_EnableEvent(handle->channel, (uint32_t)XMC_I2C_CH_EVENT_ACK);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4618      	mov	r0, r3
 8003932:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003936:	f7fd fffd 	bl	8001934 <XMC_I2C_CH_EnableEvent>
    XMC_I2C_CH_SetInterruptNodePointer(handle->channel,ptr_runtime->tx_ack_sr);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003944:	4610      	mov	r0, r2
 8003946:	4619      	mov	r1, r3
 8003948:	f7ff fc92 	bl	8003270 <XMC_I2C_CH_SetInterruptNodePointer>
    I2C_MASTER_lSendStart_Or_RepeatedStart(handle, address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_READ);
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	6879      	ldr	r1, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	f000 f863 	bl	8003a1c <I2C_MASTER_lSendStart_Or_RepeatedStart>
 8003956:	e05d      	b.n	8003a14 <I2C_MASTER_lReceive_StdData+0x110>
  else
  {
/**************************************************************************************************
     send_start flag is set to false and Tx FIFO is disabled
***************************************************************************************************/
    if (handle->config->txFIFO_size == 0U)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	7f1b      	ldrb	r3, [r3, #28]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d122      	bne.n	80039a8 <I2C_MASTER_lReceive_StdData+0xa4>
    {
      XMC_USIC_CH_DisableEvent(handle->channel,XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800396c:	f7ff fbb0 	bl	80030d0 <XMC_USIC_CH_DisableEvent>
      if (((ptr_runtime->tx_data_index + 1) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	1c5a      	adds	r2, r3, #1
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	429a      	cmp	r2, r3
 800397c:	d109      	bne.n	8003992 <I2C_MASTER_lReceive_StdData+0x8e>
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d105      	bne.n	8003992 <I2C_MASTER_lReceive_StdData+0x8e>
      {
        XMC_I2C_CH_MasterReceiveNack(handle->channel);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	f7fd ff92 	bl	80018b4 <XMC_I2C_CH_MasterReceiveNack>
 8003990:	e004      	b.n	800399c <I2C_MASTER_lReceive_StdData+0x98>
      }
      else
      {
        XMC_I2C_CH_MasterReceiveAck(handle->channel);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f7fd ff66 	bl	8001868 <XMC_I2C_CH_MasterReceiveAck>
      }

      ptr_runtime->tx_data_index++;
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	1c5a      	adds	r2, r3, #1
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	60da      	str	r2, [r3, #12]
 80039a6:	e035      	b.n	8003a14 <I2C_MASTER_lReceive_StdData+0x110>
/**************************************************************************************************
     send_start flag is set to false and Tx FIFO is enabled
***************************************************************************************************/
    else
    {
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80039b2:	f7ff fbc3 	bl	800313c <XMC_USIC_CH_TXFIFO_DisableEvent>

      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 80039b6:	e022      	b.n	80039fe <I2C_MASTER_lReceive_StdData+0xfa>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	68da      	ldr	r2, [r3, #12]
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d21b      	bcs.n	80039fc <I2C_MASTER_lReceive_StdData+0xf8>
        {
          if (((ptr_runtime->tx_data_index + 1) == ptr_runtime->tx_data_count) &&
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d109      	bne.n	80039e6 <I2C_MASTER_lReceive_StdData+0xe2>
               (ptr_runtime->send_nack == true))
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
        {
          if (((ptr_runtime->tx_data_index + 1) == ptr_runtime->tx_data_count) &&
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d105      	bne.n	80039e6 <I2C_MASTER_lReceive_StdData+0xe2>
               (ptr_runtime->send_nack == true))
          {
            XMC_I2C_CH_MasterReceiveNack(handle->channel);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fd ff68 	bl	80018b4 <XMC_I2C_CH_MasterReceiveNack>
 80039e4:	e004      	b.n	80039f0 <I2C_MASTER_lReceive_StdData+0xec>
          }
          else
          {
            XMC_I2C_CH_MasterReceiveAck(handle->channel);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7fd ff3c 	bl	8001868 <XMC_I2C_CH_MasterReceiveAck>
          }
          ptr_runtime->tx_data_index++;
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	1c5a      	adds	r2, r3, #1
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	60da      	str	r2, [r3, #12]
 80039fa:	e000      	b.n	80039fe <I2C_MASTER_lReceive_StdData+0xfa>
        }
        else
        {
          break;
 80039fc:	e00a      	b.n	8003a14 <I2C_MASTER_lReceive_StdData+0x110>
    else
    {
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);

      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7ff fbc0 	bl	8003188 <XMC_USIC_CH_TXFIFO_IsFull>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	f083 0301 	eor.w	r3, r3, #1
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1d1      	bne.n	80039b8 <I2C_MASTER_lReceive_StdData+0xb4>
          break;
        }
      } /* end of while */
    } /* end of else */
  } /* end of else */
} /* end of function */
 8003a14:	3718      	adds	r7, #24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop

08003a1c <I2C_MASTER_lSendStart_Or_RepeatedStart>:

/* Function to issue Send Start/Repeated Start command */
static void I2C_MASTER_lSendStart_Or_RepeatedStart(I2C_MASTER_t * handle,const uint32_t address,
		                                           const XMC_I2C_CH_CMD_t cmd)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	4613      	mov	r3, r2
 8003a28:	71fb      	strb	r3, [r7, #7]
  if (handle->runtime->bus_acquired == true)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00a      	beq.n	8003a4e <I2C_MASTER_lSendStart_Or_RepeatedStart+0x32>
  {
    XMC_I2C_CH_MasterRepeatedStart(handle->channel, (uint16_t)address, cmd);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6819      	ldr	r1, [r3, #0]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	79fb      	ldrb	r3, [r7, #7]
 8003a42:	4608      	mov	r0, r1
 8003a44:	4611      	mov	r1, r2
 8003a46:	461a      	mov	r2, r3
 8003a48:	f7fd fe8e 	bl	8001768 <XMC_I2C_CH_MasterRepeatedStart>
 8003a4c:	e00e      	b.n	8003a6c <I2C_MASTER_lSendStart_Or_RepeatedStart+0x50>
  }
  else
  {
    handle->runtime->bus_acquired = true;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    XMC_I2C_CH_MasterStart(handle->channel, (uint16_t)address, cmd);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6819      	ldr	r1, [r3, #0]
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	79fb      	ldrb	r3, [r7, #7]
 8003a62:	4608      	mov	r0, r1
 8003a64:	4611      	mov	r1, r2
 8003a66:	461a      	mov	r2, r3
 8003a68:	f7fd fe4a 	bl	8001700 <XMC_I2C_CH_MasterStart>
  }
}
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop

08003a74 <I2C_MASTER_ReceiveHandler>:
 * @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 * @return void
 */
void I2C_MASTER_ReceiveHandler(I2C_MASTER_t * const handle)
{
 8003a74:	b590      	push	{r4, r7, lr}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;
  uint8_t fifo_lindex = 0;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	73fb      	strb	r3, [r7, #15]
  uint8_t fifo_min;

  ptr_runtime = handle->runtime;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	60bb      	str	r3, [r7, #8]

  if (ptr_runtime->rx_busy == true)
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f000 812a 	beq.w	8003ce8 <I2C_MASTER_ReceiveHandler+0x274>
  {
    if (handle->config->rxFIFO_size > 0)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	7f5b      	ldrb	r3, [r3, #29]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 80db 	beq.w	8003c56 <I2C_MASTER_ReceiveHandler+0x1e2>
    {
      /**************************************************************************************************
       Rx FIFO enabled
      ***************************************************************************************************/
      while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 8003aa0:	e022      	b.n	8003ae8 <I2C_MASTER_ReceiveHandler+0x74>
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_I2C_CH_GetReceivedData(handle->channel);
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	18d4      	adds	r4, r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7fd ff25 	bl	8001900 <XMC_I2C_CH_GetReceivedData>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	7023      	strb	r3, [r4, #0]
        ptr_runtime->rx_data_index++;
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	1c5a      	adds	r2, r3, #1
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	615a      	str	r2, [r3, #20]

        if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	695a      	ldr	r2, [r3, #20]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d10b      	bne.n	8003ae8 <I2C_MASTER_ReceiveHandler+0x74>
        {
          /*Reception complete*/
          ptr_runtime->rx_busy = false;
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

            /*Disable both standard receive and alternative receive FIFO events*/
            XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8003ae2:	f7ff fb8b 	bl	80031fc <XMC_USIC_CH_RXFIFO_DisableEvent>
                                          (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
                                                     (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));

          break;
 8003ae6:	e00a      	b.n	8003afe <I2C_MASTER_ReceiveHandler+0x8a>
    if (handle->config->rxFIFO_size > 0)
    {
      /**************************************************************************************************
       Rx FIFO enabled
      ***************************************************************************************************/
      while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7ff fbab 	bl	8003248 <XMC_USIC_CH_RXFIFO_IsEmpty>
 8003af2:	4603      	mov	r3, r0
 8003af4:	f083 0301 	eor.w	r3, r3, #1
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1d1      	bne.n	8003aa2 <I2C_MASTER_ReceiveHandler+0x2e>
          break;
        }
      } /* end of while(XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)*/

      /*Set the trigger limit if data still to be received*/
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	695a      	ldr	r2, [r3, #20]
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	f080 8087 	bcs.w	8003c1a <I2C_MASTER_ReceiveHandler+0x1a6>
      {
        I2C_MASTER_ReconfigureRxFIFO(handle,(uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	691a      	ldr	r2, [r3, #16]
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	4619      	mov	r1, r3
 8003b1a:	f000 f95f 	bl	8003ddc <I2C_MASTER_ReconfigureRxFIFO>

        if ((handle->config->txFIFO_size > 0U))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	7f1b      	ldrb	r3, [r3, #28]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d01c      	beq.n	8003b62 <I2C_MASTER_ReceiveHandler+0xee>
        {
          fifo_min = FIFO_MIN((uint32_t)(0x01U << handle->config->txFIFO_size),
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	7f1b      	ldrb	r3, [r3, #28]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	2301      	movs	r3, #1
 8003b32:	4093      	lsls	r3, r2
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6852      	ldr	r2, [r2, #4]
 8003b38:	7f52      	ldrb	r2, [r2, #29]
 8003b3a:	40d3      	lsrs	r3, r2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d107      	bne.n	8003b50 <I2C_MASTER_ReceiveHandler+0xdc>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	7f1b      	ldrb	r3, [r3, #28]
 8003b46:	461a      	mov	r2, r3
 8003b48:	2301      	movs	r3, #1
 8003b4a:	4093      	lsls	r3, r2
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	e006      	b.n	8003b5e <I2C_MASTER_ReceiveHandler+0xea>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	7f5b      	ldrb	r3, [r3, #29]
 8003b56:	461a      	mov	r2, r3
 8003b58:	2301      	movs	r3, #1
 8003b5a:	4093      	lsls	r3, r2
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	73bb      	strb	r3, [r7, #14]
 8003b60:	e001      	b.n	8003b66 <I2C_MASTER_ReceiveHandler+0xf2>
                              (uint32_t)(0x01U << handle->config->rxFIFO_size));
       }
       else
       {
          fifo_min = 2U;
 8003b62:	2302      	movs	r3, #2
 8003b64:	73bb      	strb	r3, [r7, #14]
       }
       /**************************************************************************************************
         Rx and Tx FIFO enabled
        ***************************************************************************************************/
        if (handle->config->txFIFO_size > 0U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	7f1b      	ldrb	r3, [r3, #28]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d039      	beq.n	8003be4 <I2C_MASTER_ReceiveHandler+0x170>
        {
          /*Fill the transmit FIFO */
          while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 8003b70:	e02b      	b.n	8003bca <I2C_MASTER_ReceiveHandler+0x156>
          {
            if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	68da      	ldr	r2, [r3, #12]
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d224      	bcs.n	8003bc8 <I2C_MASTER_ReceiveHandler+0x154>
            {
              if (((ptr_runtime->tx_data_index+1) == ptr_runtime->tx_data_count) &&
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	1c5a      	adds	r2, r3, #1
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d109      	bne.n	8003ba0 <I2C_MASTER_ReceiveHandler+0x12c>
                   (ptr_runtime->send_nack == true))
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
          /*Fill the transmit FIFO */
          while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
          {
            if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
            {
              if (((ptr_runtime->tx_data_index+1) == ptr_runtime->tx_data_count) &&
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d105      	bne.n	8003ba0 <I2C_MASTER_ReceiveHandler+0x12c>
                   (ptr_runtime->send_nack == true))
              {
                XMC_I2C_CH_MasterReceiveNack(handle->channel);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7fd fe8b 	bl	80018b4 <XMC_I2C_CH_MasterReceiveNack>
 8003b9e:	e004      	b.n	8003baa <I2C_MASTER_ReceiveHandler+0x136>
              }
              else
              {
                XMC_I2C_CH_MasterReceiveAck(handle->channel);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7fd fe5f 	bl	8001868 <XMC_I2C_CH_MasterReceiveAck>
              }
              ptr_runtime->tx_data_index++;
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	1c5a      	adds	r2, r3, #1
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	60da      	str	r2, [r3, #12]

              /*if fifo size- break*/
              if ((++fifo_lindex) >= fifo_min)
 8003bb4:	7bfb      	ldrb	r3, [r7, #15]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	73fb      	strb	r3, [r7, #15]
 8003bba:	7bfa      	ldrb	r2, [r7, #15]
 8003bbc:	7bbb      	ldrb	r3, [r7, #14]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d303      	bcc.n	8003bca <I2C_MASTER_ReceiveHandler+0x156>
              {
                fifo_lindex = 0U;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	73fb      	strb	r3, [r7, #15]
                break;
 8003bc6:	e00c      	b.n	8003be2 <I2C_MASTER_ReceiveHandler+0x16e>
              }
            }/* end of if(handle->runtime->tx_data_index < handle->runtime->tx_data_count) */
            else
            {
              break;
 8003bc8:	e00b      	b.n	8003be2 <I2C_MASTER_ReceiveHandler+0x16e>
         Rx and Tx FIFO enabled
        ***************************************************************************************************/
        if (handle->config->txFIFO_size > 0U)
        {
          /*Fill the transmit FIFO */
          while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7ff fada 	bl	8003188 <XMC_USIC_CH_TXFIFO_IsFull>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	f083 0301 	eor.w	r3, r3, #1
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1c8      	bne.n	8003b72 <I2C_MASTER_ReceiveHandler+0xfe>
 8003be0:	e01b      	b.n	8003c1a <I2C_MASTER_ReceiveHandler+0x1a6>
 8003be2:	e01a      	b.n	8003c1a <I2C_MASTER_ReceiveHandler+0x1a6>
       /**************************************************************************************************
          Rx FIFO is enabled, Tx FIFO disabled
       ***************************************************************************************************/
       else
       {
         if (((ptr_runtime->tx_data_index+1) == ptr_runtime->tx_data_count) &&
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	1c5a      	adds	r2, r3, #1
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d109      	bne.n	8003c06 <I2C_MASTER_ReceiveHandler+0x192>
              (ptr_runtime->send_nack == true))
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
       /**************************************************************************************************
          Rx FIFO is enabled, Tx FIFO disabled
       ***************************************************************************************************/
       else
       {
         if (((ptr_runtime->tx_data_index+1) == ptr_runtime->tx_data_count) &&
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d105      	bne.n	8003c06 <I2C_MASTER_ReceiveHandler+0x192>
              (ptr_runtime->send_nack == true))
         {
           XMC_I2C_CH_MasterReceiveNack(handle->channel);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fd fe58 	bl	80018b4 <XMC_I2C_CH_MasterReceiveNack>
 8003c04:	e004      	b.n	8003c10 <I2C_MASTER_ReceiveHandler+0x19c>
         }
         else
         {
           XMC_I2C_CH_MasterReceiveAck(handle->channel);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7fd fe2c 	bl	8001868 <XMC_I2C_CH_MasterReceiveAck>
         }

         ptr_runtime->tx_data_index++;
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	1c5a      	adds	r2, r3, #1
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	60da      	str	r2, [r3, #12]
       }
     } /* end of if(ptr_runtime->rx_data_index < ptr_runtime->rx_data_count) */
      /**************************************************************************************************
        if last byte to receive then disable receive events and jump to callback routine
      ***************************************************************************************************/
     if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	695a      	ldr	r2, [r3, #20]
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d160      	bne.n	8003ce8 <I2C_MASTER_ReceiveHandler+0x274>
     {
       /*Clear both standard receive and alternative receive FIFO events*/
       XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8003c30:	f7ff fae4 	bl	80031fc <XMC_USIC_CH_RXFIFO_DisableEvent>
                                      (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
                                      (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));

       /*Disable both standard receive and alternative receive events*/
       XMC_USIC_CH_DisableEvent(handle->channel,
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8003c3e:	f7ff fa47 	bl	80030d0 <XMC_USIC_CH_DisableEvent>
                                  (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE |
                                  (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

       if (ptr_runtime->bus_acquired == true)
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d04c      	beq.n	8003ce8 <I2C_MASTER_ReceiveHandler+0x274>
       {
         I2C_MASTER_lSendStop_JumpTo_RxCallback(handle);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f84e 	bl	8003cf0 <I2C_MASTER_lSendStop_JumpTo_RxCallback>
 8003c54:	e048      	b.n	8003ce8 <I2C_MASTER_ReceiveHandler+0x274>
/**************************************************************************************************
     Rx FIFO disabled
***************************************************************************************************/
    else
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_I2C_CH_GetReceivedData(handle->channel);
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	685a      	ldr	r2, [r3, #4]
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	18d4      	adds	r4, r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7fd fe4b 	bl	8001900 <XMC_I2C_CH_GetReceivedData>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	7023      	strb	r3, [r4, #0]
      ptr_runtime->rx_data_index++;
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	1c5a      	adds	r2, r3, #1
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	615a      	str	r2, [r3, #20]

      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	695a      	ldr	r2, [r3, #20]
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d221      	bcs.n	8003cc8 <I2C_MASTER_ReceiveHandler+0x254>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	68da      	ldr	r2, [r3, #12]
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d22b      	bcs.n	8003ce8 <I2C_MASTER_ReceiveHandler+0x274>
        {
          /* if receive byte is end of byte and send_nack is true, send to receive Nack otherwise Ack*/
          if (((ptr_runtime->tx_data_index) == (ptr_runtime->tx_data_count - 1)) && (ptr_runtime->send_nack == true))
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	68da      	ldr	r2, [r3, #12]
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d109      	bne.n	8003cb2 <I2C_MASTER_ReceiveHandler+0x23e>
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d105      	bne.n	8003cb2 <I2C_MASTER_ReceiveHandler+0x23e>
          {
            XMC_I2C_CH_MasterReceiveNack(handle->channel);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fd fe02 	bl	80018b4 <XMC_I2C_CH_MasterReceiveNack>
 8003cb0:	e004      	b.n	8003cbc <I2C_MASTER_ReceiveHandler+0x248>
          }
          else
          {
            XMC_I2C_CH_MasterReceiveAck(handle->channel);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7fd fdd6 	bl	8001868 <XMC_I2C_CH_MasterReceiveAck>
          }

          ptr_runtime->tx_data_index++;
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	1c5a      	adds	r2, r3, #1
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	60da      	str	r2, [r3, #12]
 8003cc6:	e00f      	b.n	8003ce8 <I2C_MASTER_ReceiveHandler+0x274>
        }
      }
      else
      {
        /*Disable both standard receive and alternative receive events*/
        XMC_USIC_CH_DisableEvent(handle->channel,
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8003cd2:	f7ff f9fd 	bl	80030d0 <XMC_USIC_CH_DisableEvent>
                                      (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE |
                                      (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));
        if (ptr_runtime->bus_acquired == true)
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d002      	beq.n	8003ce8 <I2C_MASTER_ReceiveHandler+0x274>
        {
          I2C_MASTER_lSendStop_JumpTo_RxCallback(handle);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f804 	bl	8003cf0 <I2C_MASTER_lSendStop_JumpTo_RxCallback>
        }
      }
    }
  } /* end of  if(ptr_runtime->rx_busy == true)*/
}
 8003ce8:	3714      	adds	r7, #20
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd90      	pop	{r4, r7, pc}
 8003cee:	bf00      	nop

08003cf0 <I2C_MASTER_lSendStop_JumpTo_RxCallback>:

/* Function to issue Send Stop command and jump to receive callback routine */
static void I2C_MASTER_lSendStop_JumpTo_RxCallback(I2C_MASTER_t *const handle)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
    I2C_MASTER_RUNTIME_t * ptr_runtime;

    ptr_runtime = handle->runtime;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	60fb      	str	r3, [r7, #12]

    if (ptr_runtime->send_stop == true)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d108      	bne.n	8003d18 <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x28>
    {
      ptr_runtime->bus_acquired = false;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
      XMC_I2C_CH_MasterStop(handle->channel);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7fd fd5c 	bl	80017d0 <XMC_I2C_CH_MasterStop>
    }

    while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
 8003d18:	bf00      	nop
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7ff f9e8 	bl	80030f4 <XMC_USIC_CH_GetTransmitBufferStatus>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b80      	cmp	r3, #128	; 0x80
 8003d28:	d0f7      	beq.n	8003d1a <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x2a>

    /*Reception complete*/
    ptr_runtime->rx_busy = false;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    ptr_runtime->tx_busy = false;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    if (handle->config->rx_cbhandler != NULL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d003      	beq.n	8003d4c <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x5c>
    {
      /*Execute the 'End of reception' callback function*/
      handle->config->rx_cbhandler();
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	4798      	blx	r3
    }
}
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop

08003d54 <I2C_MASTER_ProtocolHandler>:
 * @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 * @return void
 */
void I2C_MASTER_ProtocolHandler(I2C_MASTER_t * const handle)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t psr_status = XMC_I2C_CH_GetStatusFlag(handle->channel);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff fa95 	bl	8003290 <XMC_I2C_CH_GetStatusFlag>
 8003d66:	60f8      	str	r0, [r7, #12]

  /*Check for nack event*/
  if ((handle->config->nack_cbhandler != NULL) && (psr_status & (uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00c      	beq.n	8003d8c <I2C_MASTER_ProtocolHandler+0x38>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f003 0320 	and.w	r3, r3, #32
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d007      	beq.n	8003d8c <I2C_MASTER_ProtocolHandler+0x38>
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	2120      	movs	r1, #32
 8003d80:	f7ff fad4 	bl	800332c <I2C_MASTER_ClearFlag>
    handle->config->nack_cbhandler();
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	4798      	blx	r3
  }

  /*Check for arbitration lost*/
  if ((handle->config->arbitration_cbhandler != NULL) && (psr_status & (uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00c      	beq.n	8003db0 <I2C_MASTER_ProtocolHandler+0x5c>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d007      	beq.n	8003db0 <I2C_MASTER_ProtocolHandler+0x5c>
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	2140      	movs	r1, #64	; 0x40
 8003da4:	f7ff fac2 	bl	800332c <I2C_MASTER_ClearFlag>
    handle->config->arbitration_cbhandler();
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	4798      	blx	r3
  }

  /*Check for error detected*/
  if ((handle->config->error_cbhandler != NULL) && (psr_status & (uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00d      	beq.n	8003dd6 <I2C_MASTER_ProtocolHandler+0x82>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d008      	beq.n	8003dd6 <I2C_MASTER_ProtocolHandler+0x82>
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003dca:	f7ff faaf 	bl	800332c <I2C_MASTER_ClearFlag>
    handle->config->error_cbhandler();
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	4798      	blx	r3
  }
}
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <I2C_MASTER_ReconfigureRxFIFO>:
 *
 * @return void.
 */

static void I2C_MASTER_ReconfigureRxFIFO(const I2C_MASTER_t * const handle, uint32_t data_size)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  uint8_t tx_fifo_size;
  uint8_t rx_fifo_size;
  uint8_t fifo_limit;

  rx_fifo_size = (0x01U << handle->config->rxFIFO_size);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	7f5b      	ldrb	r3, [r3, #29]
 8003dec:	461a      	mov	r2, r3
 8003dee:	2301      	movs	r3, #1
 8003df0:	4093      	lsls	r3, r2
 8003df2:	73bb      	strb	r3, [r7, #14]

  if ((handle->config->txFIFO_size > 0))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	7f1b      	ldrb	r3, [r3, #28]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d007      	beq.n	8003e0e <I2C_MASTER_ReconfigureRxFIFO+0x32>
  {
    tx_fifo_size = (0x01U << handle->config->txFIFO_size);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	7f1b      	ldrb	r3, [r3, #28]
 8003e04:	461a      	mov	r2, r3
 8003e06:	2301      	movs	r3, #1
 8003e08:	4093      	lsls	r3, r2
 8003e0a:	73fb      	strb	r3, [r7, #15]
 8003e0c:	e001      	b.n	8003e12 <I2C_MASTER_ReconfigureRxFIFO+0x36>
  }
  else
  {
    tx_fifo_size = 1;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	73fb      	strb	r3, [r7, #15]
  }

  fifo_limit = FIFO_MIN(data_size,FIFO_MIN(tx_fifo_size,rx_fifo_size));
 8003e12:	7bba      	ldrb	r2, [r7, #14]
 8003e14:	7bfb      	ldrb	r3, [r7, #15]
 8003e16:	4293      	cmp	r3, r2
 8003e18:	bf28      	it	cs
 8003e1a:	4613      	movcs	r3, r2
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	461a      	mov	r2, r3
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	4293      	cmp	r3, r2
 8003e24:	bf28      	it	cs
 8003e26:	4613      	movcs	r3, r2
 8003e28:	737b      	strb	r3, [r7, #13]

  /*Set the limit value*/
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, handle->config->rxFIFO_size, (uint8_t)(fifo_limit - 1));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6819      	ldr	r1, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	7f5a      	ldrb	r2, [r3, #29]
 8003e34:	7b7b      	ldrb	r3, [r7, #13]
 8003e36:	3b01      	subs	r3, #1
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	4608      	mov	r0, r1
 8003e3c:	4611      	mov	r1, r2
 8003e3e:	461a      	mov	r2, r3
 8003e40:	f7fd ff44 	bl	8001ccc <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
}
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop

08003e4c <I2C_MASTER_AbortTransmit>:
 * If there is a transmission in progress, it will be stopped. If transmit FIFO is used,
 * the existing data will be flushed. After the transmission is stopped, user can start
 * a new transmission without delay.
 ******************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_AbortTransmit(const I2C_MASTER_t *const handle)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
    handle->runtime->tx_busy = false;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    handle->runtime->tx_data = NULL;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	2200      	movs	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]
    handle->runtime->bus_acquired = false;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    /*Disable the transmit interrupts*/
    if (handle->config->txFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	7f1b      	ldrb	r3, [r3, #28]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00c      	beq.n	8003e94 <I2C_MASTER_AbortTransmit+0x48>
    {
      /*Disable the transmit FIFO event*/
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003e84:	f7ff f95a 	bl	800313c <XMC_USIC_CH_TXFIFO_DisableEvent>
      XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7ff f969 	bl	8003164 <XMC_USIC_CH_TXFIFO_Flush>
 8003e92:	e006      	b.n	8003ea2 <I2C_MASTER_AbortTransmit+0x56>
    }
    else
    {
      /*Disable the standard transmit event*/
      XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003e9e:	f7ff f917 	bl	80030d0 <XMC_USIC_CH_DisableEvent>
    }
    XMC_I2C_CH_DisableEvent(handle->channel,((uint32_t)XMC_I2C_CH_EVENT_ACK ));
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003eac:	f7fd fd5e 	bl	800196c <XMC_I2C_CH_DisableEvent>
	
	return(I2C_MASTER_STATUS_SUCCESS);	
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop

08003ebc <I2C_MASTER_AbortReceive>:
 * is active, user will not be able to place a new receive request till the active
 * reception is complete. This API can stop the progressing reception to make
 * a new receive request.
 ******************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_AbortReceive(const I2C_MASTER_t *const handle)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
    /*Reset the user buffer pointer to null*/
    handle->runtime->rx_busy = false;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    handle->runtime->tx_busy = false;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    handle->runtime->rx_data = NULL;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	2200      	movs	r2, #0
 8003ede:	605a      	str	r2, [r3, #4]

    handle->runtime->bus_acquired = false;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    /*Disable the receive interrupts*/
    if (handle->config->rxFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	7f5b      	ldrb	r3, [r3, #29]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d007      	beq.n	8003f04 <I2C_MASTER_AbortReceive+0x48>
    {
      XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8003efe:	f7ff f97d 	bl	80031fc <XMC_USIC_CH_RXFIFO_DisableEvent>
 8003f02:	e006      	b.n	8003f12 <I2C_MASTER_AbortReceive+0x56>
                (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
                           (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
    }
    else
    {
      XMC_USIC_CH_DisableEvent(handle->channel,
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8003f0e:	f7ff f8df 	bl	80030d0 <XMC_USIC_CH_DisableEvent>
                (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE |
                (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));
    }
    XMC_I2C_CH_DisableEvent(handle->channel,((uint32_t)XMC_I2C_CH_EVENT_ACK ));
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003f1c:	f7fd fd26 	bl	800196c <XMC_I2C_CH_DisableEvent>
	
	return(I2C_MASTER_STATUS_SUCCESS);
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop

08003f2c <NVIC_GetPriorityGrouping>:
  The function reads the priority grouping field from the NVIC Interrupt Controller.

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
 8003f30:	4b04      	ldr	r3, [pc, #16]	; (8003f44 <NVIC_GetPriorityGrouping+0x18>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f38:	0a1b      	lsrs	r3, r3, #8
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr
 8003f44:	e000ed00 	.word	0xe000ed00

08003f48 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	4603      	mov	r3, r0
 8003f50:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8003f52:	4908      	ldr	r1, [pc, #32]	; (8003f74 <NVIC_EnableIRQ+0x2c>)
 8003f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f58:	095b      	lsrs	r3, r3, #5
 8003f5a:	79fa      	ldrb	r2, [r7, #7]
 8003f5c:	f002 021f 	and.w	r2, r2, #31
 8003f60:	2001      	movs	r0, #1
 8003f62:	fa00 f202 	lsl.w	r2, r0, r2
 8003f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	e000e100 	.word	0xe000e100

08003f78 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	4603      	mov	r3, r0
 8003f80:	6039      	str	r1, [r7, #0]
 8003f82:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8003f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	da0b      	bge.n	8003fa4 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8003f8c:	490d      	ldr	r1, [pc, #52]	; (8003fc4 <NVIC_SetPriority+0x4c>)
 8003f8e:	79fb      	ldrb	r3, [r7, #7]
 8003f90:	f003 030f 	and.w	r3, r3, #15
 8003f94:	3b04      	subs	r3, #4
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	b2d2      	uxtb	r2, r2
 8003f9a:	0092      	lsls	r2, r2, #2
 8003f9c:	b2d2      	uxtb	r2, r2
 8003f9e:	440b      	add	r3, r1
 8003fa0:	761a      	strb	r2, [r3, #24]
 8003fa2:	e009      	b.n	8003fb8 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8003fa4:	4908      	ldr	r1, [pc, #32]	; (8003fc8 <NVIC_SetPriority+0x50>)
 8003fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	b2d2      	uxtb	r2, r2
 8003fae:	0092      	lsls	r2, r2, #2
 8003fb0:	b2d2      	uxtb	r2, r2
 8003fb2:	440b      	add	r3, r1
 8003fb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	e000ed00 	.word	0xe000ed00
 8003fc8:	e000e100 	.word	0xe000e100

08003fcc <NVIC_EncodePriority>:
    \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
    \param [in]       SubPriority  Subpriority value (starting from 0).
    \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b089      	sub	sp, #36	; 0x24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f003 0307 	and.w	r3, r3, #7
 8003fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	f1c3 0307 	rsb	r3, r3, #7
 8003fe6:	2b06      	cmp	r3, #6
 8003fe8:	bf28      	it	cs
 8003fea:	2306      	movcs	r3, #6
 8003fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	3306      	adds	r3, #6
 8003ff2:	2b06      	cmp	r3, #6
 8003ff4:	d902      	bls.n	8003ffc <NVIC_EncodePriority+0x30>
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	e000      	b.n	8003ffe <NVIC_EncodePriority+0x32>
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	2201      	movs	r2, #1
 8004004:	fa02 f303 	lsl.w	r3, r2, r3
 8004008:	3b01      	subs	r3, #1
 800400a:	461a      	mov	r2, r3
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	401a      	ands	r2, r3
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	409a      	lsls	r2, r3
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	2101      	movs	r1, #1
 8004018:	fa01 f303 	lsl.w	r3, r1, r3
 800401c:	3b01      	subs	r3, #1
 800401e:	4619      	mov	r1, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
 8004024:	4313      	orrs	r3, r2
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
         );
}
 8004026:	4618      	mov	r0, r3
 8004028:	3724      	adds	r7, #36	; 0x24
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop

08004034 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	460b      	mov	r3, r1
 800403e:	70fb      	strb	r3, [r7, #3]
 8004040:	4613      	mov	r3, r2
 8004042:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8004044:	78f8      	ldrb	r0, [r7, #3]
 8004046:	78fb      	ldrb	r3, [r7, #3]
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	3306      	adds	r3, #6
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8004056:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8004058:	431a      	orrs	r2, r3
 800405a:	6879      	ldr	r1, [r7, #4]
 800405c:	1d83      	adds	r3, r0, #6
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	440b      	add	r3, r1
 8004062:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop

08004070 <XMC_USIC_CH_TXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  channel->TBCTR |= event;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	431a      	orrs	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	431a      	orrs	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	460b      	mov	r3, r1
 80040c2:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c8:	f023 020f 	bic.w	r2, r3, #15
 80040cc:	78fb      	ldrb	r3, [r7, #3]
 80040ce:	431a      	orrs	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop

080040e0 <XMC_I2C_CH_Start>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetMode()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_Start(XMC_USIC_CH_t *const channel)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_I2C);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	2104      	movs	r1, #4
 80040ec:	f7ff ffe4 	bl	80040b8 <XMC_USIC_CH_SetMode>
}
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop

080040f8 <I2C_MASTER_0_init>:
  .config = &I2C_MASTER_0_config,
  .runtime = &I2C_MASTER_0_runtime
};

void I2C_MASTER_0_init()
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b088      	sub	sp, #32
 80040fc:	af00      	add	r7, sp, #0
  const uint32_t tx_fifo_events = (uint32_t)(XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 80040fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004102:	61fb      	str	r3, [r7, #28]
  const uint32_t rx_fifo_events = (uint32_t)(XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE | XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD);
 8004104:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8004108:	61bb      	str	r3, [r7, #24]
  const XMC_GPIO_CONFIG_t I2C_MASTER_0_sda_pin_config   = 
 800410a:	4a37      	ldr	r2, [pc, #220]	; (80041e8 <I2C_MASTER_0_init+0xf0>)
 800410c:	f107 030c 	add.w	r3, r7, #12
 8004110:	ca07      	ldmia	r2, {r0, r1, r2}
 8004112:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  { 
    .mode = XMC_GPIO_MODE_OUTPUT_OPEN_DRAIN_ALT1,
    .output_level   = XMC_GPIO_OUTPUT_LEVEL_HIGH,
    .output_strength = XMC_GPIO_OUTPUT_STRENGTH_STRONG_SHARP_EDGE
  }; 
  const XMC_GPIO_CONFIG_t I2C_MASTER_0_scl_pin_config   =
 8004116:	4a34      	ldr	r2, [pc, #208]	; (80041e8 <I2C_MASTER_0_init+0xf0>)
 8004118:	463b      	mov	r3, r7
 800411a:	ca07      	ldmia	r2, {r0, r1, r2}
 800411c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    .mode = XMC_GPIO_MODE_OUTPUT_OPEN_DRAIN_ALT1,
    .output_level   = XMC_GPIO_OUTPUT_LEVEL_HIGH,
    .output_strength = XMC_GPIO_OUTPUT_STRENGTH_STRONG_SHARP_EDGE
  }; 
 
  XMC_I2C_CH_Init(XMC_I2C2_CH0, &I2C_MASTER_0_channel_config);
 8004120:	4832      	ldr	r0, [pc, #200]	; (80041ec <I2C_MASTER_0_init+0xf4>)
 8004122:	4933      	ldr	r1, [pc, #204]	; (80041f0 <I2C_MASTER_0_init+0xf8>)
 8004124:	f7fd fa74 	bl	8001610 <XMC_I2C_CH_Init>

  XMC_USIC_CH_SetInputSource(XMC_I2C2_CH0, XMC_USIC_CH_INPUT_DX0, 1);
 8004128:	4830      	ldr	r0, [pc, #192]	; (80041ec <I2C_MASTER_0_init+0xf4>)
 800412a:	2100      	movs	r1, #0
 800412c:	2201      	movs	r2, #1
 800412e:	f7ff ff81 	bl	8004034 <XMC_USIC_CH_SetInputSource>
  XMC_USIC_CH_SetInputSource(XMC_I2C2_CH0, XMC_USIC_CH_INPUT_DX1, 0);
 8004132:	482e      	ldr	r0, [pc, #184]	; (80041ec <I2C_MASTER_0_init+0xf4>)
 8004134:	2101      	movs	r1, #1
 8004136:	2200      	movs	r2, #0
 8004138:	f7ff ff7c 	bl	8004034 <XMC_USIC_CH_SetInputSource>



  /* configure i2c tx fifo */
  XMC_USIC_CH_TXFIFO_Configure(XMC_I2C2_CH0,
 800413c:	482b      	ldr	r0, [pc, #172]	; (80041ec <I2C_MASTER_0_init+0xf4>)
 800413e:	2110      	movs	r1, #16
 8004140:	2204      	movs	r2, #4
 8004142:	2301      	movs	r3, #1
 8004144:	f7fd fd70 	bl	8001c28 <XMC_USIC_CH_TXFIFO_Configure>
        					   16,
							   XMC_USIC_CH_FIFO_SIZE_16WORDS,
							   (uint32_t)1);
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_I2C2_CH0, 
 8004148:	4828      	ldr	r0, [pc, #160]	; (80041ec <I2C_MASTER_0_init+0xf4>)
 800414a:	2110      	movs	r1, #16
 800414c:	2203      	movs	r2, #3
 800414e:	f7fd fdfb 	bl	8001d48 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>
  											 XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
    										 ((uint32_t)3));
  XMC_USIC_CH_TXFIFO_EnableEvent(XMC_I2C2_CH0, tx_fifo_events);
 8004152:	4826      	ldr	r0, [pc, #152]	; (80041ec <I2C_MASTER_0_init+0xf4>)
 8004154:	69f9      	ldr	r1, [r7, #28]
 8004156:	f7ff ff8b 	bl	8004070 <XMC_USIC_CH_TXFIFO_EnableEvent>
  /* configure i2c rx fifo */
  XMC_USIC_CH_RXFIFO_Configure(XMC_I2C2_CH0,
 800415a:	4824      	ldr	r0, [pc, #144]	; (80041ec <I2C_MASTER_0_init+0xf4>)
 800415c:	2100      	movs	r1, #0
 800415e:	2204      	movs	r2, #4
 8004160:	230f      	movs	r3, #15
 8004162:	f7fd fd89 	bl	8001c78 <XMC_USIC_CH_RXFIFO_Configure>
        					   0,
							   XMC_USIC_CH_FIFO_SIZE_16WORDS,
							    (uint32_t)(15));
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_I2C2_CH0, 
 8004166:	4821      	ldr	r0, [pc, #132]	; (80041ec <I2C_MASTER_0_init+0xf4>)
 8004168:	2110      	movs	r1, #16
 800416a:	2202      	movs	r2, #2
 800416c:	f7fd fe0a 	bl	8001d84 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
  											 XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
     										 ((uint32_t)0x2));
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_I2C2_CH0, 
 8004170:	481e      	ldr	r0, [pc, #120]	; (80041ec <I2C_MASTER_0_init+0xf4>)
 8004172:	2113      	movs	r1, #19
 8004174:	2202      	movs	r2, #2
 8004176:	f7fd fe05 	bl	8001d84 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
  											 XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE,
     										 ((uint32_t)0x2));
  XMC_USIC_CH_RXFIFO_EnableEvent(XMC_I2C2_CH0, rx_fifo_events);
 800417a:	481c      	ldr	r0, [pc, #112]	; (80041ec <I2C_MASTER_0_init+0xf4>)
 800417c:	69b9      	ldr	r1, [r7, #24]
 800417e:	f7ff ff89 	bl	8004094 <XMC_USIC_CH_RXFIFO_EnableEvent>
  XMC_I2C_CH_Start(XMC_I2C2_CH0);
 8004182:	481a      	ldr	r0, [pc, #104]	; (80041ec <I2C_MASTER_0_init+0xf4>)
 8004184:	f7ff ffac 	bl	80040e0 <XMC_I2C_CH_Start>

  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT5_BASE, (uint8_t)0, &I2C_MASTER_0_sda_pin_config);
 8004188:	f107 030c 	add.w	r3, r7, #12
 800418c:	4819      	ldr	r0, [pc, #100]	; (80041f4 <I2C_MASTER_0_init+0xfc>)
 800418e:	2100      	movs	r1, #0
 8004190:	461a      	mov	r2, r3
 8004192:	f7fc fb31 	bl	80007f8 <XMC_GPIO_Init>
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT5_BASE, (uint8_t)2, &I2C_MASTER_0_scl_pin_config);
 8004196:	463b      	mov	r3, r7
 8004198:	4816      	ldr	r0, [pc, #88]	; (80041f4 <I2C_MASTER_0_init+0xfc>)
 800419a:	2102      	movs	r1, #2
 800419c:	461a      	mov	r2, r3
 800419e:	f7fc fb2b 	bl	80007f8 <XMC_GPIO_Init>

  NVIC_SetPriority((IRQn_Type)99, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),63,0));
 80041a2:	f7ff fec3 	bl	8003f2c <NVIC_GetPriorityGrouping>
 80041a6:	4603      	mov	r3, r0
 80041a8:	4618      	mov	r0, r3
 80041aa:	213f      	movs	r1, #63	; 0x3f
 80041ac:	2200      	movs	r2, #0
 80041ae:	f7ff ff0d 	bl	8003fcc <NVIC_EncodePriority>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2063      	movs	r0, #99	; 0x63
 80041b6:	4619      	mov	r1, r3
 80041b8:	f7ff fede 	bl	8003f78 <NVIC_SetPriority>
  NVIC_SetPriority((IRQn_Type)98, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),63,0));
 80041bc:	f7ff feb6 	bl	8003f2c <NVIC_GetPriorityGrouping>
 80041c0:	4603      	mov	r3, r0
 80041c2:	4618      	mov	r0, r3
 80041c4:	213f      	movs	r1, #63	; 0x3f
 80041c6:	2200      	movs	r2, #0
 80041c8:	f7ff ff00 	bl	8003fcc <NVIC_EncodePriority>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2062      	movs	r0, #98	; 0x62
 80041d0:	4619      	mov	r1, r3
 80041d2:	f7ff fed1 	bl	8003f78 <NVIC_SetPriority>
  NVIC_EnableIRQ((IRQn_Type)99);
 80041d6:	2063      	movs	r0, #99	; 0x63
 80041d8:	f7ff feb6 	bl	8003f48 <NVIC_EnableIRQ>
  NVIC_EnableIRQ((IRQn_Type)98);
 80041dc:	2062      	movs	r0, #98	; 0x62
 80041de:	f7ff feb3 	bl	8003f48 <NVIC_EnableIRQ>
}
 80041e2:	3720      	adds	r7, #32
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	08007bd0 	.word	0x08007bd0
 80041ec:	48024000 	.word	0x48024000
 80041f0:	08007ba8 	.word	0x08007ba8
 80041f4:	48028500 	.word	0x48028500

080041f8 <USIC2_3_IRQHandler>:
/*Interrupt handlers*/
/*Transmit ISR*/
void I2C_MASTER_0_tx_handler()
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
  I2C_MASTER_TransmitHandler(&I2C_MASTER_0);
 80041fc:	4801      	ldr	r0, [pc, #4]	; (8004204 <USIC2_3_IRQHandler+0xc>)
 80041fe:	f7ff f90f 	bl	8003420 <I2C_MASTER_TransmitHandler>
}
 8004202:	bd80      	pop	{r7, pc}
 8004204:	2000007c 	.word	0x2000007c

08004208 <USIC2_2_IRQHandler>:

/*Receive ISR*/
void I2C_MASTER_0_rx_handler()
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
  I2C_MASTER_ReceiveHandler(&I2C_MASTER_0);
 800420c:	4801      	ldr	r0, [pc, #4]	; (8004214 <USIC2_2_IRQHandler+0xc>)
 800420e:	f7ff fc31 	bl	8003a74 <I2C_MASTER_ReceiveHandler>
}
 8004212:	bd80      	pop	{r7, pc}
 8004214:	2000007c 	.word	0x2000007c

08004218 <NVIC_GetPriorityGrouping>:
  The function reads the priority grouping field from the NVIC Interrupt Controller.

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
 800421c:	4b04      	ldr	r3, [pc, #16]	; (8004230 <NVIC_GetPriorityGrouping+0x18>)
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004224:	0a1b      	lsrs	r3, r3, #8
}
 8004226:	4618      	mov	r0, r3
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	e000ed00 	.word	0xe000ed00

08004234 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	4603      	mov	r3, r0
 800423c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800423e:	4908      	ldr	r1, [pc, #32]	; (8004260 <NVIC_EnableIRQ+0x2c>)
 8004240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004244:	095b      	lsrs	r3, r3, #5
 8004246:	79fa      	ldrb	r2, [r7, #7]
 8004248:	f002 021f 	and.w	r2, r2, #31
 800424c:	2001      	movs	r0, #1
 800424e:	fa00 f202 	lsl.w	r2, r0, r2
 8004252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	e000e100 	.word	0xe000e100

08004264 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	4603      	mov	r3, r0
 800426c:	6039      	str	r1, [r7, #0]
 800426e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8004270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004274:	2b00      	cmp	r3, #0
 8004276:	da0b      	bge.n	8004290 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8004278:	490d      	ldr	r1, [pc, #52]	; (80042b0 <NVIC_SetPriority+0x4c>)
 800427a:	79fb      	ldrb	r3, [r7, #7]
 800427c:	f003 030f 	and.w	r3, r3, #15
 8004280:	3b04      	subs	r3, #4
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	b2d2      	uxtb	r2, r2
 8004286:	0092      	lsls	r2, r2, #2
 8004288:	b2d2      	uxtb	r2, r2
 800428a:	440b      	add	r3, r1
 800428c:	761a      	strb	r2, [r3, #24]
 800428e:	e009      	b.n	80042a4 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8004290:	4908      	ldr	r1, [pc, #32]	; (80042b4 <NVIC_SetPriority+0x50>)
 8004292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004296:	683a      	ldr	r2, [r7, #0]
 8004298:	b2d2      	uxtb	r2, r2
 800429a:	0092      	lsls	r2, r2, #2
 800429c:	b2d2      	uxtb	r2, r2
 800429e:	440b      	add	r3, r1
 80042a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	e000ed00 	.word	0xe000ed00
 80042b4:	e000e100 	.word	0xe000e100

080042b8 <NVIC_EncodePriority>:
    \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
    \param [in]       SubPriority  Subpriority value (starting from 0).
    \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b089      	sub	sp, #36	; 0x24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f003 0307 	and.w	r3, r3, #7
 80042ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	f1c3 0307 	rsb	r3, r3, #7
 80042d2:	2b06      	cmp	r3, #6
 80042d4:	bf28      	it	cs
 80042d6:	2306      	movcs	r3, #6
 80042d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	3306      	adds	r3, #6
 80042de:	2b06      	cmp	r3, #6
 80042e0:	d902      	bls.n	80042e8 <NVIC_EncodePriority+0x30>
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	3b01      	subs	r3, #1
 80042e6:	e000      	b.n	80042ea <NVIC_EncodePriority+0x32>
 80042e8:	2300      	movs	r3, #0
 80042ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	2201      	movs	r2, #1
 80042f0:	fa02 f303 	lsl.w	r3, r2, r3
 80042f4:	3b01      	subs	r3, #1
 80042f6:	461a      	mov	r2, r3
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	401a      	ands	r2, r3
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	409a      	lsls	r2, r3
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	2101      	movs	r1, #1
 8004304:	fa01 f303 	lsl.w	r3, r1, r3
 8004308:	3b01      	subs	r3, #1
 800430a:	4619      	mov	r1, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
 8004310:	4313      	orrs	r3, r2
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
         );
}
 8004312:	4618      	mov	r0, r3
 8004314:	3724      	adds	r7, #36	; 0x24
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop

08004320 <GLOBAL_SCU_XMC4_Init>:

/*  Function to configure SCU Interrupts based on user configuration.
 * 
 */
GLOBAL_SCU_XMC4_STATUS_t GLOBAL_SCU_XMC4_Init(GLOBAL_SCU_XMC4_t*const handle)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  GLOBAL_SCU_XMC4_STATUS_t initstatus;

  XMC_ASSERT("GLOBAL_SCU_XMC4_Init:NULL Handle", (handle != NULL));

  initstatus = (GLOBAL_SCU_XMC4_STATUS_t)CPU_CTRL_XMC4_Init(CPU_CTRL_HANDLE);
 8004328:	481a      	ldr	r0, [pc, #104]	; (8004394 <GLOBAL_SCU_XMC4_Init+0x74>)
 800432a:	f000 f921 	bl	8004570 <CPU_CTRL_XMC4_Init>
 800432e:	4603      	mov	r3, r0
 8004330:	73fb      	strb	r3, [r7, #15]

  if (initstatus == GLOBAL_SCU_XMC4_STATUS_SUCCESS)
 8004332:	7bfb      	ldrb	r3, [r7, #15]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d126      	bne.n	8004386 <GLOBAL_SCU_XMC4_Init+0x66>
  {
	 if (handle->initialized == false) 
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	791b      	ldrb	r3, [r3, #4]
 800433c:	f083 0301 	eor.w	r3, r3, #1
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d021      	beq.n	800438a <GLOBAL_SCU_XMC4_Init+0x6a>
	 {
       NVIC_SetPriority((IRQn_Type)0,
 8004346:	f7ff ff67 	bl	8004218 <NVIC_GetPriorityGrouping>
 800434a:	4601      	mov	r1, r0
	                    NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
	                    (uint32_t)(handle->config->priority),
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	781b      	ldrb	r3, [r3, #0]

  if (initstatus == GLOBAL_SCU_XMC4_STATUS_SUCCESS)
  {
	 if (handle->initialized == false) 
	 {
       NVIC_SetPriority((IRQn_Type)0,
 8004352:	461a      	mov	r2, r3
	                    NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
	                    (uint32_t)(handle->config->priority),
	                    (uint32_t)(handle->config->subpriority)));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	785b      	ldrb	r3, [r3, #1]

  if (initstatus == GLOBAL_SCU_XMC4_STATUS_SUCCESS)
  {
	 if (handle->initialized == false) 
	 {
       NVIC_SetPriority((IRQn_Type)0,
 800435a:	4608      	mov	r0, r1
 800435c:	4611      	mov	r1, r2
 800435e:	461a      	mov	r2, r3
 8004360:	f7ff ffaa 	bl	80042b8 <NVIC_EncodePriority>
 8004364:	4603      	mov	r3, r0
 8004366:	2000      	movs	r0, #0
 8004368:	4619      	mov	r1, r3
 800436a:	f7ff ff7b 	bl	8004264 <NVIC_SetPriority>
	                    NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
	                    (uint32_t)(handle->config->priority),
	                    (uint32_t)(handle->config->subpriority)));
       if (handle->config->enable_at_init == true)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	789b      	ldrb	r3, [r3, #2]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d002      	beq.n	800437e <GLOBAL_SCU_XMC4_Init+0x5e>
	   {
	     NVIC_EnableIRQ((IRQn_Type)0);
 8004378:	2000      	movs	r0, #0
 800437a:	f7ff ff5b 	bl	8004234 <NVIC_EnableIRQ>
       }
	   handle->initialized = true;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	711a      	strb	r2, [r3, #4]
 8004384:	e001      	b.n	800438a <GLOBAL_SCU_XMC4_Init+0x6a>
	 }
  }
  else
  {
    initstatus = GLOBAL_SCU_XMC4_STATUS_FAILURE;
 8004386:	2301      	movs	r3, #1
 8004388:	73fb      	strb	r3, [r7, #15]
  }

  return (initstatus);
 800438a:	7bfb      	ldrb	r3, [r7, #15]
}
 800438c:	4618      	mov	r0, r3
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	20000104 	.word	0x20000104

08004398 <GLOBAL_SCU_XMC4_RegisterCallback>:
/*  Utility function to register Event Handler for a given event.
	* 
 */
GLOBAL_SCU_XMC4_STATUS_t GLOBAL_SCU_XMC4_RegisterCallback(const GLOBAL_SCU_XMC4_EVENT_t event,
                                                          const GLOBAL_SCU_XMC4_EVENT_HANDLER_t handler)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  GLOBAL_SCU_XMC4_STATUS_t status;

  XMC_ASSERT("GLOBAL_SCU_XMC4_RegisterCallback: Invalid event", (GLOBAL_SCU_XMC4_CHECK_EVENT(event)));
  XMC_ASSERT("GLOBAL_SCU_XMC4_RegisterCallback: NULL handle", (handler != NULL));
  
  status = (GLOBAL_SCU_XMC4_STATUS_t)XMC_SCU_INTERRUPT_SetEventHandler(event, handler);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	6839      	ldr	r1, [r7, #0]
 80043a6:	f7fc ff81 	bl	80012ac <XMC_SCU_INTERRUPT_SetEventHandler>
 80043aa:	4603      	mov	r3, r0
 80043ac:	73fb      	strb	r3, [r7, #15]

  return (status);
 80043ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <SCU_0_IRQHandler>:

/*  SCU Interrupt Handler.
 * 
 */
void SCU_0_IRQHandler(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	af00      	add	r7, sp, #0
  XMC_SCU_IRQHandler(0);
 80043bc:	2000      	movs	r0, #0
 80043be:	f7fc ffa1 	bl	8001304 <XMC_SCU_IRQHandler>
}     
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_CHECK_MODULE_PTR(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	60da      	str	r2, [r3, #12]
}
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop

080043e4 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	7b5b      	ldrb	r3, [r3, #13]
 80043f0:	f083 0301 	eor.w	r3, r3, #1
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00f      	beq.n	800441a <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	689a      	ldr	r2, [r3, #8]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	7b1b      	ldrb	r3, [r3, #12]
 8004402:	4610      	mov	r0, r2
 8004404:	4619      	mov	r1, r3
 8004406:	f7fc ffe5 	bl	80013d4 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff ffd8 	bl	80043c4 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3708      	adds	r7, #8
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <XMC_VADC_GLOBAL_DisablePostCalibration>:
 * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
 * None
 */

__STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uint32_t group_number)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_number));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	3310      	adds	r3, #16
 8004438:	4619      	mov	r1, r3
 800443a:	2301      	movs	r3, #1
 800443c:	408b      	lsls	r3, r1
 800443e:	431a      	orrs	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <GLOBAL_ADC_Init>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * This function initializes all instances of the ADC Global APP and low level app.
 */
GLOBAL_ADC_STATUS_t GLOBAL_ADC_Init(GLOBAL_ADC_t *const handle_ptr)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL))
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  uint32_t group_index;
#endif

  if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	7e1b      	ldrb	r3, [r3, #24]
 800445c:	2b02      	cmp	r3, #2
 800445e:	d149      	bne.n	80044f4 <GLOBAL_ADC_Init+0xa4>
  {  
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	695a      	ldr	r2, [r3, #20]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	4610      	mov	r0, r2
 800446a:	4619      	mov	r1, r3
 800446c:	f7fd fce4 	bl	8001e38 <XMC_VADC_GLOBAL_Init>

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 8004470:	2300      	movs	r3, #0
 8004472:	60fb      	str	r3, [r7, #12]
 8004474:	e02f      	b.n	80044d6 <GLOBAL_ADC_Init+0x86>
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800447e:	6819      	ldr	r1, [r3, #0]
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	4608      	mov	r0, r1
 800448c:	4619      	mov	r1, r3
 800448e:	f7fd fd2d 	bl	8001eec <XMC_VADC_GROUP_Init>
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);

      /* Switch on the converter of the Group[group_index]*/
      XMC_VADC_GROUP_SetPowerMode(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4618      	mov	r0, r3
 800449e:	2103      	movs	r1, #3
 80044a0:	f7fd fdb4 	bl	800200c <XMC_VADC_GROUP_SetPowerMode>
                                  XMC_VADC_GROUP_POWERMODE_NORMAL);

      /* Disable the post calibration option for the respective group*/
      if ((bool)false == handle_ptr->group_ptrs_array[group_index]->post_calibration)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044ac:	7a1b      	ldrb	r3, [r3, #8]
 80044ae:	f083 0301 	eor.w	r3, r3, #1
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d005      	beq.n	80044c4 <GLOBAL_ADC_Init+0x74>
      {
        XMC_VADC_GLOBAL_DisablePostCalibration(handle_ptr->module_ptr,group_index);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	4618      	mov	r0, r3
 80044be:	68f9      	ldr	r1, [r7, #12]
 80044c0:	f7ff ffb0 	bl	8004424 <XMC_VADC_GLOBAL_DisablePostCalibration>

#if(XMC_VADC_SHS_AVAILABLE == 1U)
      XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t)group_index);
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044cc:	2200      	movs	r2, #0
 80044ce:	725a      	strb	r2, [r3, #9]
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	3301      	adds	r3, #1
 80044d4:	60fb      	str	r3, [r7, #12]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2b03      	cmp	r3, #3
 80044da:	d9cc      	bls.n	8004476 <GLOBAL_ADC_Init+0x26>
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
    }
#endif /* _XMC_VADC_GROUP_AVAILABLE_ */
    if((bool)true == handle_ptr->enable_startup_calibration)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	7e5b      	ldrb	r3, [r3, #25]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d004      	beq.n	80044ee <GLOBAL_ADC_Init+0x9e>
    {
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7fd fccf 	bl	8001e8c <XMC_VADC_GLOBAL_StartupCalibration>
    }
    handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	7e1b      	ldrb	r3, [r3, #24]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, handler->gpio_config);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6859      	ldr	r1, [r3, #4]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	7a1a      	ldrb	r2, [r3, #8]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4608      	mov	r0, r1
 8004516:	4611      	mov	r1, r2
 8004518:	461a      	mov	r2, r3
 800451a:	f7fc f96d 	bl	80007f8 <XMC_GPIO_Init>

  return (DIGITAL_IO_STATUS_OK);
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3708      	adds	r7, #8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f003 0307 	and.w	r3, r3, #7
 8004536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004538:	4b0c      	ldr	r3, [pc, #48]	; (800456c <NVIC_SetPriorityGrouping+0x44>)
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004544:	4013      	ands	r3, r2
 8004546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 8004550:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004558:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800455a:	4a04      	ldr	r2, [pc, #16]	; (800456c <NVIC_SetPriorityGrouping+0x44>)
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	60d3      	str	r3, [r2, #12]
}
 8004560:	3714      	adds	r7, #20
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	e000ed00 	.word	0xe000ed00

08004570 <CPU_CTRL_XMC4_Init>:
/*
 * API to initialize the CPU_CTRL_XMC4 APP
 */

CPU_CTRL_XMC4_STATUS_t CPU_CTRL_XMC4_Init(CPU_CTRL_XMC4_t *const handler)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  CPU_CTRL_XMC4_STATUS_t status;

  if(handler->initialized == false)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	791b      	ldrb	r3, [r3, #4]
 800457c:	f083 0301 	eor.w	r3, r3, #1
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00b      	beq.n	800459e <CPU_CTRL_XMC4_Init+0x2e>
  {
    NVIC_SetPriorityGrouping(handler->config->prigroup);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	4618      	mov	r0, r3
 800458e:	f7ff ffcb 	bl	8004528 <NVIC_SetPriorityGrouping>

    handler->initialized = true;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	711a      	strb	r2, [r3, #4]

    status = CPU_CTRL_XMC4_STATUS_SUCCESS;
 8004598:	2300      	movs	r3, #0
 800459a:	73fb      	strb	r3, [r7, #15]
 800459c:	e001      	b.n	80045a2 <CPU_CTRL_XMC4_Init+0x32>
  }
  else
  {
    /* returning SUCCESS if APP is already initialized */
    status = CPU_CTRL_XMC4_STATUS_SUCCESS;
 800459e:	2300      	movs	r3, #0
 80045a0:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 80045a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <OSCHP_GetFrequency>:
  return (version);
}

/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 80045b0:	4b02      	ldr	r3, [pc, #8]	; (80045bc <OSCHP_GetFrequency+0x10>)
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr
 80045bc:	00b71b00 	.word	0x00b71b00

080045c0 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	af00      	add	r7, sp, #0

  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 80045c4:	480c      	ldr	r0, [pc, #48]	; (80045f8 <SystemCoreClockSetup+0x38>)
 80045c6:	f7fc fa9d 	bl	8000b04 <XMC_SCU_CLOCK_Init>
  /* RTC source clock*/
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 80045ca:	2000      	movs	r0, #0
 80045cc:	f7fc fb82 	bl	8000cd4 <XMC_SCU_HIB_SetRtcClockSource>

  /* USB/SDMMC source clock*/
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 80045d0:	2000      	movs	r0, #0
 80045d2:	f7fc fb37 	bl	8000c44 <XMC_SCU_CLOCK_SetUsbClockSource>
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 80045d6:	2004      	movs	r0, #4
 80045d8:	f7fc fc08 	bl	8000dec <XMC_SCU_CLOCK_SetUsbClockDivider>

  XMC_SCU_CLOCK_StartUsbPll(2U, 64U);
 80045dc:	2002      	movs	r0, #2
 80045de:	2140      	movs	r1, #64	; 0x40
 80045e0:	f7fc fc50 	bl	8000e84 <XMC_SCU_CLOCK_StartUsbPll>

  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 80045e4:	2000      	movs	r0, #0
 80045e6:	f7fc fb41 	bl	8000c6c <XMC_SCU_CLOCK_SetWdtClockSource>
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 80045ea:	2001      	movs	r0, #1
 80045ec:	f7fc fc26 	bl	8000e3c <XMC_SCU_CLOCK_SetWdtClockDivider>

  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 80045f0:	2001      	movs	r0, #1
 80045f2:	f7fc fc0f 	bl	8000e14 <XMC_SCU_CLOCK_SetEbuClockDivider>

}
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	08007c4c 	.word	0x08007c4c

080045fc <XMC_GPIO_SetOutputLevel>:
 *
 */


__STATIC_INLINE void XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_OUTPUT_LEVEL_t level)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	460b      	mov	r3, r1
 8004606:	607a      	str	r2, [r7, #4]
 8004608:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid output level", XMC_GPIO_CHECK_OUTPUT_LEVEL(level));
  
  port->OMR = (uint32_t)level << pin;
 800460a:	7afb      	ldrb	r3, [r7, #11]
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	409a      	lsls	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	605a      	str	r2, [r3, #4]
}
 8004614:	3714      	adds	r7, #20
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop

08004620 <BUS_IO_Init>:
* @param handle_ptr Pointer pointing to APP data structure.
* @return BUS_IO_STATUS_t BUS_IO APP status.
*/

BUS_IO_STATUS_t BUS_IO_Init(BUS_IO_t *const handle_ptr)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint8_t i;

  XMC_ASSERT("BUS_IO_Init: handle_ptr null pointer", handle_ptr != NULL);

  if ((bool)false == handle_ptr->initialized)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	7c5b      	ldrb	r3, [r3, #17]
 800462c:	f083 0301 	eor.w	r3, r3, #1
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d020      	beq.n	8004678 <BUS_IO_Init+0x58>
  {
    /* Iterate the list of pins initializing the pin according to the gpio_config */
    for (i = 0U; i < handle_ptr->number_of_pins; i++)
 8004636:	2300      	movs	r3, #0
 8004638:	73fb      	strb	r3, [r7, #15]
 800463a:	e015      	b.n	8004668 <BUS_IO_Init+0x48>
    {
      /* Initializes input / output characteristics */
      XMC_GPIO_Init(handle_ptr->pin_array[i].gpio_port, handle_ptr->pin_array[i].gpio_pin, &handle_ptr->gpio_config);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	7bfb      	ldrb	r3, [r7, #15]
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	4413      	add	r3, r2
 8004646:	6819      	ldr	r1, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	7bfb      	ldrb	r3, [r7, #15]
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	4413      	add	r3, r2
 8004652:	791a      	ldrb	r2, [r3, #4]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	3304      	adds	r3, #4
 8004658:	4608      	mov	r0, r1
 800465a:	4611      	mov	r1, r2
 800465c:	461a      	mov	r2, r3
 800465e:	f7fc f8cb 	bl	80007f8 <XMC_GPIO_Init>
  XMC_ASSERT("BUS_IO_Init: handle_ptr null pointer", handle_ptr != NULL);

  if ((bool)false == handle_ptr->initialized)
  {
    /* Iterate the list of pins initializing the pin according to the gpio_config */
    for (i = 0U; i < handle_ptr->number_of_pins; i++)
 8004662:	7bfb      	ldrb	r3, [r7, #15]
 8004664:	3301      	adds	r3, #1
 8004666:	73fb      	strb	r3, [r7, #15]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	7c1b      	ldrb	r3, [r3, #16]
 800466c:	7bfa      	ldrb	r2, [r7, #15]
 800466e:	429a      	cmp	r2, r3
 8004670:	d3e4      	bcc.n	800463c <BUS_IO_Init+0x1c>
    {
      /* Initializes input / output characteristics */
      XMC_GPIO_Init(handle_ptr->pin_array[i].gpio_port, handle_ptr->pin_array[i].gpio_pin, &handle_ptr->gpio_config);
    }
    handle_ptr->initialized = (bool)true;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	745a      	strb	r2, [r3, #17]
  }
  return (BUS_IO_STATUS_OK);
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop

08004684 <BUS_IO_Write>:
  return(count);
}

/* Function to set the pins bus state */
void BUS_IO_Write(BUS_IO_t *const handle_ptr, const uint16_t data)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	460b      	mov	r3, r1
 800468e:	807b      	strh	r3, [r7, #2]
  uint8_t i;
  const BUS_IO_PORT_PIN_t *bus_io_port_pin;

  XMC_ASSERT("BUS_IO_Write: handle_ptr null pointer", handle_ptr != NULL);

  bus_io_port_pin = handle_ptr->pin_array;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	60bb      	str	r3, [r7, #8]
  /* Iterate the list of pins setting the pin state according the pin position in the list, , from LSB to MSB */
  for (i = 0U; i < handle_ptr->number_of_pins; i++)
 8004696:	2300      	movs	r3, #0
 8004698:	73fb      	strb	r3, [r7, #15]
 800469a:	e023      	b.n	80046e4 <BUS_IO_Write+0x60>
  {
    if (data & (uint16_t)((uint16_t)1 << i))
 800469c:	7bfb      	ldrb	r3, [r7, #15]
 800469e:	2201      	movs	r2, #1
 80046a0:	fa02 f303 	lsl.w	r3, r2, r3
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	887b      	ldrh	r3, [r7, #2]
 80046a8:	4013      	ands	r3, r2
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d009      	beq.n	80046c4 <BUS_IO_Write+0x40>
    {
      XMC_GPIO_SetOutputLevel(bus_io_port_pin->gpio_port, bus_io_port_pin->gpio_pin, XMC_GPIO_OUTPUT_LEVEL_HIGH);
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	791b      	ldrb	r3, [r3, #4]
 80046b8:	4610      	mov	r0, r2
 80046ba:	4619      	mov	r1, r3
 80046bc:	2201      	movs	r2, #1
 80046be:	f7ff ff9d 	bl	80045fc <XMC_GPIO_SetOutputLevel>
 80046c2:	e009      	b.n	80046d8 <BUS_IO_Write+0x54>
    }
    else
    {
      XMC_GPIO_SetOutputLevel(bus_io_port_pin->gpio_port, bus_io_port_pin->gpio_pin, XMC_GPIO_OUTPUT_LEVEL_LOW);
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	791b      	ldrb	r3, [r3, #4]
 80046cc:	4610      	mov	r0, r2
 80046ce:	4619      	mov	r1, r3
 80046d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80046d4:	f7ff ff92 	bl	80045fc <XMC_GPIO_SetOutputLevel>
    }
   bus_io_port_pin++;
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	3308      	adds	r3, #8
 80046dc:	60bb      	str	r3, [r7, #8]

  XMC_ASSERT("BUS_IO_Write: handle_ptr null pointer", handle_ptr != NULL);

  bus_io_port_pin = handle_ptr->pin_array;
  /* Iterate the list of pins setting the pin state according the pin position in the list, , from LSB to MSB */
  for (i = 0U; i < handle_ptr->number_of_pins; i++)
 80046de:	7bfb      	ldrb	r3, [r7, #15]
 80046e0:	3301      	adds	r3, #1
 80046e2:	73fb      	strb	r3, [r7, #15]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	7c1b      	ldrb	r3, [r3, #16]
 80046e8:	7bfa      	ldrb	r2, [r7, #15]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d3d6      	bcc.n	800469c <BUS_IO_Write+0x18>
    {
      XMC_GPIO_SetOutputLevel(bus_io_port_pin->gpio_port, bus_io_port_pin->gpio_pin, XMC_GPIO_OUTPUT_LEVEL_LOW);
    }
   bus_io_port_pin++;
  }
}
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
DAVE_STATUS_t DAVE_Init(void)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 80046fa:	2300      	movs	r3, #0
 80046fc:	71fb      	strb	r3, [r7, #7]
      

/** @Initialization of APPs Init Functions */


  if (init_status == DAVE_STATUS_SUCCESS)
 80046fe:	79fb      	ldrb	r3, [r7, #7]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d104      	bne.n	800470e <DAVE_Init+0x1a>
  {
    /**  Initialization of I2C_MASTER APP instance I2C_MASTER_0 */
    init_status = (DAVE_STATUS_t)I2C_MASTER_Init(&I2C_MASTER_0);
 8004704:	4820      	ldr	r0, [pc, #128]	; (8004788 <DAVE_Init+0x94>)
 8004706:	f7fe fddf 	bl	80032c8 <I2C_MASTER_Init>
 800470a:	4603      	mov	r3, r0
 800470c:	71fb      	strb	r3, [r7, #7]
  }  

  if (init_status == DAVE_STATUS_SUCCESS)
 800470e:	79fb      	ldrb	r3, [r7, #7]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d104      	bne.n	800471e <DAVE_Init+0x2a>
  {
    /**  Initialization of TIMER APP instance TIMER_0 */
    init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_0);
 8004714:	481d      	ldr	r0, [pc, #116]	; (800478c <DAVE_Init+0x98>)
 8004716:	f7fd fdbd 	bl	8002294 <TIMER_Init>
 800471a:	4603      	mov	r3, r0
 800471c:	71fb      	strb	r3, [r7, #7]
  }  

  if (init_status == DAVE_STATUS_SUCCESS)
 800471e:	79fb      	ldrb	r3, [r7, #7]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d104      	bne.n	800472e <DAVE_Init+0x3a>
  {
    /**  Initialization of INTERRUPT APP instance INTERRUPT_0 */
    init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_0);
 8004724:	481a      	ldr	r0, [pc, #104]	; (8004790 <DAVE_Init+0x9c>)
 8004726:	f7fe fc8f 	bl	8003048 <INTERRUPT_Init>
 800472a:	4603      	mov	r3, r0
 800472c:	71fb      	strb	r3, [r7, #7]
  }  

  if (init_status == DAVE_STATUS_SUCCESS)
 800472e:	79fb      	ldrb	r3, [r7, #7]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d104      	bne.n	800473e <DAVE_Init+0x4a>
  {
    /**  Initialization of DIGITAL_IO APP instance DIGITAL_O_HB_LED */
    init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_O_HB_LED);
 8004734:	4817      	ldr	r0, [pc, #92]	; (8004794 <DAVE_Init+0xa0>)
 8004736:	f7ff fee3 	bl	8004500 <DIGITAL_IO_Init>
 800473a:	4603      	mov	r3, r0
 800473c:	71fb      	strb	r3, [r7, #7]
  }  

  if (init_status == DAVE_STATUS_SUCCESS)
 800473e:	79fb      	ldrb	r3, [r7, #7]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d104      	bne.n	800474e <DAVE_Init+0x5a>
  {
    /**  Initialization of RTC APP instance RTC_0 */
    init_status = (DAVE_STATUS_t)RTC_Init(&RTC_0);
 8004744:	4814      	ldr	r0, [pc, #80]	; (8004798 <DAVE_Init+0xa4>)
 8004746:	f7fe faa7 	bl	8002c98 <RTC_Init>
 800474a:	4603      	mov	r3, r0
 800474c:	71fb      	strb	r3, [r7, #7]
  }  

  if (init_status == DAVE_STATUS_SUCCESS)
 800474e:	79fb      	ldrb	r3, [r7, #7]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d104      	bne.n	800475e <DAVE_Init+0x6a>
  {
    /**  Initialization of GLOBAL_ADC APP instance GLOBAL_ADC_0 */
    init_status = (DAVE_STATUS_t)GLOBAL_ADC_Init(&GLOBAL_ADC_0);
 8004754:	4811      	ldr	r0, [pc, #68]	; (800479c <DAVE_Init+0xa8>)
 8004756:	f7ff fe7b 	bl	8004450 <GLOBAL_ADC_Init>
 800475a:	4603      	mov	r3, r0
 800475c:	71fb      	strb	r3, [r7, #7]
  }  

  if (init_status == DAVE_STATUS_SUCCESS)
 800475e:	79fb      	ldrb	r3, [r7, #7]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d104      	bne.n	800476e <DAVE_Init+0x7a>
  {
    /**  Initialization of BUS_IO APP instance BUS_IO_0 */
    init_status = (DAVE_STATUS_t)BUS_IO_Init(&BUS_IO_0);
 8004764:	480e      	ldr	r0, [pc, #56]	; (80047a0 <DAVE_Init+0xac>)
 8004766:	f7ff ff5b 	bl	8004620 <BUS_IO_Init>
 800476a:	4603      	mov	r3, r0
 800476c:	71fb      	strb	r3, [r7, #7]
  }  

  if (init_status == DAVE_STATUS_SUCCESS)
 800476e:	79fb      	ldrb	r3, [r7, #7]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d104      	bne.n	800477e <DAVE_Init+0x8a>
  {
    /**  Initialization of SYSTIMER APP instance SYSTIMER_0 */
    init_status = (DAVE_STATUS_t)SYSTIMER_Init(&SYSTIMER_0);
 8004774:	480b      	ldr	r0, [pc, #44]	; (80047a4 <DAVE_Init+0xb0>)
 8004776:	f7fe f8f3 	bl	8002960 <SYSTIMER_Init>
 800477a:	4603      	mov	r3, r0
 800477c:	71fb      	strb	r3, [r7, #7]
  }  
 

  return init_status;
 800477e:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 8004780:	4618      	mov	r0, r3
 8004782:	3708      	adds	r7, #8
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	2000007c 	.word	0x2000007c
 800478c:	2000001c 	.word	0x2000001c
 8004790:	08007ba4 	.word	0x08007ba4
 8004794:	200000f8 	.word	0x200000f8
 8004798:	20000044 	.word	0x20000044
 800479c:	200000d0 	.word	0x200000d0
 80047a0:	2000010c 	.word	0x2000010c
 80047a4:	200001e4 	.word	0x200001e4

080047a8 <LCD_init>:
 * @attention  None
 * @note       This routine initializes a HD44780 compatible LCD.
 * It needs a delay function @ref delay_100us().
 */
 void LCD_init(void)
 {
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 	//Step 1: wait for power stabilization 500ms
	 delay100us(5000);   //wait after Power on device
 80047ae:	f241 3088 	movw	r0, #5000	; 0x1388
 80047b2:	f7fb fe55 	bl	8000460 <delay100us>

	LCD_RS_Clr;
	LCD_RW_Clr;
	// 0000 five times
	for(int i=0;i<10;i++)
 80047b6:	2300      	movs	r3, #0
 80047b8:	607b      	str	r3, [r7, #4]
 80047ba:	e00d      	b.n	80047d8 <LCD_init+0x30>
	{
		BUS_IO_Write(&BUS_IO_0,0x0|LCD_EN_Set);
 80047bc:	484a      	ldr	r0, [pc, #296]	; (80048e8 <LCD_init+0x140>)
 80047be:	2110      	movs	r1, #16
 80047c0:	f7ff ff60 	bl	8004684 <BUS_IO_Write>
		BUS_IO_Write(&BUS_IO_0,0x0&LCD_EN_Clr);
 80047c4:	4848      	ldr	r0, [pc, #288]	; (80048e8 <LCD_init+0x140>)
 80047c6:	2100      	movs	r1, #0
 80047c8:	f7ff ff5c 	bl	8004684 <BUS_IO_Write>
		delay100us(100);
 80047cc:	2064      	movs	r0, #100	; 0x64
 80047ce:	f7fb fe47 	bl	8000460 <delay100us>
	 delay100us(5000);   //wait after Power on device

	LCD_RS_Clr;
	LCD_RW_Clr;
	// 0000 five times
	for(int i=0;i<10;i++)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	3301      	adds	r3, #1
 80047d6:	607b      	str	r3, [r7, #4]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b09      	cmp	r3, #9
 80047dc:	ddee      	ble.n	80047bc <LCD_init+0x14>
		BUS_IO_Write(&BUS_IO_0,0x0|LCD_EN_Set);
		BUS_IO_Write(&BUS_IO_0,0x0&LCD_EN_Clr);
		delay100us(100);
	}

	delay100us(5000);   //wait after Power on device
 80047de:	f241 3088 	movw	r0, #5000	; 0x1388
 80047e2:	f7fb fe3d 	bl	8000460 <delay100us>
// Step 2: Function set

 	BUS_IO_Write(&BUS_IO_0,0x2|LCD_EN_Set);
 80047e6:	4840      	ldr	r0, [pc, #256]	; (80048e8 <LCD_init+0x140>)
 80047e8:	2112      	movs	r1, #18
 80047ea:	f7ff ff4b 	bl	8004684 <BUS_IO_Write>
 	BUS_IO_Write(&BUS_IO_0,0x2&LCD_EN_Clr);
 80047ee:	483e      	ldr	r0, [pc, #248]	; (80048e8 <LCD_init+0x140>)
 80047f0:	2102      	movs	r1, #2
 80047f2:	f7ff ff47 	bl	8004684 <BUS_IO_Write>
 	BUS_IO_Write(&BUS_IO_0,0x2|LCD_EN_Set);
 80047f6:	483c      	ldr	r0, [pc, #240]	; (80048e8 <LCD_init+0x140>)
 80047f8:	2112      	movs	r1, #18
 80047fa:	f7ff ff43 	bl	8004684 <BUS_IO_Write>
 	BUS_IO_Write(&BUS_IO_0,0x2&LCD_EN_Clr);
 80047fe:	483a      	ldr	r0, [pc, #232]	; (80048e8 <LCD_init+0x140>)
 8004800:	2102      	movs	r1, #2
 8004802:	f7ff ff3f 	bl	8004684 <BUS_IO_Write>
 	BUS_IO_Write(&BUS_IO_0,0xB|LCD_EN_Set);
 8004806:	4838      	ldr	r0, [pc, #224]	; (80048e8 <LCD_init+0x140>)
 8004808:	211b      	movs	r1, #27
 800480a:	f7ff ff3b 	bl	8004684 <BUS_IO_Write>
 	BUS_IO_Write(&BUS_IO_0,0xB&LCD_EN_Clr);
 800480e:	4836      	ldr	r0, [pc, #216]	; (80048e8 <LCD_init+0x140>)
 8004810:	210b      	movs	r1, #11
 8004812:	f7ff ff37 	bl	8004684 <BUS_IO_Write>
 	 delay100us(100);
 8004816:	2064      	movs	r0, #100	; 0x64
 8004818:	f7fb fe22 	bl	8000460 <delay100us>
 	//BussyFlag();


//Step 3: Display ON/OFF Control

 	BUS_IO_Write(&BUS_IO_0,0x0|LCD_EN_Set);
 800481c:	4832      	ldr	r0, [pc, #200]	; (80048e8 <LCD_init+0x140>)
 800481e:	2110      	movs	r1, #16
 8004820:	f7ff ff30 	bl	8004684 <BUS_IO_Write>
 	BUS_IO_Write(&BUS_IO_0,0x0&LCD_EN_Clr);
 8004824:	4830      	ldr	r0, [pc, #192]	; (80048e8 <LCD_init+0x140>)
 8004826:	2100      	movs	r1, #0
 8004828:	f7ff ff2c 	bl	8004684 <BUS_IO_Write>
 	BUS_IO_Write(&BUS_IO_0,0xC|LCD_EN_Set);
 800482c:	482e      	ldr	r0, [pc, #184]	; (80048e8 <LCD_init+0x140>)
 800482e:	211c      	movs	r1, #28
 8004830:	f7ff ff28 	bl	8004684 <BUS_IO_Write>
 	BUS_IO_Write(&BUS_IO_0,0xC&LCD_EN_Clr);
 8004834:	482c      	ldr	r0, [pc, #176]	; (80048e8 <LCD_init+0x140>)
 8004836:	210c      	movs	r1, #12
 8004838:	f7ff ff24 	bl	8004684 <BUS_IO_Write>
 	delay100us(5);
 800483c:	2005      	movs	r0, #5
 800483e:	f7fb fe0f 	bl	8000460 <delay100us>


// 	Step 4: Display Clear

 	BUS_IO_Write(&BUS_IO_0,0x0|LCD_EN_Set);
 8004842:	4829      	ldr	r0, [pc, #164]	; (80048e8 <LCD_init+0x140>)
 8004844:	2110      	movs	r1, #16
 8004846:	f7ff ff1d 	bl	8004684 <BUS_IO_Write>
 	BUS_IO_Write(&BUS_IO_0,0x0&LCD_EN_Clr);
 800484a:	4827      	ldr	r0, [pc, #156]	; (80048e8 <LCD_init+0x140>)
 800484c:	2100      	movs	r1, #0
 800484e:	f7ff ff19 	bl	8004684 <BUS_IO_Write>
 	BUS_IO_Write(&BUS_IO_0,0x1|LCD_EN_Set);
 8004852:	4825      	ldr	r0, [pc, #148]	; (80048e8 <LCD_init+0x140>)
 8004854:	2111      	movs	r1, #17
 8004856:	f7ff ff15 	bl	8004684 <BUS_IO_Write>
 	BUS_IO_Write(&BUS_IO_0,0x1&LCD_EN_Clr);
 800485a:	4823      	ldr	r0, [pc, #140]	; (80048e8 <LCD_init+0x140>)
 800485c:	2101      	movs	r1, #1
 800485e:	f7ff ff11 	bl	8004684 <BUS_IO_Write>
 	delay100us(500);
 8004862:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004866:	f7fb fdfb 	bl	8000460 <delay100us>
 	//BussyFlag();

// 	Step 5: Return Home

 	BUS_IO_Write(&BUS_IO_0,0x0|LCD_EN_Set);
 800486a:	481f      	ldr	r0, [pc, #124]	; (80048e8 <LCD_init+0x140>)
 800486c:	2110      	movs	r1, #16
 800486e:	f7ff ff09 	bl	8004684 <BUS_IO_Write>
 	BUS_IO_Write(&BUS_IO_0,0x0&LCD_EN_Clr);
 8004872:	481d      	ldr	r0, [pc, #116]	; (80048e8 <LCD_init+0x140>)
 8004874:	2100      	movs	r1, #0
 8004876:	f7ff ff05 	bl	8004684 <BUS_IO_Write>
 	BUS_IO_Write(&BUS_IO_0,0x2|LCD_EN_Set);
 800487a:	481b      	ldr	r0, [pc, #108]	; (80048e8 <LCD_init+0x140>)
 800487c:	2112      	movs	r1, #18
 800487e:	f7ff ff01 	bl	8004684 <BUS_IO_Write>
 	BUS_IO_Write(&BUS_IO_0,0x2&LCD_EN_Clr);
 8004882:	4819      	ldr	r0, [pc, #100]	; (80048e8 <LCD_init+0x140>)
 8004884:	2102      	movs	r1, #2
 8004886:	f7ff fefd 	bl	8004684 <BUS_IO_Write>
 	delay100us(500);
 800488a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800488e:	f7fb fde7 	bl	8000460 <delay100us>


// 	Step 6: Entry Mode Set

 	BUS_IO_Write(&BUS_IO_0,0x0|LCD_EN_Set);
 8004892:	4815      	ldr	r0, [pc, #84]	; (80048e8 <LCD_init+0x140>)
 8004894:	2110      	movs	r1, #16
 8004896:	f7ff fef5 	bl	8004684 <BUS_IO_Write>
 	BUS_IO_Write(&BUS_IO_0,0x0&LCD_EN_Clr);
 800489a:	4813      	ldr	r0, [pc, #76]	; (80048e8 <LCD_init+0x140>)
 800489c:	2100      	movs	r1, #0
 800489e:	f7ff fef1 	bl	8004684 <BUS_IO_Write>
 	BUS_IO_Write(&BUS_IO_0,0x6|LCD_EN_Set);
 80048a2:	4811      	ldr	r0, [pc, #68]	; (80048e8 <LCD_init+0x140>)
 80048a4:	2116      	movs	r1, #22
 80048a6:	f7ff feed 	bl	8004684 <BUS_IO_Write>
 	BUS_IO_Write(&BUS_IO_0,0x6&LCD_EN_Clr);
 80048aa:	480f      	ldr	r0, [pc, #60]	; (80048e8 <LCD_init+0x140>)
 80048ac:	2106      	movs	r1, #6
 80048ae:	f7ff fee9 	bl	8004684 <BUS_IO_Write>
 	delay100us(1000);
 80048b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048b6:	f7fb fdd3 	bl	8000460 <delay100us>

	// 0000 five times
	for(int i=0;i<6;i++)
 80048ba:	2300      	movs	r3, #0
 80048bc:	603b      	str	r3, [r7, #0]
 80048be:	e00d      	b.n	80048dc <LCD_init+0x134>
	{
		BUS_IO_Write(&BUS_IO_0,0x0|LCD_EN_Set);
 80048c0:	4809      	ldr	r0, [pc, #36]	; (80048e8 <LCD_init+0x140>)
 80048c2:	2110      	movs	r1, #16
 80048c4:	f7ff fede 	bl	8004684 <BUS_IO_Write>
		BUS_IO_Write(&BUS_IO_0,0x0&LCD_EN_Clr);
 80048c8:	4807      	ldr	r0, [pc, #28]	; (80048e8 <LCD_init+0x140>)
 80048ca:	2100      	movs	r1, #0
 80048cc:	f7ff feda 	bl	8004684 <BUS_IO_Write>
		delay100us(100);
 80048d0:	2064      	movs	r0, #100	; 0x64
 80048d2:	f7fb fdc5 	bl	8000460 <delay100us>
 	BUS_IO_Write(&BUS_IO_0,0x6|LCD_EN_Set);
 	BUS_IO_Write(&BUS_IO_0,0x6&LCD_EN_Clr);
 	delay100us(1000);

	// 0000 five times
	for(int i=0;i<6;i++)
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	3301      	adds	r3, #1
 80048da:	603b      	str	r3, [r7, #0]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	2b05      	cmp	r3, #5
 80048e0:	ddee      	ble.n	80048c0 <LCD_init+0x118>
		BUS_IO_Write(&BUS_IO_0,0x0&LCD_EN_Clr);
		delay100us(100);
	}


 }
 80048e2:	3708      	adds	r7, #8
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	2000010c 	.word	0x2000010c

080048ec <LCD_clearlines>:
 * @post       None
 * @attention  None
 * @note       This routine clears all lines of LCD.
 */
 void LCD_clearlines (void)
 {
 80048ec:	b580      	push	{r7, lr}
 80048ee:	af00      	add	r7, sp, #0
// Write command CLS(0x01) to LCD-Display


	 	BUS_IO_Write(&BUS_IO_0,0x0|LCD_EN_Set);
 80048f0:	4810      	ldr	r0, [pc, #64]	; (8004934 <LCD_clearlines+0x48>)
 80048f2:	2110      	movs	r1, #16
 80048f4:	f7ff fec6 	bl	8004684 <BUS_IO_Write>
	 	BUS_IO_Write(&BUS_IO_0,0x0&LCD_EN_Clr);
 80048f8:	480e      	ldr	r0, [pc, #56]	; (8004934 <LCD_clearlines+0x48>)
 80048fa:	2100      	movs	r1, #0
 80048fc:	f7ff fec2 	bl	8004684 <BUS_IO_Write>
	 	BUS_IO_Write(&BUS_IO_0,0x1|LCD_EN_Set);
 8004900:	480c      	ldr	r0, [pc, #48]	; (8004934 <LCD_clearlines+0x48>)
 8004902:	2111      	movs	r1, #17
 8004904:	f7ff febe 	bl	8004684 <BUS_IO_Write>
	 	BUS_IO_Write(&BUS_IO_0,0x1&LCD_EN_Clr);
 8004908:	480a      	ldr	r0, [pc, #40]	; (8004934 <LCD_clearlines+0x48>)
 800490a:	2101      	movs	r1, #1
 800490c:	f7ff feba 	bl	8004684 <BUS_IO_Write>
	 	BUS_IO_Write(&BUS_IO_0,0x0|LCD_EN_Set);
 8004910:	4808      	ldr	r0, [pc, #32]	; (8004934 <LCD_clearlines+0x48>)
 8004912:	2110      	movs	r1, #16
 8004914:	f7ff feb6 	bl	8004684 <BUS_IO_Write>
	 	BUS_IO_Write(&BUS_IO_0,0x0&LCD_EN_Clr);
 8004918:	4806      	ldr	r0, [pc, #24]	; (8004934 <LCD_clearlines+0x48>)
 800491a:	2100      	movs	r1, #0
 800491c:	f7ff feb2 	bl	8004684 <BUS_IO_Write>
	 	BUS_IO_Write(&BUS_IO_0,0x2|LCD_EN_Set);
 8004920:	4804      	ldr	r0, [pc, #16]	; (8004934 <LCD_clearlines+0x48>)
 8004922:	2112      	movs	r1, #18
 8004924:	f7ff feae 	bl	8004684 <BUS_IO_Write>
	 	BUS_IO_Write(&BUS_IO_0,0x2&LCD_EN_Clr);
 8004928:	4802      	ldr	r0, [pc, #8]	; (8004934 <LCD_clearlines+0x48>)
 800492a:	2102      	movs	r1, #2
 800492c:	f7ff feaa 	bl	8004684 <BUS_IO_Write>
 }
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	2000010c 	.word	0x2000010c

08004938 <LCD_text>:
 * @post       None
 * @attention  A  buffer
 * @note       This routine writes ASCII text to LCD.
 */
 void LCD_text (unsigned char LCDLine, uint16_t LCDColumn, char *LCDInfo)
 {
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	4603      	mov	r3, r0
 8004940:	603a      	str	r2, [r7, #0]
 8004942:	71fb      	strb	r3, [r7, #7]
 8004944:	460b      	mov	r3, r1
 8004946:	80bb      	strh	r3, [r7, #4]
  uint16_t i = 0;
 8004948:	2300      	movs	r3, #0
 800494a:	81fb      	strh	r3, [r7, #14]
//  uint16_t LCD_local_Character = 0;
  uint16_t LCD_Data=0x0;
 800494c:	2300      	movs	r3, #0
 800494e:	81bb      	strh	r3, [r7, #12]

  if(LCDLine != 1) {LCDLine=0;}
 8004950:	79fb      	ldrb	r3, [r7, #7]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d001      	beq.n	800495a <LCD_text+0x22>
 8004956:	2300      	movs	r3, #0
 8004958:	71fb      	strb	r3, [r7, #7]


   	LCD_Data|=0x8;		//LCD_D7_Set;
 800495a:	89bb      	ldrh	r3, [r7, #12]
 800495c:	f043 0308 	orr.w	r3, r3, #8
 8004960:	81bb      	strh	r3, [r7, #12]

 	if(LCDLine == 0){
 8004962:	79fb      	ldrb	r3, [r7, #7]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d104      	bne.n	8004972 <LCD_text+0x3a>
 		LCD_Data&=0xB;	//LCD_D6_Clr;first line
 8004968:	89bb      	ldrh	r3, [r7, #12]
 800496a:	f003 030b 	and.w	r3, r3, #11
 800496e:	81bb      	strh	r3, [r7, #12]
 8004970:	e003      	b.n	800497a <LCD_text+0x42>
 	}
 	else{
 		LCD_Data|=0x4;	//LCD_D6_Set;second line
 8004972:	89bb      	ldrh	r3, [r7, #12]
 8004974:	f043 0304 	orr.w	r3, r3, #4
 8004978:	81bb      	strh	r3, [r7, #12]
 	}


 	if (LCDColumn > LCD_local_display_width)
 800497a:	88bb      	ldrh	r3, [r7, #4]
 800497c:	2b28      	cmp	r3, #40	; 0x28
 800497e:	d805      	bhi.n	800498c <LCD_text+0x54>
 		LCD_Data|=0x0; //beyond LCD_local_display_width start at beginning of line
 	else

    LCD_Data|=LCDColumn >>4;
 8004980:	88bb      	ldrh	r3, [r7, #4]
 8004982:	091b      	lsrs	r3, r3, #4
 8004984:	b29a      	uxth	r2, r3
 8004986:	89bb      	ldrh	r3, [r7, #12]
 8004988:	4313      	orrs	r3, r2
 800498a:	81bb      	strh	r3, [r7, #12]
 	BUS_IO_Write(&BUS_IO_0,LCD_Data|LCD_EN_Set);
 800498c:	89bb      	ldrh	r3, [r7, #12]
 800498e:	f043 0310 	orr.w	r3, r3, #16
 8004992:	b29b      	uxth	r3, r3
 8004994:	483a      	ldr	r0, [pc, #232]	; (8004a80 <LCD_text+0x148>)
 8004996:	4619      	mov	r1, r3
 8004998:	f7ff fe74 	bl	8004684 <BUS_IO_Write>
 	BUS_IO_Write(&BUS_IO_0,LCD_Data&LCD_EN_Clr);
 800499c:	89bb      	ldrh	r3, [r7, #12]
 800499e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	4836      	ldr	r0, [pc, #216]	; (8004a80 <LCD_text+0x148>)
 80049a6:	4619      	mov	r1, r3
 80049a8:	f7ff fe6c 	bl	8004684 <BUS_IO_Write>
 	LCD_Data = 0x0F&LCDColumn ;
 80049ac:	88bb      	ldrh	r3, [r7, #4]
 80049ae:	f003 030f 	and.w	r3, r3, #15
 80049b2:	81bb      	strh	r3, [r7, #12]

 	BUS_IO_Write(&BUS_IO_0,LCD_Data|LCD_EN_Set);
 80049b4:	89bb      	ldrh	r3, [r7, #12]
 80049b6:	f043 0310 	orr.w	r3, r3, #16
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	4830      	ldr	r0, [pc, #192]	; (8004a80 <LCD_text+0x148>)
 80049be:	4619      	mov	r1, r3
 80049c0:	f7ff fe60 	bl	8004684 <BUS_IO_Write>
 	BUS_IO_Write(&BUS_IO_0,LCD_Data&LCD_EN_Clr);
 80049c4:	89bb      	ldrh	r3, [r7, #12]
 80049c6:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	482c      	ldr	r0, [pc, #176]	; (8004a80 <LCD_text+0x148>)
 80049ce:	4619      	mov	r1, r3
 80049d0:	f7ff fe58 	bl	8004684 <BUS_IO_Write>
 	i = 0;
 80049d4:	2300      	movs	r3, #0
 80049d6:	81fb      	strh	r3, [r7, #14]
 	while((LCDInfo[i] != '\0') && (i < LCD_local_display_width))
 80049d8:	e041      	b.n	8004a5e <LCD_text+0x126>
 	{
 		LCD_Data=0x0F&LCDInfo[i]>>4; // assign character
 80049da:	89fb      	ldrh	r3, [r7, #14]
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	4413      	add	r3, r2
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	091b      	lsrs	r3, r3, #4
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	81bb      	strh	r3, [r7, #12]
 		BUS_IO_Write(&BUS_IO_0,LCD_Data|LCD_RS_Set);
 80049e8:	89bb      	ldrh	r3, [r7, #12]
 80049ea:	f043 0320 	orr.w	r3, r3, #32
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	4823      	ldr	r0, [pc, #140]	; (8004a80 <LCD_text+0x148>)
 80049f2:	4619      	mov	r1, r3
 80049f4:	f7ff fe46 	bl	8004684 <BUS_IO_Write>
 		BUS_IO_Write(&BUS_IO_0,LCD_Data|LCD_EN_Set);
 80049f8:	89bb      	ldrh	r3, [r7, #12]
 80049fa:	f043 0310 	orr.w	r3, r3, #16
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	481f      	ldr	r0, [pc, #124]	; (8004a80 <LCD_text+0x148>)
 8004a02:	4619      	mov	r1, r3
 8004a04:	f7ff fe3e 	bl	8004684 <BUS_IO_Write>
 		BUS_IO_Write(&BUS_IO_0,LCD_Data&LCD_EN_Clr);
 8004a08:	89bb      	ldrh	r3, [r7, #12]
 8004a0a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	481b      	ldr	r0, [pc, #108]	; (8004a80 <LCD_text+0x148>)
 8004a12:	4619      	mov	r1, r3
 8004a14:	f7ff fe36 	bl	8004684 <BUS_IO_Write>
 		LCD_Data=0x0F&LCDInfo[i]; // assign character
 8004a18:	89fb      	ldrh	r3, [r7, #14]
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	f003 030f 	and.w	r3, r3, #15
 8004a26:	81bb      	strh	r3, [r7, #12]
 		BUS_IO_Write(&BUS_IO_0,LCD_Data|LCD_RS_Set);
 8004a28:	89bb      	ldrh	r3, [r7, #12]
 8004a2a:	f043 0320 	orr.w	r3, r3, #32
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	4813      	ldr	r0, [pc, #76]	; (8004a80 <LCD_text+0x148>)
 8004a32:	4619      	mov	r1, r3
 8004a34:	f7ff fe26 	bl	8004684 <BUS_IO_Write>
 		BUS_IO_Write(&BUS_IO_0,LCD_Data|LCD_EN_Set);
 8004a38:	89bb      	ldrh	r3, [r7, #12]
 8004a3a:	f043 0310 	orr.w	r3, r3, #16
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	480f      	ldr	r0, [pc, #60]	; (8004a80 <LCD_text+0x148>)
 8004a42:	4619      	mov	r1, r3
 8004a44:	f7ff fe1e 	bl	8004684 <BUS_IO_Write>
 		BUS_IO_Write(&BUS_IO_0,LCD_Data&LCD_EN_Clr);
 8004a48:	89bb      	ldrh	r3, [r7, #12]
 8004a4a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	480b      	ldr	r0, [pc, #44]	; (8004a80 <LCD_text+0x148>)
 8004a52:	4619      	mov	r1, r3
 8004a54:	f7ff fe16 	bl	8004684 <BUS_IO_Write>

 		i++;
 8004a58:	89fb      	ldrh	r3, [r7, #14]
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	81fb      	strh	r3, [r7, #14]
 	LCD_Data = 0x0F&LCDColumn ;

 	BUS_IO_Write(&BUS_IO_0,LCD_Data|LCD_EN_Set);
 	BUS_IO_Write(&BUS_IO_0,LCD_Data&LCD_EN_Clr);
 	i = 0;
 	while((LCDInfo[i] != '\0') && (i < LCD_local_display_width))
 8004a5e:	89fb      	ldrh	r3, [r7, #14]
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	4413      	add	r3, r2
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d002      	beq.n	8004a70 <LCD_text+0x138>
 8004a6a:	89fb      	ldrh	r3, [r7, #14]
 8004a6c:	2b27      	cmp	r3, #39	; 0x27
 8004a6e:	d9b4      	bls.n	80049da <LCD_text+0xa2>
 		BUS_IO_Write(&BUS_IO_0,LCD_Data&LCD_EN_Clr);

 		i++;
 	}
 	//LCD_RS_Clr;
 	BUS_IO_Write(&BUS_IO_0,0x0);
 8004a70:	4803      	ldr	r0, [pc, #12]	; (8004a80 <LCD_text+0x148>)
 8004a72:	2100      	movs	r1, #0
 8004a74:	f7ff fe06 	bl	8004684 <BUS_IO_Write>
 }
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	2000010c 	.word	0x2000010c

08004a84 <update_LCD>:
 * @post       None
 * @attention  None
 * @note       The ASCII notation is built by @ref sprintf; the used buffer is global.
 */
void update_LCD(void)
{
 8004a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a88:	b086      	sub	sp, #24
 8004a8a:	af06      	add	r7, sp, #24
	//serve first LCD line

	RTC_GetTime(&timeval);	//synch time
 8004a8c:	481f      	ldr	r0, [pc, #124]	; (8004b0c <update_LCD+0x88>)
 8004a8e:	f7fe fa21 	bl	8002ed4 <RTC_GetTime>
	sprintf(LCDBuffer,"%4d.%02d.%02d. %02d:%02d:%02d Temp:%+05.2f'C    ",
			timeval.year,
 8004a92:	4b1e      	ldr	r3, [pc, #120]	; (8004b0c <update_LCD+0x88>)
 8004a94:	88db      	ldrh	r3, [r3, #6]
void update_LCD(void)
{
	//serve first LCD line

	RTC_GetTime(&timeval);	//synch time
	sprintf(LCDBuffer,"%4d.%02d.%02d. %02d:%02d:%02d Temp:%+05.2f'C    ",
 8004a96:	469a      	mov	sl, r3
			timeval.year,
			timeval.month,
 8004a98:	4b1c      	ldr	r3, [pc, #112]	; (8004b0c <update_LCD+0x88>)
 8004a9a:	795b      	ldrb	r3, [r3, #5]
 8004a9c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004aa0:	b2db      	uxtb	r3, r3
void update_LCD(void)
{
	//serve first LCD line

	RTC_GetTime(&timeval);	//synch time
	sprintf(LCDBuffer,"%4d.%02d.%02d. %02d:%02d:%02d Temp:%+05.2f'C    ",
 8004aa2:	4699      	mov	r9, r3
			timeval.year,
			timeval.month,
			timeval.days,
 8004aa4:	4b19      	ldr	r3, [pc, #100]	; (8004b0c <update_LCD+0x88>)
 8004aa6:	78db      	ldrb	r3, [r3, #3]
 8004aa8:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8004aac:	b2db      	uxtb	r3, r3
void update_LCD(void)
{
	//serve first LCD line

	RTC_GetTime(&timeval);	//synch time
	sprintf(LCDBuffer,"%4d.%02d.%02d. %02d:%02d:%02d Temp:%+05.2f'C    ",
 8004aae:	4698      	mov	r8, r3
			timeval.year,
			timeval.month,
			timeval.days,
			timeval.hours,
 8004ab0:	4b16      	ldr	r3, [pc, #88]	; (8004b0c <update_LCD+0x88>)
 8004ab2:	789b      	ldrb	r3, [r3, #2]
 8004ab4:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8004ab8:	b2db      	uxtb	r3, r3
void update_LCD(void)
{
	//serve first LCD line

	RTC_GetTime(&timeval);	//synch time
	sprintf(LCDBuffer,"%4d.%02d.%02d. %02d:%02d:%02d Temp:%+05.2f'C    ",
 8004aba:	461e      	mov	r6, r3
			timeval.year,
			timeval.month,
			timeval.days,
			timeval.hours,
			timeval.minutes,
 8004abc:	4b13      	ldr	r3, [pc, #76]	; (8004b0c <update_LCD+0x88>)
 8004abe:	785b      	ldrb	r3, [r3, #1]
 8004ac0:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8004ac4:	b2db      	uxtb	r3, r3
void update_LCD(void)
{
	//serve first LCD line

	RTC_GetTime(&timeval);	//synch time
	sprintf(LCDBuffer,"%4d.%02d.%02d. %02d:%02d:%02d Temp:%+05.2f'C    ",
 8004ac6:	461d      	mov	r5, r3
			timeval.year,
			timeval.month,
			timeval.days,
			timeval.hours,
			timeval.minutes,
			timeval.seconds,
 8004ac8:	4b10      	ldr	r3, [pc, #64]	; (8004b0c <update_LCD+0x88>)
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8004ad0:	b2db      	uxtb	r3, r3
void update_LCD(void)
{
	//serve first LCD line

	RTC_GetTime(&timeval);	//synch time
	sprintf(LCDBuffer,"%4d.%02d.%02d. %02d:%02d:%02d Temp:%+05.2f'C    ",
 8004ad2:	461c      	mov	r4, r3
			timeval.month,
			timeval.days,
			timeval.hours,
			timeval.minutes,
			timeval.seconds,
			S_LM76.temp.ave_value);
 8004ad4:	4b0e      	ldr	r3, [pc, #56]	; (8004b10 <update_LCD+0x8c>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
void update_LCD(void)
{
	//serve first LCD line

	RTC_GetTime(&timeval);	//synch time
	sprintf(LCDBuffer,"%4d.%02d.%02d. %02d:%02d:%02d Temp:%+05.2f'C    ",
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f000 f9c7 	bl	8004e6c <__aeabi_f2d>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	f8cd 8000 	str.w	r8, [sp]
 8004ae6:	9601      	str	r6, [sp, #4]
 8004ae8:	9502      	str	r5, [sp, #8]
 8004aea:	9403      	str	r4, [sp, #12]
 8004aec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004af0:	4808      	ldr	r0, [pc, #32]	; (8004b14 <update_LCD+0x90>)
 8004af2:	4909      	ldr	r1, [pc, #36]	; (8004b18 <update_LCD+0x94>)
 8004af4:	4652      	mov	r2, sl
 8004af6:	464b      	mov	r3, r9
 8004af8:	f001 fbb0 	bl	800625c <siprintf>
			timeval.days,
			timeval.hours,
			timeval.minutes,
			timeval.seconds,
			S_LM76.temp.ave_value);
	LCD_text(0,0,LCDBuffer);
 8004afc:	2000      	movs	r0, #0
 8004afe:	2100      	movs	r1, #0
 8004b00:	4a04      	ldr	r2, [pc, #16]	; (8004b14 <update_LCD+0x90>)
 8004b02:	f7ff ff19 	bl	8004938 <LCD_text>

	//serve second line
	//sprintf(LCDBuffer,"NTP accesses: %d, ",amount_of_ntp_accesses);
	//LCD_text(1,0,LCDBuffer);
}
 8004b06:	46bd      	mov	sp, r7
 8004b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b0c:	200001f0 	.word	0x200001f0
 8004b10:	20000000 	.word	0x20000000
 8004b14:	200004c8 	.word	0x200004c8
 8004b18:	08007c98 	.word	0x08007c98

08004b1c <XMC_GPIO_ToggleOutput>:
 * and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	460b      	mov	r3, r1
 8004b26:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
 8004b28:	78fb      	ldrb	r3, [r7, #3]
 8004b2a:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8004b2e:	409a      	lsls	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	605a      	str	r2, [r3, #4]
}
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop

08004b40 <DIGITAL_IO_ToggleOutput>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_ToggleOutput(const DIGITAL_IO_t *const handler)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_ToggleOutput: handler null pointer", handler != NULL);
  XMC_GPIO_ToggleOutput(handler->gpio_port, handler->gpio_pin);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	7a1b      	ldrb	r3, [r3, #8]
 8004b50:	4610      	mov	r0, r2
 8004b52:	4619      	mov	r1, r3
 8004b54:	f7ff ffe2 	bl	8004b1c <XMC_GPIO_ToggleOutput>
}
 8004b58:	3708      	adds	r7, #8
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop

08004b60 <main>:
 * invoking the APP initialization dispatcher routine - DAVE_Init() and hosting the place-holder for user application
 * code.
 */

int main(void)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
  DAVE_STATUS_t status;


  status = DAVE_Init();           /* Initialization of DAVE APPs  */
 8004b66:	f7ff fdc5 	bl	80046f4 <DAVE_Init>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	71fb      	strb	r3, [r7, #7]

  if(status == DAVE_STATUS_FAILURE)
 8004b6e:	79fb      	ldrb	r3, [r7, #7]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d100      	bne.n	8004b76 <main+0x16>
    XMC_DEBUG("DAVE APPs initialization failed\n");

    while(1U)
    {
    	// init failed...
    }
 8004b74:	e7fe      	b.n	8004b74 <main+0x14>
  }

  init();
 8004b76:	f7fb fcd9 	bl	800052c <init>
  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  while(1U)
  {
	  update_LM76();
 8004b7a:	f7fb fde3 	bl	8000744 <update_LM76>
	  update_LCD();
 8004b7e:	f7ff ff81 	bl	8004a84 <update_LCD>


	  while(mainloop_ticks<1);
 8004b82:	bf00      	nop
 8004b84:	4b05      	ldr	r3, [pc, #20]	; (8004b9c <main+0x3c>)
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d0fa      	beq.n	8004b84 <main+0x24>
	  mainloop_ticks=0;
 8004b8e:	4b03      	ldr	r3, [pc, #12]	; (8004b9c <main+0x3c>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	701a      	strb	r2, [r3, #0]
	  DIGITAL_IO_ToggleOutput(&DIGITAL_O_HB_LED); //toggles : 0 -> 1
 8004b94:	4802      	ldr	r0, [pc, #8]	; (8004ba0 <main+0x40>)
 8004b96:	f7ff ffd3 	bl	8004b40 <DIGITAL_IO_ToggleOutput>
  }
 8004b9a:	e7ee      	b.n	8004b7a <main+0x1a>
 8004b9c:	200001c0 	.word	0x200001c0
 8004ba0:	200000f8 	.word	0x200000f8

08004ba4 <__aeabi_drsub>:
 8004ba4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8004ba8:	e002      	b.n	8004bb0 <__adddf3>
 8004baa:	bf00      	nop

08004bac <__aeabi_dsub>:
 8004bac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08004bb0 <__adddf3>:
 8004bb0:	b530      	push	{r4, r5, lr}
 8004bb2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8004bb6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8004bba:	ea94 0f05 	teq	r4, r5
 8004bbe:	bf08      	it	eq
 8004bc0:	ea90 0f02 	teqeq	r0, r2
 8004bc4:	bf1f      	itttt	ne
 8004bc6:	ea54 0c00 	orrsne.w	ip, r4, r0
 8004bca:	ea55 0c02 	orrsne.w	ip, r5, r2
 8004bce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8004bd2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004bd6:	f000 80e2 	beq.w	8004d9e <__adddf3+0x1ee>
 8004bda:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8004bde:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8004be2:	bfb8      	it	lt
 8004be4:	426d      	neglt	r5, r5
 8004be6:	dd0c      	ble.n	8004c02 <__adddf3+0x52>
 8004be8:	442c      	add	r4, r5
 8004bea:	ea80 0202 	eor.w	r2, r0, r2
 8004bee:	ea81 0303 	eor.w	r3, r1, r3
 8004bf2:	ea82 0000 	eor.w	r0, r2, r0
 8004bf6:	ea83 0101 	eor.w	r1, r3, r1
 8004bfa:	ea80 0202 	eor.w	r2, r0, r2
 8004bfe:	ea81 0303 	eor.w	r3, r1, r3
 8004c02:	2d36      	cmp	r5, #54	; 0x36
 8004c04:	bf88      	it	hi
 8004c06:	bd30      	pophi	{r4, r5, pc}
 8004c08:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8004c0c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8004c10:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8004c14:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8004c18:	d002      	beq.n	8004c20 <__adddf3+0x70>
 8004c1a:	4240      	negs	r0, r0
 8004c1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004c20:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8004c24:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004c28:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8004c2c:	d002      	beq.n	8004c34 <__adddf3+0x84>
 8004c2e:	4252      	negs	r2, r2
 8004c30:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8004c34:	ea94 0f05 	teq	r4, r5
 8004c38:	f000 80a7 	beq.w	8004d8a <__adddf3+0x1da>
 8004c3c:	f1a4 0401 	sub.w	r4, r4, #1
 8004c40:	f1d5 0e20 	rsbs	lr, r5, #32
 8004c44:	db0d      	blt.n	8004c62 <__adddf3+0xb2>
 8004c46:	fa02 fc0e 	lsl.w	ip, r2, lr
 8004c4a:	fa22 f205 	lsr.w	r2, r2, r5
 8004c4e:	1880      	adds	r0, r0, r2
 8004c50:	f141 0100 	adc.w	r1, r1, #0
 8004c54:	fa03 f20e 	lsl.w	r2, r3, lr
 8004c58:	1880      	adds	r0, r0, r2
 8004c5a:	fa43 f305 	asr.w	r3, r3, r5
 8004c5e:	4159      	adcs	r1, r3
 8004c60:	e00e      	b.n	8004c80 <__adddf3+0xd0>
 8004c62:	f1a5 0520 	sub.w	r5, r5, #32
 8004c66:	f10e 0e20 	add.w	lr, lr, #32
 8004c6a:	2a01      	cmp	r2, #1
 8004c6c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8004c70:	bf28      	it	cs
 8004c72:	f04c 0c02 	orrcs.w	ip, ip, #2
 8004c76:	fa43 f305 	asr.w	r3, r3, r5
 8004c7a:	18c0      	adds	r0, r0, r3
 8004c7c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8004c80:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004c84:	d507      	bpl.n	8004c96 <__adddf3+0xe6>
 8004c86:	f04f 0e00 	mov.w	lr, #0
 8004c8a:	f1dc 0c00 	rsbs	ip, ip, #0
 8004c8e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8004c92:	eb6e 0101 	sbc.w	r1, lr, r1
 8004c96:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004c9a:	d31b      	bcc.n	8004cd4 <__adddf3+0x124>
 8004c9c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8004ca0:	d30c      	bcc.n	8004cbc <__adddf3+0x10c>
 8004ca2:	0849      	lsrs	r1, r1, #1
 8004ca4:	ea5f 0030 	movs.w	r0, r0, rrx
 8004ca8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8004cac:	f104 0401 	add.w	r4, r4, #1
 8004cb0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8004cb4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8004cb8:	f080 809a 	bcs.w	8004df0 <__adddf3+0x240>
 8004cbc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8004cc0:	bf08      	it	eq
 8004cc2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004cc6:	f150 0000 	adcs.w	r0, r0, #0
 8004cca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004cce:	ea41 0105 	orr.w	r1, r1, r5
 8004cd2:	bd30      	pop	{r4, r5, pc}
 8004cd4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8004cd8:	4140      	adcs	r0, r0
 8004cda:	eb41 0101 	adc.w	r1, r1, r1
 8004cde:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004ce2:	f1a4 0401 	sub.w	r4, r4, #1
 8004ce6:	d1e9      	bne.n	8004cbc <__adddf3+0x10c>
 8004ce8:	f091 0f00 	teq	r1, #0
 8004cec:	bf04      	itt	eq
 8004cee:	4601      	moveq	r1, r0
 8004cf0:	2000      	moveq	r0, #0
 8004cf2:	fab1 f381 	clz	r3, r1
 8004cf6:	bf08      	it	eq
 8004cf8:	3320      	addeq	r3, #32
 8004cfa:	f1a3 030b 	sub.w	r3, r3, #11
 8004cfe:	f1b3 0220 	subs.w	r2, r3, #32
 8004d02:	da0c      	bge.n	8004d1e <__adddf3+0x16e>
 8004d04:	320c      	adds	r2, #12
 8004d06:	dd08      	ble.n	8004d1a <__adddf3+0x16a>
 8004d08:	f102 0c14 	add.w	ip, r2, #20
 8004d0c:	f1c2 020c 	rsb	r2, r2, #12
 8004d10:	fa01 f00c 	lsl.w	r0, r1, ip
 8004d14:	fa21 f102 	lsr.w	r1, r1, r2
 8004d18:	e00c      	b.n	8004d34 <__adddf3+0x184>
 8004d1a:	f102 0214 	add.w	r2, r2, #20
 8004d1e:	bfd8      	it	le
 8004d20:	f1c2 0c20 	rsble	ip, r2, #32
 8004d24:	fa01 f102 	lsl.w	r1, r1, r2
 8004d28:	fa20 fc0c 	lsr.w	ip, r0, ip
 8004d2c:	bfdc      	itt	le
 8004d2e:	ea41 010c 	orrle.w	r1, r1, ip
 8004d32:	4090      	lslle	r0, r2
 8004d34:	1ae4      	subs	r4, r4, r3
 8004d36:	bfa2      	ittt	ge
 8004d38:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8004d3c:	4329      	orrge	r1, r5
 8004d3e:	bd30      	popge	{r4, r5, pc}
 8004d40:	ea6f 0404 	mvn.w	r4, r4
 8004d44:	3c1f      	subs	r4, #31
 8004d46:	da1c      	bge.n	8004d82 <__adddf3+0x1d2>
 8004d48:	340c      	adds	r4, #12
 8004d4a:	dc0e      	bgt.n	8004d6a <__adddf3+0x1ba>
 8004d4c:	f104 0414 	add.w	r4, r4, #20
 8004d50:	f1c4 0220 	rsb	r2, r4, #32
 8004d54:	fa20 f004 	lsr.w	r0, r0, r4
 8004d58:	fa01 f302 	lsl.w	r3, r1, r2
 8004d5c:	ea40 0003 	orr.w	r0, r0, r3
 8004d60:	fa21 f304 	lsr.w	r3, r1, r4
 8004d64:	ea45 0103 	orr.w	r1, r5, r3
 8004d68:	bd30      	pop	{r4, r5, pc}
 8004d6a:	f1c4 040c 	rsb	r4, r4, #12
 8004d6e:	f1c4 0220 	rsb	r2, r4, #32
 8004d72:	fa20 f002 	lsr.w	r0, r0, r2
 8004d76:	fa01 f304 	lsl.w	r3, r1, r4
 8004d7a:	ea40 0003 	orr.w	r0, r0, r3
 8004d7e:	4629      	mov	r1, r5
 8004d80:	bd30      	pop	{r4, r5, pc}
 8004d82:	fa21 f004 	lsr.w	r0, r1, r4
 8004d86:	4629      	mov	r1, r5
 8004d88:	bd30      	pop	{r4, r5, pc}
 8004d8a:	f094 0f00 	teq	r4, #0
 8004d8e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8004d92:	bf06      	itte	eq
 8004d94:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8004d98:	3401      	addeq	r4, #1
 8004d9a:	3d01      	subne	r5, #1
 8004d9c:	e74e      	b.n	8004c3c <__adddf3+0x8c>
 8004d9e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004da2:	bf18      	it	ne
 8004da4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004da8:	d029      	beq.n	8004dfe <__adddf3+0x24e>
 8004daa:	ea94 0f05 	teq	r4, r5
 8004dae:	bf08      	it	eq
 8004db0:	ea90 0f02 	teqeq	r0, r2
 8004db4:	d005      	beq.n	8004dc2 <__adddf3+0x212>
 8004db6:	ea54 0c00 	orrs.w	ip, r4, r0
 8004dba:	bf04      	itt	eq
 8004dbc:	4619      	moveq	r1, r3
 8004dbe:	4610      	moveq	r0, r2
 8004dc0:	bd30      	pop	{r4, r5, pc}
 8004dc2:	ea91 0f03 	teq	r1, r3
 8004dc6:	bf1e      	ittt	ne
 8004dc8:	2100      	movne	r1, #0
 8004dca:	2000      	movne	r0, #0
 8004dcc:	bd30      	popne	{r4, r5, pc}
 8004dce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8004dd2:	d105      	bne.n	8004de0 <__adddf3+0x230>
 8004dd4:	0040      	lsls	r0, r0, #1
 8004dd6:	4149      	adcs	r1, r1
 8004dd8:	bf28      	it	cs
 8004dda:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8004dde:	bd30      	pop	{r4, r5, pc}
 8004de0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8004de4:	bf3c      	itt	cc
 8004de6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8004dea:	bd30      	popcc	{r4, r5, pc}
 8004dec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004df0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8004df4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004df8:	f04f 0000 	mov.w	r0, #0
 8004dfc:	bd30      	pop	{r4, r5, pc}
 8004dfe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004e02:	bf1a      	itte	ne
 8004e04:	4619      	movne	r1, r3
 8004e06:	4610      	movne	r0, r2
 8004e08:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8004e0c:	bf1c      	itt	ne
 8004e0e:	460b      	movne	r3, r1
 8004e10:	4602      	movne	r2, r0
 8004e12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8004e16:	bf06      	itte	eq
 8004e18:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8004e1c:	ea91 0f03 	teqeq	r1, r3
 8004e20:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8004e24:	bd30      	pop	{r4, r5, pc}
 8004e26:	bf00      	nop

08004e28 <__aeabi_ui2d>:
 8004e28:	f090 0f00 	teq	r0, #0
 8004e2c:	bf04      	itt	eq
 8004e2e:	2100      	moveq	r1, #0
 8004e30:	4770      	bxeq	lr
 8004e32:	b530      	push	{r4, r5, lr}
 8004e34:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004e38:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004e3c:	f04f 0500 	mov.w	r5, #0
 8004e40:	f04f 0100 	mov.w	r1, #0
 8004e44:	e750      	b.n	8004ce8 <__adddf3+0x138>
 8004e46:	bf00      	nop

08004e48 <__aeabi_i2d>:
 8004e48:	f090 0f00 	teq	r0, #0
 8004e4c:	bf04      	itt	eq
 8004e4e:	2100      	moveq	r1, #0
 8004e50:	4770      	bxeq	lr
 8004e52:	b530      	push	{r4, r5, lr}
 8004e54:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004e58:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004e5c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8004e60:	bf48      	it	mi
 8004e62:	4240      	negmi	r0, r0
 8004e64:	f04f 0100 	mov.w	r1, #0
 8004e68:	e73e      	b.n	8004ce8 <__adddf3+0x138>
 8004e6a:	bf00      	nop

08004e6c <__aeabi_f2d>:
 8004e6c:	0042      	lsls	r2, r0, #1
 8004e6e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8004e72:	ea4f 0131 	mov.w	r1, r1, rrx
 8004e76:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8004e7a:	bf1f      	itttt	ne
 8004e7c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8004e80:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8004e84:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8004e88:	4770      	bxne	lr
 8004e8a:	f092 0f00 	teq	r2, #0
 8004e8e:	bf14      	ite	ne
 8004e90:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8004e94:	4770      	bxeq	lr
 8004e96:	b530      	push	{r4, r5, lr}
 8004e98:	f44f 7460 	mov.w	r4, #896	; 0x380
 8004e9c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004ea0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004ea4:	e720      	b.n	8004ce8 <__adddf3+0x138>
 8004ea6:	bf00      	nop

08004ea8 <__aeabi_ul2d>:
 8004ea8:	ea50 0201 	orrs.w	r2, r0, r1
 8004eac:	bf08      	it	eq
 8004eae:	4770      	bxeq	lr
 8004eb0:	b530      	push	{r4, r5, lr}
 8004eb2:	f04f 0500 	mov.w	r5, #0
 8004eb6:	e00a      	b.n	8004ece <__aeabi_l2d+0x16>

08004eb8 <__aeabi_l2d>:
 8004eb8:	ea50 0201 	orrs.w	r2, r0, r1
 8004ebc:	bf08      	it	eq
 8004ebe:	4770      	bxeq	lr
 8004ec0:	b530      	push	{r4, r5, lr}
 8004ec2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8004ec6:	d502      	bpl.n	8004ece <__aeabi_l2d+0x16>
 8004ec8:	4240      	negs	r0, r0
 8004eca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004ece:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004ed2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004ed6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8004eda:	f43f aedc 	beq.w	8004c96 <__adddf3+0xe6>
 8004ede:	f04f 0203 	mov.w	r2, #3
 8004ee2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8004ee6:	bf18      	it	ne
 8004ee8:	3203      	addne	r2, #3
 8004eea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8004eee:	bf18      	it	ne
 8004ef0:	3203      	addne	r2, #3
 8004ef2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8004ef6:	f1c2 0320 	rsb	r3, r2, #32
 8004efa:	fa00 fc03 	lsl.w	ip, r0, r3
 8004efe:	fa20 f002 	lsr.w	r0, r0, r2
 8004f02:	fa01 fe03 	lsl.w	lr, r1, r3
 8004f06:	ea40 000e 	orr.w	r0, r0, lr
 8004f0a:	fa21 f102 	lsr.w	r1, r1, r2
 8004f0e:	4414      	add	r4, r2
 8004f10:	e6c1      	b.n	8004c96 <__adddf3+0xe6>
 8004f12:	bf00      	nop

08004f14 <__aeabi_dmul>:
 8004f14:	b570      	push	{r4, r5, r6, lr}
 8004f16:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8004f1a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8004f1e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8004f22:	bf1d      	ittte	ne
 8004f24:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8004f28:	ea94 0f0c 	teqne	r4, ip
 8004f2c:	ea95 0f0c 	teqne	r5, ip
 8004f30:	f000 f8de 	bleq	80050f0 <__aeabi_dmul+0x1dc>
 8004f34:	442c      	add	r4, r5
 8004f36:	ea81 0603 	eor.w	r6, r1, r3
 8004f3a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8004f3e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8004f42:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8004f46:	bf18      	it	ne
 8004f48:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8004f4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004f50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f54:	d038      	beq.n	8004fc8 <__aeabi_dmul+0xb4>
 8004f56:	fba0 ce02 	umull	ip, lr, r0, r2
 8004f5a:	f04f 0500 	mov.w	r5, #0
 8004f5e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8004f62:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8004f66:	fbe0 e503 	umlal	lr, r5, r0, r3
 8004f6a:	f04f 0600 	mov.w	r6, #0
 8004f6e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8004f72:	f09c 0f00 	teq	ip, #0
 8004f76:	bf18      	it	ne
 8004f78:	f04e 0e01 	orrne.w	lr, lr, #1
 8004f7c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8004f80:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8004f84:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8004f88:	d204      	bcs.n	8004f94 <__aeabi_dmul+0x80>
 8004f8a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8004f8e:	416d      	adcs	r5, r5
 8004f90:	eb46 0606 	adc.w	r6, r6, r6
 8004f94:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8004f98:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8004f9c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8004fa0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8004fa4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8004fa8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8004fac:	bf88      	it	hi
 8004fae:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8004fb2:	d81e      	bhi.n	8004ff2 <__aeabi_dmul+0xde>
 8004fb4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8004fb8:	bf08      	it	eq
 8004fba:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8004fbe:	f150 0000 	adcs.w	r0, r0, #0
 8004fc2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004fc6:	bd70      	pop	{r4, r5, r6, pc}
 8004fc8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8004fcc:	ea46 0101 	orr.w	r1, r6, r1
 8004fd0:	ea40 0002 	orr.w	r0, r0, r2
 8004fd4:	ea81 0103 	eor.w	r1, r1, r3
 8004fd8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8004fdc:	bfc2      	ittt	gt
 8004fde:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004fe2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8004fe6:	bd70      	popgt	{r4, r5, r6, pc}
 8004fe8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004fec:	f04f 0e00 	mov.w	lr, #0
 8004ff0:	3c01      	subs	r4, #1
 8004ff2:	f300 80ab 	bgt.w	800514c <__aeabi_dmul+0x238>
 8004ff6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8004ffa:	bfde      	ittt	le
 8004ffc:	2000      	movle	r0, #0
 8004ffe:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8005002:	bd70      	pople	{r4, r5, r6, pc}
 8005004:	f1c4 0400 	rsb	r4, r4, #0
 8005008:	3c20      	subs	r4, #32
 800500a:	da35      	bge.n	8005078 <__aeabi_dmul+0x164>
 800500c:	340c      	adds	r4, #12
 800500e:	dc1b      	bgt.n	8005048 <__aeabi_dmul+0x134>
 8005010:	f104 0414 	add.w	r4, r4, #20
 8005014:	f1c4 0520 	rsb	r5, r4, #32
 8005018:	fa00 f305 	lsl.w	r3, r0, r5
 800501c:	fa20 f004 	lsr.w	r0, r0, r4
 8005020:	fa01 f205 	lsl.w	r2, r1, r5
 8005024:	ea40 0002 	orr.w	r0, r0, r2
 8005028:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800502c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005030:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8005034:	fa21 f604 	lsr.w	r6, r1, r4
 8005038:	eb42 0106 	adc.w	r1, r2, r6
 800503c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005040:	bf08      	it	eq
 8005042:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005046:	bd70      	pop	{r4, r5, r6, pc}
 8005048:	f1c4 040c 	rsb	r4, r4, #12
 800504c:	f1c4 0520 	rsb	r5, r4, #32
 8005050:	fa00 f304 	lsl.w	r3, r0, r4
 8005054:	fa20 f005 	lsr.w	r0, r0, r5
 8005058:	fa01 f204 	lsl.w	r2, r1, r4
 800505c:	ea40 0002 	orr.w	r0, r0, r2
 8005060:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005064:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8005068:	f141 0100 	adc.w	r1, r1, #0
 800506c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005070:	bf08      	it	eq
 8005072:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005076:	bd70      	pop	{r4, r5, r6, pc}
 8005078:	f1c4 0520 	rsb	r5, r4, #32
 800507c:	fa00 f205 	lsl.w	r2, r0, r5
 8005080:	ea4e 0e02 	orr.w	lr, lr, r2
 8005084:	fa20 f304 	lsr.w	r3, r0, r4
 8005088:	fa01 f205 	lsl.w	r2, r1, r5
 800508c:	ea43 0302 	orr.w	r3, r3, r2
 8005090:	fa21 f004 	lsr.w	r0, r1, r4
 8005094:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005098:	fa21 f204 	lsr.w	r2, r1, r4
 800509c:	ea20 0002 	bic.w	r0, r0, r2
 80050a0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80050a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80050a8:	bf08      	it	eq
 80050aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80050ae:	bd70      	pop	{r4, r5, r6, pc}
 80050b0:	f094 0f00 	teq	r4, #0
 80050b4:	d10f      	bne.n	80050d6 <__aeabi_dmul+0x1c2>
 80050b6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80050ba:	0040      	lsls	r0, r0, #1
 80050bc:	eb41 0101 	adc.w	r1, r1, r1
 80050c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80050c4:	bf08      	it	eq
 80050c6:	3c01      	subeq	r4, #1
 80050c8:	d0f7      	beq.n	80050ba <__aeabi_dmul+0x1a6>
 80050ca:	ea41 0106 	orr.w	r1, r1, r6
 80050ce:	f095 0f00 	teq	r5, #0
 80050d2:	bf18      	it	ne
 80050d4:	4770      	bxne	lr
 80050d6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80050da:	0052      	lsls	r2, r2, #1
 80050dc:	eb43 0303 	adc.w	r3, r3, r3
 80050e0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80050e4:	bf08      	it	eq
 80050e6:	3d01      	subeq	r5, #1
 80050e8:	d0f7      	beq.n	80050da <__aeabi_dmul+0x1c6>
 80050ea:	ea43 0306 	orr.w	r3, r3, r6
 80050ee:	4770      	bx	lr
 80050f0:	ea94 0f0c 	teq	r4, ip
 80050f4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80050f8:	bf18      	it	ne
 80050fa:	ea95 0f0c 	teqne	r5, ip
 80050fe:	d00c      	beq.n	800511a <__aeabi_dmul+0x206>
 8005100:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005104:	bf18      	it	ne
 8005106:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800510a:	d1d1      	bne.n	80050b0 <__aeabi_dmul+0x19c>
 800510c:	ea81 0103 	eor.w	r1, r1, r3
 8005110:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005114:	f04f 0000 	mov.w	r0, #0
 8005118:	bd70      	pop	{r4, r5, r6, pc}
 800511a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800511e:	bf06      	itte	eq
 8005120:	4610      	moveq	r0, r2
 8005122:	4619      	moveq	r1, r3
 8005124:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005128:	d019      	beq.n	800515e <__aeabi_dmul+0x24a>
 800512a:	ea94 0f0c 	teq	r4, ip
 800512e:	d102      	bne.n	8005136 <__aeabi_dmul+0x222>
 8005130:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8005134:	d113      	bne.n	800515e <__aeabi_dmul+0x24a>
 8005136:	ea95 0f0c 	teq	r5, ip
 800513a:	d105      	bne.n	8005148 <__aeabi_dmul+0x234>
 800513c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8005140:	bf1c      	itt	ne
 8005142:	4610      	movne	r0, r2
 8005144:	4619      	movne	r1, r3
 8005146:	d10a      	bne.n	800515e <__aeabi_dmul+0x24a>
 8005148:	ea81 0103 	eor.w	r1, r1, r3
 800514c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005150:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8005154:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005158:	f04f 0000 	mov.w	r0, #0
 800515c:	bd70      	pop	{r4, r5, r6, pc}
 800515e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8005162:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8005166:	bd70      	pop	{r4, r5, r6, pc}

08005168 <__aeabi_ddiv>:
 8005168:	b570      	push	{r4, r5, r6, lr}
 800516a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800516e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8005172:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8005176:	bf1d      	ittte	ne
 8005178:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800517c:	ea94 0f0c 	teqne	r4, ip
 8005180:	ea95 0f0c 	teqne	r5, ip
 8005184:	f000 f8a7 	bleq	80052d6 <__aeabi_ddiv+0x16e>
 8005188:	eba4 0405 	sub.w	r4, r4, r5
 800518c:	ea81 0e03 	eor.w	lr, r1, r3
 8005190:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005194:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005198:	f000 8088 	beq.w	80052ac <__aeabi_ddiv+0x144>
 800519c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80051a0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80051a4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80051a8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80051ac:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80051b0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80051b4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80051b8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80051bc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80051c0:	429d      	cmp	r5, r3
 80051c2:	bf08      	it	eq
 80051c4:	4296      	cmpeq	r6, r2
 80051c6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80051ca:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80051ce:	d202      	bcs.n	80051d6 <__aeabi_ddiv+0x6e>
 80051d0:	085b      	lsrs	r3, r3, #1
 80051d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80051d6:	1ab6      	subs	r6, r6, r2
 80051d8:	eb65 0503 	sbc.w	r5, r5, r3
 80051dc:	085b      	lsrs	r3, r3, #1
 80051de:	ea4f 0232 	mov.w	r2, r2, rrx
 80051e2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80051e6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80051ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80051ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80051f2:	bf22      	ittt	cs
 80051f4:	1ab6      	subcs	r6, r6, r2
 80051f6:	4675      	movcs	r5, lr
 80051f8:	ea40 000c 	orrcs.w	r0, r0, ip
 80051fc:	085b      	lsrs	r3, r3, #1
 80051fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8005202:	ebb6 0e02 	subs.w	lr, r6, r2
 8005206:	eb75 0e03 	sbcs.w	lr, r5, r3
 800520a:	bf22      	ittt	cs
 800520c:	1ab6      	subcs	r6, r6, r2
 800520e:	4675      	movcs	r5, lr
 8005210:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8005214:	085b      	lsrs	r3, r3, #1
 8005216:	ea4f 0232 	mov.w	r2, r2, rrx
 800521a:	ebb6 0e02 	subs.w	lr, r6, r2
 800521e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005222:	bf22      	ittt	cs
 8005224:	1ab6      	subcs	r6, r6, r2
 8005226:	4675      	movcs	r5, lr
 8005228:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800522c:	085b      	lsrs	r3, r3, #1
 800522e:	ea4f 0232 	mov.w	r2, r2, rrx
 8005232:	ebb6 0e02 	subs.w	lr, r6, r2
 8005236:	eb75 0e03 	sbcs.w	lr, r5, r3
 800523a:	bf22      	ittt	cs
 800523c:	1ab6      	subcs	r6, r6, r2
 800523e:	4675      	movcs	r5, lr
 8005240:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8005244:	ea55 0e06 	orrs.w	lr, r5, r6
 8005248:	d018      	beq.n	800527c <__aeabi_ddiv+0x114>
 800524a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800524e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8005252:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8005256:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800525a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800525e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8005262:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8005266:	d1c0      	bne.n	80051ea <__aeabi_ddiv+0x82>
 8005268:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800526c:	d10b      	bne.n	8005286 <__aeabi_ddiv+0x11e>
 800526e:	ea41 0100 	orr.w	r1, r1, r0
 8005272:	f04f 0000 	mov.w	r0, #0
 8005276:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800527a:	e7b6      	b.n	80051ea <__aeabi_ddiv+0x82>
 800527c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005280:	bf04      	itt	eq
 8005282:	4301      	orreq	r1, r0
 8005284:	2000      	moveq	r0, #0
 8005286:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800528a:	bf88      	it	hi
 800528c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005290:	f63f aeaf 	bhi.w	8004ff2 <__aeabi_dmul+0xde>
 8005294:	ebb5 0c03 	subs.w	ip, r5, r3
 8005298:	bf04      	itt	eq
 800529a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800529e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80052a2:	f150 0000 	adcs.w	r0, r0, #0
 80052a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80052aa:	bd70      	pop	{r4, r5, r6, pc}
 80052ac:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80052b0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80052b4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80052b8:	bfc2      	ittt	gt
 80052ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80052be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80052c2:	bd70      	popgt	{r4, r5, r6, pc}
 80052c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80052c8:	f04f 0e00 	mov.w	lr, #0
 80052cc:	3c01      	subs	r4, #1
 80052ce:	e690      	b.n	8004ff2 <__aeabi_dmul+0xde>
 80052d0:	ea45 0e06 	orr.w	lr, r5, r6
 80052d4:	e68d      	b.n	8004ff2 <__aeabi_dmul+0xde>
 80052d6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80052da:	ea94 0f0c 	teq	r4, ip
 80052de:	bf08      	it	eq
 80052e0:	ea95 0f0c 	teqeq	r5, ip
 80052e4:	f43f af3b 	beq.w	800515e <__aeabi_dmul+0x24a>
 80052e8:	ea94 0f0c 	teq	r4, ip
 80052ec:	d10a      	bne.n	8005304 <__aeabi_ddiv+0x19c>
 80052ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80052f2:	f47f af34 	bne.w	800515e <__aeabi_dmul+0x24a>
 80052f6:	ea95 0f0c 	teq	r5, ip
 80052fa:	f47f af25 	bne.w	8005148 <__aeabi_dmul+0x234>
 80052fe:	4610      	mov	r0, r2
 8005300:	4619      	mov	r1, r3
 8005302:	e72c      	b.n	800515e <__aeabi_dmul+0x24a>
 8005304:	ea95 0f0c 	teq	r5, ip
 8005308:	d106      	bne.n	8005318 <__aeabi_ddiv+0x1b0>
 800530a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800530e:	f43f aefd 	beq.w	800510c <__aeabi_dmul+0x1f8>
 8005312:	4610      	mov	r0, r2
 8005314:	4619      	mov	r1, r3
 8005316:	e722      	b.n	800515e <__aeabi_dmul+0x24a>
 8005318:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800531c:	bf18      	it	ne
 800531e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005322:	f47f aec5 	bne.w	80050b0 <__aeabi_dmul+0x19c>
 8005326:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800532a:	f47f af0d 	bne.w	8005148 <__aeabi_dmul+0x234>
 800532e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8005332:	f47f aeeb 	bne.w	800510c <__aeabi_dmul+0x1f8>
 8005336:	e712      	b.n	800515e <__aeabi_dmul+0x24a>

08005338 <__aeabi_d2f>:
 8005338:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800533c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8005340:	bf24      	itt	cs
 8005342:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8005346:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800534a:	d90d      	bls.n	8005368 <__aeabi_d2f+0x30>
 800534c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8005350:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8005354:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8005358:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800535c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8005360:	bf08      	it	eq
 8005362:	f020 0001 	biceq.w	r0, r0, #1
 8005366:	4770      	bx	lr
 8005368:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800536c:	d121      	bne.n	80053b2 <__aeabi_d2f+0x7a>
 800536e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8005372:	bfbc      	itt	lt
 8005374:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8005378:	4770      	bxlt	lr
 800537a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800537e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8005382:	f1c2 0218 	rsb	r2, r2, #24
 8005386:	f1c2 0c20 	rsb	ip, r2, #32
 800538a:	fa10 f30c 	lsls.w	r3, r0, ip
 800538e:	fa20 f002 	lsr.w	r0, r0, r2
 8005392:	bf18      	it	ne
 8005394:	f040 0001 	orrne.w	r0, r0, #1
 8005398:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800539c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80053a0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80053a4:	ea40 000c 	orr.w	r0, r0, ip
 80053a8:	fa23 f302 	lsr.w	r3, r3, r2
 80053ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80053b0:	e7cc      	b.n	800534c <__aeabi_d2f+0x14>
 80053b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80053b6:	d107      	bne.n	80053c8 <__aeabi_d2f+0x90>
 80053b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80053bc:	bf1e      	ittt	ne
 80053be:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80053c2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80053c6:	4770      	bxne	lr
 80053c8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80053cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80053d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop

080053d8 <__aeabi_frsub>:
 80053d8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80053dc:	e002      	b.n	80053e4 <__addsf3>
 80053de:	bf00      	nop

080053e0 <__aeabi_fsub>:
 80053e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080053e4 <__addsf3>:
 80053e4:	0042      	lsls	r2, r0, #1
 80053e6:	bf1f      	itttt	ne
 80053e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80053ec:	ea92 0f03 	teqne	r2, r3
 80053f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80053f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80053f8:	d06a      	beq.n	80054d0 <__addsf3+0xec>
 80053fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80053fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8005402:	bfc1      	itttt	gt
 8005404:	18d2      	addgt	r2, r2, r3
 8005406:	4041      	eorgt	r1, r0
 8005408:	4048      	eorgt	r0, r1
 800540a:	4041      	eorgt	r1, r0
 800540c:	bfb8      	it	lt
 800540e:	425b      	neglt	r3, r3
 8005410:	2b19      	cmp	r3, #25
 8005412:	bf88      	it	hi
 8005414:	4770      	bxhi	lr
 8005416:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800541a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800541e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8005422:	bf18      	it	ne
 8005424:	4240      	negne	r0, r0
 8005426:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800542a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800542e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8005432:	bf18      	it	ne
 8005434:	4249      	negne	r1, r1
 8005436:	ea92 0f03 	teq	r2, r3
 800543a:	d03f      	beq.n	80054bc <__addsf3+0xd8>
 800543c:	f1a2 0201 	sub.w	r2, r2, #1
 8005440:	fa41 fc03 	asr.w	ip, r1, r3
 8005444:	eb10 000c 	adds.w	r0, r0, ip
 8005448:	f1c3 0320 	rsb	r3, r3, #32
 800544c:	fa01 f103 	lsl.w	r1, r1, r3
 8005450:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8005454:	d502      	bpl.n	800545c <__addsf3+0x78>
 8005456:	4249      	negs	r1, r1
 8005458:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800545c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8005460:	d313      	bcc.n	800548a <__addsf3+0xa6>
 8005462:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8005466:	d306      	bcc.n	8005476 <__addsf3+0x92>
 8005468:	0840      	lsrs	r0, r0, #1
 800546a:	ea4f 0131 	mov.w	r1, r1, rrx
 800546e:	f102 0201 	add.w	r2, r2, #1
 8005472:	2afe      	cmp	r2, #254	; 0xfe
 8005474:	d251      	bcs.n	800551a <__addsf3+0x136>
 8005476:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800547a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800547e:	bf08      	it	eq
 8005480:	f020 0001 	biceq.w	r0, r0, #1
 8005484:	ea40 0003 	orr.w	r0, r0, r3
 8005488:	4770      	bx	lr
 800548a:	0049      	lsls	r1, r1, #1
 800548c:	eb40 0000 	adc.w	r0, r0, r0
 8005490:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8005494:	f1a2 0201 	sub.w	r2, r2, #1
 8005498:	d1ed      	bne.n	8005476 <__addsf3+0x92>
 800549a:	fab0 fc80 	clz	ip, r0
 800549e:	f1ac 0c08 	sub.w	ip, ip, #8
 80054a2:	ebb2 020c 	subs.w	r2, r2, ip
 80054a6:	fa00 f00c 	lsl.w	r0, r0, ip
 80054aa:	bfaa      	itet	ge
 80054ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80054b0:	4252      	neglt	r2, r2
 80054b2:	4318      	orrge	r0, r3
 80054b4:	bfbc      	itt	lt
 80054b6:	40d0      	lsrlt	r0, r2
 80054b8:	4318      	orrlt	r0, r3
 80054ba:	4770      	bx	lr
 80054bc:	f092 0f00 	teq	r2, #0
 80054c0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80054c4:	bf06      	itte	eq
 80054c6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80054ca:	3201      	addeq	r2, #1
 80054cc:	3b01      	subne	r3, #1
 80054ce:	e7b5      	b.n	800543c <__addsf3+0x58>
 80054d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80054d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80054d8:	bf18      	it	ne
 80054da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80054de:	d021      	beq.n	8005524 <__addsf3+0x140>
 80054e0:	ea92 0f03 	teq	r2, r3
 80054e4:	d004      	beq.n	80054f0 <__addsf3+0x10c>
 80054e6:	f092 0f00 	teq	r2, #0
 80054ea:	bf08      	it	eq
 80054ec:	4608      	moveq	r0, r1
 80054ee:	4770      	bx	lr
 80054f0:	ea90 0f01 	teq	r0, r1
 80054f4:	bf1c      	itt	ne
 80054f6:	2000      	movne	r0, #0
 80054f8:	4770      	bxne	lr
 80054fa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80054fe:	d104      	bne.n	800550a <__addsf3+0x126>
 8005500:	0040      	lsls	r0, r0, #1
 8005502:	bf28      	it	cs
 8005504:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8005508:	4770      	bx	lr
 800550a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800550e:	bf3c      	itt	cc
 8005510:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8005514:	4770      	bxcc	lr
 8005516:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800551a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800551e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005522:	4770      	bx	lr
 8005524:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8005528:	bf16      	itet	ne
 800552a:	4608      	movne	r0, r1
 800552c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8005530:	4601      	movne	r1, r0
 8005532:	0242      	lsls	r2, r0, #9
 8005534:	bf06      	itte	eq
 8005536:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800553a:	ea90 0f01 	teqeq	r0, r1
 800553e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8005542:	4770      	bx	lr

08005544 <__aeabi_ui2f>:
 8005544:	f04f 0300 	mov.w	r3, #0
 8005548:	e004      	b.n	8005554 <__aeabi_i2f+0x8>
 800554a:	bf00      	nop

0800554c <__aeabi_i2f>:
 800554c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8005550:	bf48      	it	mi
 8005552:	4240      	negmi	r0, r0
 8005554:	ea5f 0c00 	movs.w	ip, r0
 8005558:	bf08      	it	eq
 800555a:	4770      	bxeq	lr
 800555c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8005560:	4601      	mov	r1, r0
 8005562:	f04f 0000 	mov.w	r0, #0
 8005566:	e01c      	b.n	80055a2 <__aeabi_l2f+0x2a>

08005568 <__aeabi_ul2f>:
 8005568:	ea50 0201 	orrs.w	r2, r0, r1
 800556c:	bf08      	it	eq
 800556e:	4770      	bxeq	lr
 8005570:	f04f 0300 	mov.w	r3, #0
 8005574:	e00a      	b.n	800558c <__aeabi_l2f+0x14>
 8005576:	bf00      	nop

08005578 <__aeabi_l2f>:
 8005578:	ea50 0201 	orrs.w	r2, r0, r1
 800557c:	bf08      	it	eq
 800557e:	4770      	bxeq	lr
 8005580:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8005584:	d502      	bpl.n	800558c <__aeabi_l2f+0x14>
 8005586:	4240      	negs	r0, r0
 8005588:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800558c:	ea5f 0c01 	movs.w	ip, r1
 8005590:	bf02      	ittt	eq
 8005592:	4684      	moveq	ip, r0
 8005594:	4601      	moveq	r1, r0
 8005596:	2000      	moveq	r0, #0
 8005598:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800559c:	bf08      	it	eq
 800559e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80055a2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80055a6:	fabc f28c 	clz	r2, ip
 80055aa:	3a08      	subs	r2, #8
 80055ac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80055b0:	db10      	blt.n	80055d4 <__aeabi_l2f+0x5c>
 80055b2:	fa01 fc02 	lsl.w	ip, r1, r2
 80055b6:	4463      	add	r3, ip
 80055b8:	fa00 fc02 	lsl.w	ip, r0, r2
 80055bc:	f1c2 0220 	rsb	r2, r2, #32
 80055c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80055c4:	fa20 f202 	lsr.w	r2, r0, r2
 80055c8:	eb43 0002 	adc.w	r0, r3, r2
 80055cc:	bf08      	it	eq
 80055ce:	f020 0001 	biceq.w	r0, r0, #1
 80055d2:	4770      	bx	lr
 80055d4:	f102 0220 	add.w	r2, r2, #32
 80055d8:	fa01 fc02 	lsl.w	ip, r1, r2
 80055dc:	f1c2 0220 	rsb	r2, r2, #32
 80055e0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80055e4:	fa21 f202 	lsr.w	r2, r1, r2
 80055e8:	eb43 0002 	adc.w	r0, r3, r2
 80055ec:	bf08      	it	eq
 80055ee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80055f2:	4770      	bx	lr

080055f4 <__aeabi_fmul>:
 80055f4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80055f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80055fc:	bf1e      	ittt	ne
 80055fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8005602:	ea92 0f0c 	teqne	r2, ip
 8005606:	ea93 0f0c 	teqne	r3, ip
 800560a:	d06f      	beq.n	80056ec <__aeabi_fmul+0xf8>
 800560c:	441a      	add	r2, r3
 800560e:	ea80 0c01 	eor.w	ip, r0, r1
 8005612:	0240      	lsls	r0, r0, #9
 8005614:	bf18      	it	ne
 8005616:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800561a:	d01e      	beq.n	800565a <__aeabi_fmul+0x66>
 800561c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005620:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8005624:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8005628:	fba0 3101 	umull	r3, r1, r0, r1
 800562c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8005630:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8005634:	bf3e      	ittt	cc
 8005636:	0049      	lslcc	r1, r1, #1
 8005638:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800563c:	005b      	lslcc	r3, r3, #1
 800563e:	ea40 0001 	orr.w	r0, r0, r1
 8005642:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8005646:	2afd      	cmp	r2, #253	; 0xfd
 8005648:	d81d      	bhi.n	8005686 <__aeabi_fmul+0x92>
 800564a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800564e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8005652:	bf08      	it	eq
 8005654:	f020 0001 	biceq.w	r0, r0, #1
 8005658:	4770      	bx	lr
 800565a:	f090 0f00 	teq	r0, #0
 800565e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8005662:	bf08      	it	eq
 8005664:	0249      	lsleq	r1, r1, #9
 8005666:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800566a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800566e:	3a7f      	subs	r2, #127	; 0x7f
 8005670:	bfc2      	ittt	gt
 8005672:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8005676:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800567a:	4770      	bxgt	lr
 800567c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005680:	f04f 0300 	mov.w	r3, #0
 8005684:	3a01      	subs	r2, #1
 8005686:	dc5d      	bgt.n	8005744 <__aeabi_fmul+0x150>
 8005688:	f112 0f19 	cmn.w	r2, #25
 800568c:	bfdc      	itt	le
 800568e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8005692:	4770      	bxle	lr
 8005694:	f1c2 0200 	rsb	r2, r2, #0
 8005698:	0041      	lsls	r1, r0, #1
 800569a:	fa21 f102 	lsr.w	r1, r1, r2
 800569e:	f1c2 0220 	rsb	r2, r2, #32
 80056a2:	fa00 fc02 	lsl.w	ip, r0, r2
 80056a6:	ea5f 0031 	movs.w	r0, r1, rrx
 80056aa:	f140 0000 	adc.w	r0, r0, #0
 80056ae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80056b2:	bf08      	it	eq
 80056b4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80056b8:	4770      	bx	lr
 80056ba:	f092 0f00 	teq	r2, #0
 80056be:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80056c2:	bf02      	ittt	eq
 80056c4:	0040      	lsleq	r0, r0, #1
 80056c6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80056ca:	3a01      	subeq	r2, #1
 80056cc:	d0f9      	beq.n	80056c2 <__aeabi_fmul+0xce>
 80056ce:	ea40 000c 	orr.w	r0, r0, ip
 80056d2:	f093 0f00 	teq	r3, #0
 80056d6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80056da:	bf02      	ittt	eq
 80056dc:	0049      	lsleq	r1, r1, #1
 80056de:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80056e2:	3b01      	subeq	r3, #1
 80056e4:	d0f9      	beq.n	80056da <__aeabi_fmul+0xe6>
 80056e6:	ea41 010c 	orr.w	r1, r1, ip
 80056ea:	e78f      	b.n	800560c <__aeabi_fmul+0x18>
 80056ec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80056f0:	ea92 0f0c 	teq	r2, ip
 80056f4:	bf18      	it	ne
 80056f6:	ea93 0f0c 	teqne	r3, ip
 80056fa:	d00a      	beq.n	8005712 <__aeabi_fmul+0x11e>
 80056fc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8005700:	bf18      	it	ne
 8005702:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8005706:	d1d8      	bne.n	80056ba <__aeabi_fmul+0xc6>
 8005708:	ea80 0001 	eor.w	r0, r0, r1
 800570c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8005710:	4770      	bx	lr
 8005712:	f090 0f00 	teq	r0, #0
 8005716:	bf17      	itett	ne
 8005718:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800571c:	4608      	moveq	r0, r1
 800571e:	f091 0f00 	teqne	r1, #0
 8005722:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8005726:	d014      	beq.n	8005752 <__aeabi_fmul+0x15e>
 8005728:	ea92 0f0c 	teq	r2, ip
 800572c:	d101      	bne.n	8005732 <__aeabi_fmul+0x13e>
 800572e:	0242      	lsls	r2, r0, #9
 8005730:	d10f      	bne.n	8005752 <__aeabi_fmul+0x15e>
 8005732:	ea93 0f0c 	teq	r3, ip
 8005736:	d103      	bne.n	8005740 <__aeabi_fmul+0x14c>
 8005738:	024b      	lsls	r3, r1, #9
 800573a:	bf18      	it	ne
 800573c:	4608      	movne	r0, r1
 800573e:	d108      	bne.n	8005752 <__aeabi_fmul+0x15e>
 8005740:	ea80 0001 	eor.w	r0, r0, r1
 8005744:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8005748:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800574c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005750:	4770      	bx	lr
 8005752:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8005756:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800575a:	4770      	bx	lr

0800575c <__aeabi_fdiv>:
 800575c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005760:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8005764:	bf1e      	ittt	ne
 8005766:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800576a:	ea92 0f0c 	teqne	r2, ip
 800576e:	ea93 0f0c 	teqne	r3, ip
 8005772:	d069      	beq.n	8005848 <__aeabi_fdiv+0xec>
 8005774:	eba2 0203 	sub.w	r2, r2, r3
 8005778:	ea80 0c01 	eor.w	ip, r0, r1
 800577c:	0249      	lsls	r1, r1, #9
 800577e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8005782:	d037      	beq.n	80057f4 <__aeabi_fdiv+0x98>
 8005784:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005788:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800578c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8005790:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8005794:	428b      	cmp	r3, r1
 8005796:	bf38      	it	cc
 8005798:	005b      	lslcc	r3, r3, #1
 800579a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800579e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80057a2:	428b      	cmp	r3, r1
 80057a4:	bf24      	itt	cs
 80057a6:	1a5b      	subcs	r3, r3, r1
 80057a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80057ac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80057b0:	bf24      	itt	cs
 80057b2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80057b6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80057ba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80057be:	bf24      	itt	cs
 80057c0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80057c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80057c8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80057cc:	bf24      	itt	cs
 80057ce:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80057d2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80057d6:	011b      	lsls	r3, r3, #4
 80057d8:	bf18      	it	ne
 80057da:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80057de:	d1e0      	bne.n	80057a2 <__aeabi_fdiv+0x46>
 80057e0:	2afd      	cmp	r2, #253	; 0xfd
 80057e2:	f63f af50 	bhi.w	8005686 <__aeabi_fmul+0x92>
 80057e6:	428b      	cmp	r3, r1
 80057e8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80057ec:	bf08      	it	eq
 80057ee:	f020 0001 	biceq.w	r0, r0, #1
 80057f2:	4770      	bx	lr
 80057f4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80057f8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80057fc:	327f      	adds	r2, #127	; 0x7f
 80057fe:	bfc2      	ittt	gt
 8005800:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8005804:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8005808:	4770      	bxgt	lr
 800580a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800580e:	f04f 0300 	mov.w	r3, #0
 8005812:	3a01      	subs	r2, #1
 8005814:	e737      	b.n	8005686 <__aeabi_fmul+0x92>
 8005816:	f092 0f00 	teq	r2, #0
 800581a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800581e:	bf02      	ittt	eq
 8005820:	0040      	lsleq	r0, r0, #1
 8005822:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8005826:	3a01      	subeq	r2, #1
 8005828:	d0f9      	beq.n	800581e <__aeabi_fdiv+0xc2>
 800582a:	ea40 000c 	orr.w	r0, r0, ip
 800582e:	f093 0f00 	teq	r3, #0
 8005832:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8005836:	bf02      	ittt	eq
 8005838:	0049      	lsleq	r1, r1, #1
 800583a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800583e:	3b01      	subeq	r3, #1
 8005840:	d0f9      	beq.n	8005836 <__aeabi_fdiv+0xda>
 8005842:	ea41 010c 	orr.w	r1, r1, ip
 8005846:	e795      	b.n	8005774 <__aeabi_fdiv+0x18>
 8005848:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800584c:	ea92 0f0c 	teq	r2, ip
 8005850:	d108      	bne.n	8005864 <__aeabi_fdiv+0x108>
 8005852:	0242      	lsls	r2, r0, #9
 8005854:	f47f af7d 	bne.w	8005752 <__aeabi_fmul+0x15e>
 8005858:	ea93 0f0c 	teq	r3, ip
 800585c:	f47f af70 	bne.w	8005740 <__aeabi_fmul+0x14c>
 8005860:	4608      	mov	r0, r1
 8005862:	e776      	b.n	8005752 <__aeabi_fmul+0x15e>
 8005864:	ea93 0f0c 	teq	r3, ip
 8005868:	d104      	bne.n	8005874 <__aeabi_fdiv+0x118>
 800586a:	024b      	lsls	r3, r1, #9
 800586c:	f43f af4c 	beq.w	8005708 <__aeabi_fmul+0x114>
 8005870:	4608      	mov	r0, r1
 8005872:	e76e      	b.n	8005752 <__aeabi_fmul+0x15e>
 8005874:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8005878:	bf18      	it	ne
 800587a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800587e:	d1ca      	bne.n	8005816 <__aeabi_fdiv+0xba>
 8005880:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8005884:	f47f af5c 	bne.w	8005740 <__aeabi_fmul+0x14c>
 8005888:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800588c:	f47f af3c 	bne.w	8005708 <__aeabi_fmul+0x114>
 8005890:	e75f      	b.n	8005752 <__aeabi_fmul+0x15e>
 8005892:	bf00      	nop

08005894 <__aeabi_f2uiz>:
 8005894:	0042      	lsls	r2, r0, #1
 8005896:	d20e      	bcs.n	80058b6 <__aeabi_f2uiz+0x22>
 8005898:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800589c:	d30b      	bcc.n	80058b6 <__aeabi_f2uiz+0x22>
 800589e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80058a2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80058a6:	d409      	bmi.n	80058bc <__aeabi_f2uiz+0x28>
 80058a8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80058ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058b0:	fa23 f002 	lsr.w	r0, r3, r2
 80058b4:	4770      	bx	lr
 80058b6:	f04f 0000 	mov.w	r0, #0
 80058ba:	4770      	bx	lr
 80058bc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80058c0:	d101      	bne.n	80058c6 <__aeabi_f2uiz+0x32>
 80058c2:	0242      	lsls	r2, r0, #9
 80058c4:	d102      	bne.n	80058cc <__aeabi_f2uiz+0x38>
 80058c6:	f04f 30ff 	mov.w	r0, #4294967295
 80058ca:	4770      	bx	lr
 80058cc:	f04f 0000 	mov.w	r0, #0
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop

080058d4 <__libc_init_array>:
 80058d4:	b570      	push	{r4, r5, r6, lr}
 80058d6:	4b0e      	ldr	r3, [pc, #56]	; (8005910 <__libc_init_array+0x3c>)
 80058d8:	4c0e      	ldr	r4, [pc, #56]	; (8005914 <__libc_init_array+0x40>)
 80058da:	1ae4      	subs	r4, r4, r3
 80058dc:	10a4      	asrs	r4, r4, #2
 80058de:	2500      	movs	r5, #0
 80058e0:	461e      	mov	r6, r3
 80058e2:	42a5      	cmp	r5, r4
 80058e4:	d004      	beq.n	80058f0 <__libc_init_array+0x1c>
 80058e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058ea:	4798      	blx	r3
 80058ec:	3501      	adds	r5, #1
 80058ee:	e7f8      	b.n	80058e2 <__libc_init_array+0xe>
 80058f0:	f7fc fbe0 	bl	80020b4 <_init>
 80058f4:	4c08      	ldr	r4, [pc, #32]	; (8005918 <__libc_init_array+0x44>)
 80058f6:	4b09      	ldr	r3, [pc, #36]	; (800591c <__libc_init_array+0x48>)
 80058f8:	1ae4      	subs	r4, r4, r3
 80058fa:	10a4      	asrs	r4, r4, #2
 80058fc:	2500      	movs	r5, #0
 80058fe:	461e      	mov	r6, r3
 8005900:	42a5      	cmp	r5, r4
 8005902:	d004      	beq.n	800590e <__libc_init_array+0x3a>
 8005904:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005908:	4798      	blx	r3
 800590a:	3501      	adds	r5, #1
 800590c:	e7f8      	b.n	8005900 <__libc_init_array+0x2c>
 800590e:	bd70      	pop	{r4, r5, r6, pc}
 8005910:	08007b44 	.word	0x08007b44
 8005914:	08007b44 	.word	0x08007b44
 8005918:	08007b44 	.word	0x08007b44
 800591c:	08007b44 	.word	0x08007b44

08005920 <memcpy>:
 8005920:	b510      	push	{r4, lr}
 8005922:	1e43      	subs	r3, r0, #1
 8005924:	440a      	add	r2, r1
 8005926:	4291      	cmp	r1, r2
 8005928:	d004      	beq.n	8005934 <memcpy+0x14>
 800592a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800592e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005932:	e7f8      	b.n	8005926 <memcpy+0x6>
 8005934:	bd10      	pop	{r4, pc}

08005936 <memset>:
 8005936:	4402      	add	r2, r0
 8005938:	4603      	mov	r3, r0
 800593a:	4293      	cmp	r3, r2
 800593c:	d002      	beq.n	8005944 <memset+0xe>
 800593e:	f803 1b01 	strb.w	r1, [r3], #1
 8005942:	e7fa      	b.n	800593a <memset+0x4>
 8005944:	4770      	bx	lr

08005946 <__cvt>:
 8005946:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800594a:	b088      	sub	sp, #32
 800594c:	2b00      	cmp	r3, #0
 800594e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005950:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005952:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005954:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005958:	461e      	mov	r6, r3
 800595a:	bfb8      	it	lt
 800595c:	f106 4300 	addlt.w	r3, r6, #2147483648	; 0x80000000
 8005960:	f027 0720 	bic.w	r7, r7, #32
 8005964:	bfb6      	itet	lt
 8005966:	461e      	movlt	r6, r3
 8005968:	2300      	movge	r3, #0
 800596a:	232d      	movlt	r3, #45	; 0x2d
 800596c:	2f46      	cmp	r7, #70	; 0x46
 800596e:	4614      	mov	r4, r2
 8005970:	700b      	strb	r3, [r1, #0]
 8005972:	d003      	beq.n	800597c <__cvt+0x36>
 8005974:	2f45      	cmp	r7, #69	; 0x45
 8005976:	d103      	bne.n	8005980 <__cvt+0x3a>
 8005978:	3501      	adds	r5, #1
 800597a:	e001      	b.n	8005980 <__cvt+0x3a>
 800597c:	2303      	movs	r3, #3
 800597e:	e000      	b.n	8005982 <__cvt+0x3c>
 8005980:	2302      	movs	r3, #2
 8005982:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
 8005986:	ab06      	add	r3, sp, #24
 8005988:	9303      	str	r3, [sp, #12]
 800598a:	ab07      	add	r3, sp, #28
 800598c:	9304      	str	r3, [sp, #16]
 800598e:	4622      	mov	r2, r4
 8005990:	4633      	mov	r3, r6
 8005992:	f000 fd1d 	bl	80063d0 <_dtoa_r>
 8005996:	2f47      	cmp	r7, #71	; 0x47
 8005998:	4680      	mov	r8, r0
 800599a:	d102      	bne.n	80059a2 <__cvt+0x5c>
 800599c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800599e:	07db      	lsls	r3, r3, #31
 80059a0:	d526      	bpl.n	80059f0 <__cvt+0xaa>
 80059a2:	2f46      	cmp	r7, #70	; 0x46
 80059a4:	eb08 0905 	add.w	r9, r8, r5
 80059a8:	d111      	bne.n	80059ce <__cvt+0x88>
 80059aa:	f898 3000 	ldrb.w	r3, [r8]
 80059ae:	2b30      	cmp	r3, #48	; 0x30
 80059b0:	d10a      	bne.n	80059c8 <__cvt+0x82>
 80059b2:	4620      	mov	r0, r4
 80059b4:	4631      	mov	r1, r6
 80059b6:	2200      	movs	r2, #0
 80059b8:	2300      	movs	r3, #0
 80059ba:	f002 f869 	bl	8007a90 <__aeabi_dcmpeq>
 80059be:	b918      	cbnz	r0, 80059c8 <__cvt+0x82>
 80059c0:	f1c5 0501 	rsb	r5, r5, #1
 80059c4:	f8ca 5000 	str.w	r5, [sl]
 80059c8:	f8da 3000 	ldr.w	r3, [sl]
 80059cc:	4499      	add	r9, r3
 80059ce:	4620      	mov	r0, r4
 80059d0:	4631      	mov	r1, r6
 80059d2:	2200      	movs	r2, #0
 80059d4:	2300      	movs	r3, #0
 80059d6:	f002 f85b 	bl	8007a90 <__aeabi_dcmpeq>
 80059da:	b108      	cbz	r0, 80059e0 <__cvt+0x9a>
 80059dc:	f8cd 901c 	str.w	r9, [sp, #28]
 80059e0:	9b07      	ldr	r3, [sp, #28]
 80059e2:	454b      	cmp	r3, r9
 80059e4:	d204      	bcs.n	80059f0 <__cvt+0xaa>
 80059e6:	1c5a      	adds	r2, r3, #1
 80059e8:	9207      	str	r2, [sp, #28]
 80059ea:	2230      	movs	r2, #48	; 0x30
 80059ec:	701a      	strb	r2, [r3, #0]
 80059ee:	e7f7      	b.n	80059e0 <__cvt+0x9a>
 80059f0:	9b07      	ldr	r3, [sp, #28]
 80059f2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80059f4:	ebc8 0303 	rsb	r3, r8, r3
 80059f8:	4640      	mov	r0, r8
 80059fa:	6013      	str	r3, [r2, #0]
 80059fc:	b008      	add	sp, #32
 80059fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005a02 <__exponent>:
 8005a02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a04:	4603      	mov	r3, r0
 8005a06:	2900      	cmp	r1, #0
 8005a08:	bfb8      	it	lt
 8005a0a:	4249      	neglt	r1, r1
 8005a0c:	f803 2b02 	strb.w	r2, [r3], #2
 8005a10:	bfb4      	ite	lt
 8005a12:	222d      	movlt	r2, #45	; 0x2d
 8005a14:	222b      	movge	r2, #43	; 0x2b
 8005a16:	2909      	cmp	r1, #9
 8005a18:	7042      	strb	r2, [r0, #1]
 8005a1a:	dd19      	ble.n	8005a50 <__exponent+0x4e>
 8005a1c:	f10d 0407 	add.w	r4, sp, #7
 8005a20:	4626      	mov	r6, r4
 8005a22:	220a      	movs	r2, #10
 8005a24:	fb91 f5f2 	sdiv	r5, r1, r2
 8005a28:	fb02 1115 	mls	r1, r2, r5, r1
 8005a2c:	3130      	adds	r1, #48	; 0x30
 8005a2e:	2d09      	cmp	r5, #9
 8005a30:	f804 1d01 	strb.w	r1, [r4, #-1]!
 8005a34:	4629      	mov	r1, r5
 8005a36:	dcf4      	bgt.n	8005a22 <__exponent+0x20>
 8005a38:	3130      	adds	r1, #48	; 0x30
 8005a3a:	1e65      	subs	r5, r4, #1
 8005a3c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005a40:	42b5      	cmp	r5, r6
 8005a42:	461a      	mov	r2, r3
 8005a44:	d20a      	bcs.n	8005a5c <__exponent+0x5a>
 8005a46:	f815 2b01 	ldrb.w	r2, [r5], #1
 8005a4a:	f803 2b01 	strb.w	r2, [r3], #1
 8005a4e:	e7f7      	b.n	8005a40 <__exponent+0x3e>
 8005a50:	2430      	movs	r4, #48	; 0x30
 8005a52:	461a      	mov	r2, r3
 8005a54:	4421      	add	r1, r4
 8005a56:	f802 4b02 	strb.w	r4, [r2], #2
 8005a5a:	7059      	strb	r1, [r3, #1]
 8005a5c:	1a10      	subs	r0, r2, r0
 8005a5e:	b002      	add	sp, #8
 8005a60:	bd70      	pop	{r4, r5, r6, pc}
	...

08005a64 <_printf_float>:
 8005a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a68:	b091      	sub	sp, #68	; 0x44
 8005a6a:	468b      	mov	fp, r1
 8005a6c:	4615      	mov	r5, r2
 8005a6e:	461e      	mov	r6, r3
 8005a70:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8005a72:	4604      	mov	r4, r0
 8005a74:	f001 fa6c 	bl	8006f50 <_localeconv_r>
 8005a78:	f8d0 a000 	ldr.w	sl, [r0]
 8005a7c:	4650      	mov	r0, sl
 8005a7e:	f000 fc11 	bl	80062a4 <strlen>
 8005a82:	2300      	movs	r3, #0
 8005a84:	930e      	str	r3, [sp, #56]	; 0x38
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	9009      	str	r0, [sp, #36]	; 0x24
 8005a8a:	3307      	adds	r3, #7
 8005a8c:	f023 0307 	bic.w	r3, r3, #7
 8005a90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005a94:	f103 0208 	add.w	r2, r3, #8
 8005a98:	f89b 8018 	ldrb.w	r8, [fp, #24]
 8005a9c:	603a      	str	r2, [r7, #0]
 8005a9e:	e9cb 0112 	strd	r0, r1, [fp, #72]	; 0x48
 8005aa2:	f000 fbb3 	bl	800620c <__fpclassifyd>
 8005aa6:	2801      	cmp	r0, #1
 8005aa8:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 8005aac:	d119      	bne.n	8005ae2 <_printf_float+0x7e>
 8005aae:	2200      	movs	r2, #0
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	f001 fff7 	bl	8007aa4 <__aeabi_dcmplt>
 8005ab6:	b110      	cbz	r0, 8005abe <_printf_float+0x5a>
 8005ab8:	232d      	movs	r3, #45	; 0x2d
 8005aba:	f88b 3043 	strb.w	r3, [fp, #67]	; 0x43
 8005abe:	4ba0      	ldr	r3, [pc, #640]	; (8005d40 <_printf_float+0x2dc>)
 8005ac0:	4fa0      	ldr	r7, [pc, #640]	; (8005d44 <_printf_float+0x2e0>)
 8005ac2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005ac6:	bf88      	it	hi
 8005ac8:	461f      	movhi	r7, r3
 8005aca:	2303      	movs	r3, #3
 8005acc:	f8cb 3010 	str.w	r3, [fp, #16]
 8005ad0:	f8db 3000 	ldr.w	r3, [fp]
 8005ad4:	f023 0304 	bic.w	r3, r3, #4
 8005ad8:	f8cb 3000 	str.w	r3, [fp]
 8005adc:	f04f 0900 	mov.w	r9, #0
 8005ae0:	e0a1      	b.n	8005c26 <_printf_float+0x1c2>
 8005ae2:	f000 fb93 	bl	800620c <__fpclassifyd>
 8005ae6:	f8db 3000 	ldr.w	r3, [fp]
 8005aea:	b948      	cbnz	r0, 8005b00 <_printf_float+0x9c>
 8005aec:	4a96      	ldr	r2, [pc, #600]	; (8005d48 <_printf_float+0x2e4>)
 8005aee:	4f97      	ldr	r7, [pc, #604]	; (8005d4c <_printf_float+0x2e8>)
 8005af0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005af4:	bf88      	it	hi
 8005af6:	4617      	movhi	r7, r2
 8005af8:	2203      	movs	r2, #3
 8005afa:	f8cb 2010 	str.w	r2, [fp, #16]
 8005afe:	e7e9      	b.n	8005ad4 <_printf_float+0x70>
 8005b00:	f8db 2004 	ldr.w	r2, [fp, #4]
 8005b04:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 8005b08:	1c57      	adds	r7, r2, #1
 8005b0a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005b0e:	d101      	bne.n	8005b14 <_printf_float+0xb0>
 8005b10:	2206      	movs	r2, #6
 8005b12:	e009      	b.n	8005b28 <_printf_float+0xc4>
 8005b14:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8005b18:	d002      	beq.n	8005b20 <_printf_float+0xbc>
 8005b1a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005b1e:	d105      	bne.n	8005b2c <_printf_float+0xc8>
 8005b20:	2a00      	cmp	r2, #0
 8005b22:	f040 81c7 	bne.w	8005eb4 <_printf_float+0x450>
 8005b26:	2201      	movs	r2, #1
 8005b28:	f8cb 2004 	str.w	r2, [fp, #4]
 8005b2c:	f8db 2004 	ldr.w	r2, [fp, #4]
 8005b30:	f8cd 8010 	str.w	r8, [sp, #16]
 8005b34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b38:	e88d 000c 	stmia.w	sp, {r2, r3}
 8005b3c:	f8cb 3000 	str.w	r3, [fp]
 8005b40:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8005b44:	9302      	str	r3, [sp, #8]
 8005b46:	ab0d      	add	r3, sp, #52	; 0x34
 8005b48:	9303      	str	r3, [sp, #12]
 8005b4a:	ab0e      	add	r3, sp, #56	; 0x38
 8005b4c:	9305      	str	r3, [sp, #20]
 8005b4e:	2300      	movs	r3, #0
 8005b50:	9306      	str	r3, [sp, #24]
 8005b52:	4620      	mov	r0, r4
 8005b54:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005b58:	f7ff fef5 	bl	8005946 <__cvt>
 8005b5c:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8005b60:	2b47      	cmp	r3, #71	; 0x47
 8005b62:	4607      	mov	r7, r0
 8005b64:	d10a      	bne.n	8005b7c <_printf_float+0x118>
 8005b66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b68:	1cd8      	adds	r0, r3, #3
 8005b6a:	db03      	blt.n	8005b74 <_printf_float+0x110>
 8005b6c:	f8db 2004 	ldr.w	r2, [fp, #4]
 8005b70:	4293      	cmp	r3, r2
 8005b72:	dd37      	ble.n	8005be4 <_printf_float+0x180>
 8005b74:	f1a8 0802 	sub.w	r8, r8, #2
 8005b78:	fa5f f888 	uxtb.w	r8, r8
 8005b7c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005b80:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005b82:	d815      	bhi.n	8005bb0 <_printf_float+0x14c>
 8005b84:	3901      	subs	r1, #1
 8005b86:	4642      	mov	r2, r8
 8005b88:	f10b 0050 	add.w	r0, fp, #80	; 0x50
 8005b8c:	910d      	str	r1, [sp, #52]	; 0x34
 8005b8e:	f7ff ff38 	bl	8005a02 <__exponent>
 8005b92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b94:	1883      	adds	r3, r0, r2
 8005b96:	2a01      	cmp	r2, #1
 8005b98:	4681      	mov	r9, r0
 8005b9a:	f8cb 3010 	str.w	r3, [fp, #16]
 8005b9e:	dc03      	bgt.n	8005ba8 <_printf_float+0x144>
 8005ba0:	f8db 2000 	ldr.w	r2, [fp]
 8005ba4:	07d1      	lsls	r1, r2, #31
 8005ba6:	d538      	bpl.n	8005c1a <_printf_float+0x1b6>
 8005ba8:	3301      	adds	r3, #1
 8005baa:	f8cb 3010 	str.w	r3, [fp, #16]
 8005bae:	e034      	b.n	8005c1a <_printf_float+0x1b6>
 8005bb0:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8005bb4:	d118      	bne.n	8005be8 <_printf_float+0x184>
 8005bb6:	2900      	cmp	r1, #0
 8005bb8:	f8db 3004 	ldr.w	r3, [fp, #4]
 8005bbc:	dd09      	ble.n	8005bd2 <_printf_float+0x16e>
 8005bbe:	f8cb 1010 	str.w	r1, [fp, #16]
 8005bc2:	b91b      	cbnz	r3, 8005bcc <_printf_float+0x168>
 8005bc4:	f8db 2000 	ldr.w	r2, [fp]
 8005bc8:	07d2      	lsls	r2, r2, #31
 8005bca:	d521      	bpl.n	8005c10 <_printf_float+0x1ac>
 8005bcc:	3301      	adds	r3, #1
 8005bce:	440b      	add	r3, r1
 8005bd0:	e01c      	b.n	8005c0c <_printf_float+0x1a8>
 8005bd2:	b91b      	cbnz	r3, 8005bdc <_printf_float+0x178>
 8005bd4:	f8db 2000 	ldr.w	r2, [fp]
 8005bd8:	07d0      	lsls	r0, r2, #31
 8005bda:	d501      	bpl.n	8005be0 <_printf_float+0x17c>
 8005bdc:	3302      	adds	r3, #2
 8005bde:	e015      	b.n	8005c0c <_printf_float+0x1a8>
 8005be0:	2301      	movs	r3, #1
 8005be2:	e013      	b.n	8005c0c <_printf_float+0x1a8>
 8005be4:	f04f 0867 	mov.w	r8, #103	; 0x67
 8005be8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005bec:	4293      	cmp	r3, r2
 8005bee:	db07      	blt.n	8005c00 <_printf_float+0x19c>
 8005bf0:	f8db 2000 	ldr.w	r2, [fp]
 8005bf4:	f8cb 3010 	str.w	r3, [fp, #16]
 8005bf8:	07d1      	lsls	r1, r2, #31
 8005bfa:	d509      	bpl.n	8005c10 <_printf_float+0x1ac>
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	e005      	b.n	8005c0c <_printf_float+0x1a8>
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	bfd4      	ite	le
 8005c04:	f1c3 0302 	rsble	r3, r3, #2
 8005c08:	2301      	movgt	r3, #1
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f8cb 3010 	str.w	r3, [fp, #16]
 8005c10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c12:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 8005c16:	f04f 0900 	mov.w	r9, #0
 8005c1a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005c1e:	b113      	cbz	r3, 8005c26 <_printf_float+0x1c2>
 8005c20:	232d      	movs	r3, #45	; 0x2d
 8005c22:	f88b 3043 	strb.w	r3, [fp, #67]	; 0x43
 8005c26:	9600      	str	r6, [sp, #0]
 8005c28:	4620      	mov	r0, r4
 8005c2a:	4659      	mov	r1, fp
 8005c2c:	aa0f      	add	r2, sp, #60	; 0x3c
 8005c2e:	462b      	mov	r3, r5
 8005c30:	f000 f95c 	bl	8005eec <_printf_common>
 8005c34:	3001      	adds	r0, #1
 8005c36:	d102      	bne.n	8005c3e <_printf_float+0x1da>
 8005c38:	f04f 30ff 	mov.w	r0, #4294967295
 8005c3c:	e152      	b.n	8005ee4 <_printf_float+0x480>
 8005c3e:	f8db 3000 	ldr.w	r3, [fp]
 8005c42:	055a      	lsls	r2, r3, #21
 8005c44:	d405      	bmi.n	8005c52 <_printf_float+0x1ee>
 8005c46:	4620      	mov	r0, r4
 8005c48:	4629      	mov	r1, r5
 8005c4a:	463a      	mov	r2, r7
 8005c4c:	f8db 3010 	ldr.w	r3, [fp, #16]
 8005c50:	e108      	b.n	8005e64 <_printf_float+0x400>
 8005c52:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005c56:	f240 80d0 	bls.w	8005dfa <_printf_float+0x396>
 8005c5a:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 8005c5e:	2200      	movs	r2, #0
 8005c60:	2300      	movs	r3, #0
 8005c62:	f001 ff15 	bl	8007a90 <__aeabi_dcmpeq>
 8005c66:	b350      	cbz	r0, 8005cbe <_printf_float+0x25a>
 8005c68:	4620      	mov	r0, r4
 8005c6a:	4629      	mov	r1, r5
 8005c6c:	4a38      	ldr	r2, [pc, #224]	; (8005d50 <_printf_float+0x2ec>)
 8005c6e:	2301      	movs	r3, #1
 8005c70:	47b0      	blx	r6
 8005c72:	3001      	adds	r0, #1
 8005c74:	d0e0      	beq.n	8005c38 <_printf_float+0x1d4>
 8005c76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	db09      	blt.n	8005c92 <_printf_float+0x22e>
 8005c7e:	f8db 3000 	ldr.w	r3, [fp]
 8005c82:	07d8      	lsls	r0, r3, #31
 8005c84:	d405      	bmi.n	8005c92 <_printf_float+0x22e>
 8005c86:	f8db 3000 	ldr.w	r3, [fp]
 8005c8a:	079f      	lsls	r7, r3, #30
 8005c8c:	f100 8110 	bmi.w	8005eb0 <_printf_float+0x44c>
 8005c90:	e107      	b.n	8005ea2 <_printf_float+0x43e>
 8005c92:	4620      	mov	r0, r4
 8005c94:	4629      	mov	r1, r5
 8005c96:	4652      	mov	r2, sl
 8005c98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c9a:	47b0      	blx	r6
 8005c9c:	3001      	adds	r0, #1
 8005c9e:	d0cb      	beq.n	8005c38 <_printf_float+0x1d4>
 8005ca0:	2700      	movs	r7, #0
 8005ca2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	429f      	cmp	r7, r3
 8005ca8:	daed      	bge.n	8005c86 <_printf_float+0x222>
 8005caa:	4620      	mov	r0, r4
 8005cac:	4629      	mov	r1, r5
 8005cae:	f10b 021a 	add.w	r2, fp, #26
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	47b0      	blx	r6
 8005cb6:	3001      	adds	r0, #1
 8005cb8:	d0be      	beq.n	8005c38 <_printf_float+0x1d4>
 8005cba:	3701      	adds	r7, #1
 8005cbc:	e7f1      	b.n	8005ca2 <_printf_float+0x23e>
 8005cbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	dc29      	bgt.n	8005d18 <_printf_float+0x2b4>
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	4629      	mov	r1, r5
 8005cc8:	4a21      	ldr	r2, [pc, #132]	; (8005d50 <_printf_float+0x2ec>)
 8005cca:	2301      	movs	r3, #1
 8005ccc:	47b0      	blx	r6
 8005cce:	3001      	adds	r0, #1
 8005cd0:	d0b2      	beq.n	8005c38 <_printf_float+0x1d4>
 8005cd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cd4:	b92b      	cbnz	r3, 8005ce2 <_printf_float+0x27e>
 8005cd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cd8:	b91b      	cbnz	r3, 8005ce2 <_printf_float+0x27e>
 8005cda:	f8db 3000 	ldr.w	r3, [fp]
 8005cde:	07d9      	lsls	r1, r3, #31
 8005ce0:	d5d1      	bpl.n	8005c86 <_printf_float+0x222>
 8005ce2:	4620      	mov	r0, r4
 8005ce4:	4629      	mov	r1, r5
 8005ce6:	4652      	mov	r2, sl
 8005ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cea:	47b0      	blx	r6
 8005cec:	3001      	adds	r0, #1
 8005cee:	d0a3      	beq.n	8005c38 <_printf_float+0x1d4>
 8005cf0:	f04f 0800 	mov.w	r8, #0
 8005cf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cf6:	425b      	negs	r3, r3
 8005cf8:	4598      	cmp	r8, r3
 8005cfa:	4620      	mov	r0, r4
 8005cfc:	4629      	mov	r1, r5
 8005cfe:	da08      	bge.n	8005d12 <_printf_float+0x2ae>
 8005d00:	f10b 021a 	add.w	r2, fp, #26
 8005d04:	2301      	movs	r3, #1
 8005d06:	47b0      	blx	r6
 8005d08:	3001      	adds	r0, #1
 8005d0a:	d095      	beq.n	8005c38 <_printf_float+0x1d4>
 8005d0c:	f108 0801 	add.w	r8, r8, #1
 8005d10:	e7f0      	b.n	8005cf4 <_printf_float+0x290>
 8005d12:	463a      	mov	r2, r7
 8005d14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d16:	e0a5      	b.n	8005e64 <_printf_float+0x400>
 8005d18:	f8db 2058 	ldr.w	r2, [fp, #88]	; 0x58
 8005d1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	bfa8      	it	ge
 8005d22:	461a      	movge	r2, r3
 8005d24:	2a00      	cmp	r2, #0
 8005d26:	4691      	mov	r9, r2
 8005d28:	dc02      	bgt.n	8005d30 <_printf_float+0x2cc>
 8005d2a:	f04f 0800 	mov.w	r8, #0
 8005d2e:	e01c      	b.n	8005d6a <_printf_float+0x306>
 8005d30:	4620      	mov	r0, r4
 8005d32:	4629      	mov	r1, r5
 8005d34:	463a      	mov	r2, r7
 8005d36:	464b      	mov	r3, r9
 8005d38:	47b0      	blx	r6
 8005d3a:	3001      	adds	r0, #1
 8005d3c:	d1f5      	bne.n	8005d2a <_printf_float+0x2c6>
 8005d3e:	e77b      	b.n	8005c38 <_printf_float+0x1d4>
 8005d40:	08007cd0 	.word	0x08007cd0
 8005d44:	08007ccc 	.word	0x08007ccc
 8005d48:	08007cd8 	.word	0x08007cd8
 8005d4c:	08007cd4 	.word	0x08007cd4
 8005d50:	08007cdc 	.word	0x08007cdc
 8005d54:	4620      	mov	r0, r4
 8005d56:	4629      	mov	r1, r5
 8005d58:	f10b 021a 	add.w	r2, fp, #26
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	47b0      	blx	r6
 8005d60:	3001      	adds	r0, #1
 8005d62:	f43f af69 	beq.w	8005c38 <_printf_float+0x1d4>
 8005d66:	f108 0801 	add.w	r8, r8, #1
 8005d6a:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 8005d6e:	f1b9 0f00 	cmp.w	r9, #0
 8005d72:	bfac      	ite	ge
 8005d74:	ebc9 0203 	rsbge	r2, r9, r3
 8005d78:	461a      	movlt	r2, r3
 8005d7a:	4590      	cmp	r8, r2
 8005d7c:	dbea      	blt.n	8005d54 <_printf_float+0x2f0>
 8005d7e:	eb07 0803 	add.w	r8, r7, r3
 8005d82:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d86:	429a      	cmp	r2, r3
 8005d88:	db10      	blt.n	8005dac <_printf_float+0x348>
 8005d8a:	f8db 3000 	ldr.w	r3, [fp]
 8005d8e:	07da      	lsls	r2, r3, #31
 8005d90:	d40c      	bmi.n	8005dac <_printf_float+0x348>
 8005d92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d94:	4417      	add	r7, r2
 8005d96:	ebc8 0307 	rsb	r3, r8, r7
 8005d9a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005d9c:	1bd2      	subs	r2, r2, r7
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	bfa8      	it	ge
 8005da2:	4613      	movge	r3, r2
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	461f      	mov	r7, r3
 8005da8:	dc08      	bgt.n	8005dbc <_printf_float+0x358>
 8005daa:	e00e      	b.n	8005dca <_printf_float+0x366>
 8005dac:	4620      	mov	r0, r4
 8005dae:	4629      	mov	r1, r5
 8005db0:	4652      	mov	r2, sl
 8005db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005db4:	47b0      	blx	r6
 8005db6:	3001      	adds	r0, #1
 8005db8:	d1eb      	bne.n	8005d92 <_printf_float+0x32e>
 8005dba:	e73d      	b.n	8005c38 <_printf_float+0x1d4>
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	4629      	mov	r1, r5
 8005dc0:	4642      	mov	r2, r8
 8005dc2:	47b0      	blx	r6
 8005dc4:	3001      	adds	r0, #1
 8005dc6:	f43f af37 	beq.w	8005c38 <_printf_float+0x1d4>
 8005dca:	f04f 0800 	mov.w	r8, #0
 8005dce:	e00a      	b.n	8005de6 <_printf_float+0x382>
 8005dd0:	4620      	mov	r0, r4
 8005dd2:	4629      	mov	r1, r5
 8005dd4:	f10b 021a 	add.w	r2, fp, #26
 8005dd8:	2301      	movs	r3, #1
 8005dda:	47b0      	blx	r6
 8005ddc:	3001      	adds	r0, #1
 8005dde:	f43f af2b 	beq.w	8005c38 <_printf_float+0x1d4>
 8005de2:	f108 0801 	add.w	r8, r8, #1
 8005de6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005de8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005dea:	2f00      	cmp	r7, #0
 8005dec:	eba3 0302 	sub.w	r3, r3, r2
 8005df0:	bfa8      	it	ge
 8005df2:	1bdb      	subge	r3, r3, r7
 8005df4:	4598      	cmp	r8, r3
 8005df6:	dbeb      	blt.n	8005dd0 <_printf_float+0x36c>
 8005df8:	e745      	b.n	8005c86 <_printf_float+0x222>
 8005dfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005dfc:	2a01      	cmp	r2, #1
 8005dfe:	dc01      	bgt.n	8005e04 <_printf_float+0x3a0>
 8005e00:	07db      	lsls	r3, r3, #31
 8005e02:	d536      	bpl.n	8005e72 <_printf_float+0x40e>
 8005e04:	4620      	mov	r0, r4
 8005e06:	4629      	mov	r1, r5
 8005e08:	463a      	mov	r2, r7
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	47b0      	blx	r6
 8005e0e:	3001      	adds	r0, #1
 8005e10:	f43f af12 	beq.w	8005c38 <_printf_float+0x1d4>
 8005e14:	4620      	mov	r0, r4
 8005e16:	4629      	mov	r1, r5
 8005e18:	4652      	mov	r2, sl
 8005e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e1c:	47b0      	blx	r6
 8005e1e:	3001      	adds	r0, #1
 8005e20:	f43f af0a 	beq.w	8005c38 <_printf_float+0x1d4>
 8005e24:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 8005e28:	2200      	movs	r2, #0
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	f001 fe30 	bl	8007a90 <__aeabi_dcmpeq>
 8005e30:	b9e8      	cbnz	r0, 8005e6e <_printf_float+0x40a>
 8005e32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e34:	4620      	mov	r0, r4
 8005e36:	4629      	mov	r1, r5
 8005e38:	1c7a      	adds	r2, r7, #1
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	e01d      	b.n	8005e7a <_printf_float+0x416>
 8005e3e:	4620      	mov	r0, r4
 8005e40:	4629      	mov	r1, r5
 8005e42:	f10b 021a 	add.w	r2, fp, #26
 8005e46:	2301      	movs	r3, #1
 8005e48:	47b0      	blx	r6
 8005e4a:	3001      	adds	r0, #1
 8005e4c:	f43f aef4 	beq.w	8005c38 <_printf_float+0x1d4>
 8005e50:	3701      	adds	r7, #1
 8005e52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e54:	3b01      	subs	r3, #1
 8005e56:	429f      	cmp	r7, r3
 8005e58:	dbf1      	blt.n	8005e3e <_printf_float+0x3da>
 8005e5a:	4620      	mov	r0, r4
 8005e5c:	4629      	mov	r1, r5
 8005e5e:	f10b 0250 	add.w	r2, fp, #80	; 0x50
 8005e62:	464b      	mov	r3, r9
 8005e64:	47b0      	blx	r6
 8005e66:	3001      	adds	r0, #1
 8005e68:	f47f af0d 	bne.w	8005c86 <_printf_float+0x222>
 8005e6c:	e6e4      	b.n	8005c38 <_printf_float+0x1d4>
 8005e6e:	2700      	movs	r7, #0
 8005e70:	e7ef      	b.n	8005e52 <_printf_float+0x3ee>
 8005e72:	4620      	mov	r0, r4
 8005e74:	4629      	mov	r1, r5
 8005e76:	463a      	mov	r2, r7
 8005e78:	2301      	movs	r3, #1
 8005e7a:	47b0      	blx	r6
 8005e7c:	3001      	adds	r0, #1
 8005e7e:	d1ec      	bne.n	8005e5a <_printf_float+0x3f6>
 8005e80:	e6da      	b.n	8005c38 <_printf_float+0x1d4>
 8005e82:	4620      	mov	r0, r4
 8005e84:	4629      	mov	r1, r5
 8005e86:	f10b 0219 	add.w	r2, fp, #25
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	47b0      	blx	r6
 8005e8e:	3001      	adds	r0, #1
 8005e90:	f43f aed2 	beq.w	8005c38 <_printf_float+0x1d4>
 8005e94:	3701      	adds	r7, #1
 8005e96:	f8db 300c 	ldr.w	r3, [fp, #12]
 8005e9a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005e9c:	1a9b      	subs	r3, r3, r2
 8005e9e:	429f      	cmp	r7, r3
 8005ea0:	dbef      	blt.n	8005e82 <_printf_float+0x41e>
 8005ea2:	f8db 000c 	ldr.w	r0, [fp, #12]
 8005ea6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ea8:	4298      	cmp	r0, r3
 8005eaa:	bfb8      	it	lt
 8005eac:	4618      	movlt	r0, r3
 8005eae:	e019      	b.n	8005ee4 <_printf_float+0x480>
 8005eb0:	2700      	movs	r7, #0
 8005eb2:	e7f0      	b.n	8005e96 <_printf_float+0x432>
 8005eb4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005eb8:	e88d 000c 	stmia.w	sp, {r2, r3}
 8005ebc:	f8cb 3000 	str.w	r3, [fp]
 8005ec0:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8005ec4:	9302      	str	r3, [sp, #8]
 8005ec6:	ab0d      	add	r3, sp, #52	; 0x34
 8005ec8:	9303      	str	r3, [sp, #12]
 8005eca:	ab0e      	add	r3, sp, #56	; 0x38
 8005ecc:	9305      	str	r3, [sp, #20]
 8005ece:	2300      	movs	r3, #0
 8005ed0:	9306      	str	r3, [sp, #24]
 8005ed2:	f8cd 8010 	str.w	r8, [sp, #16]
 8005ed6:	4620      	mov	r0, r4
 8005ed8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005edc:	f7ff fd33 	bl	8005946 <__cvt>
 8005ee0:	4607      	mov	r7, r0
 8005ee2:	e640      	b.n	8005b66 <_printf_float+0x102>
 8005ee4:	b011      	add	sp, #68	; 0x44
 8005ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eea:	bf00      	nop

08005eec <_printf_common>:
 8005eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ef0:	4691      	mov	r9, r2
 8005ef2:	461f      	mov	r7, r3
 8005ef4:	688a      	ldr	r2, [r1, #8]
 8005ef6:	690b      	ldr	r3, [r1, #16]
 8005ef8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005efc:	4293      	cmp	r3, r2
 8005efe:	bfb8      	it	lt
 8005f00:	4613      	movlt	r3, r2
 8005f02:	f8c9 3000 	str.w	r3, [r9]
 8005f06:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f0a:	4606      	mov	r6, r0
 8005f0c:	460c      	mov	r4, r1
 8005f0e:	b112      	cbz	r2, 8005f16 <_printf_common+0x2a>
 8005f10:	3301      	adds	r3, #1
 8005f12:	f8c9 3000 	str.w	r3, [r9]
 8005f16:	6823      	ldr	r3, [r4, #0]
 8005f18:	0699      	lsls	r1, r3, #26
 8005f1a:	bf42      	ittt	mi
 8005f1c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005f20:	3302      	addmi	r3, #2
 8005f22:	f8c9 3000 	strmi.w	r3, [r9]
 8005f26:	6825      	ldr	r5, [r4, #0]
 8005f28:	f015 0506 	ands.w	r5, r5, #6
 8005f2c:	d01c      	beq.n	8005f68 <_printf_common+0x7c>
 8005f2e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005f32:	6822      	ldr	r2, [r4, #0]
 8005f34:	3300      	adds	r3, #0
 8005f36:	bf18      	it	ne
 8005f38:	2301      	movne	r3, #1
 8005f3a:	0692      	lsls	r2, r2, #26
 8005f3c:	d51f      	bpl.n	8005f7e <_printf_common+0x92>
 8005f3e:	18e1      	adds	r1, r4, r3
 8005f40:	1c5a      	adds	r2, r3, #1
 8005f42:	2030      	movs	r0, #48	; 0x30
 8005f44:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f48:	4422      	add	r2, r4
 8005f4a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f4e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f52:	3302      	adds	r3, #2
 8005f54:	e013      	b.n	8005f7e <_printf_common+0x92>
 8005f56:	4630      	mov	r0, r6
 8005f58:	4639      	mov	r1, r7
 8005f5a:	f104 0219 	add.w	r2, r4, #25
 8005f5e:	2301      	movs	r3, #1
 8005f60:	47c0      	blx	r8
 8005f62:	3001      	adds	r0, #1
 8005f64:	d007      	beq.n	8005f76 <_printf_common+0x8a>
 8005f66:	3501      	adds	r5, #1
 8005f68:	68e3      	ldr	r3, [r4, #12]
 8005f6a:	f8d9 2000 	ldr.w	r2, [r9]
 8005f6e:	1a9b      	subs	r3, r3, r2
 8005f70:	429d      	cmp	r5, r3
 8005f72:	dbf0      	blt.n	8005f56 <_printf_common+0x6a>
 8005f74:	e7db      	b.n	8005f2e <_printf_common+0x42>
 8005f76:	f04f 30ff 	mov.w	r0, #4294967295
 8005f7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f7e:	4630      	mov	r0, r6
 8005f80:	4639      	mov	r1, r7
 8005f82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f86:	47c0      	blx	r8
 8005f88:	3001      	adds	r0, #1
 8005f8a:	d0f4      	beq.n	8005f76 <_printf_common+0x8a>
 8005f8c:	6822      	ldr	r2, [r4, #0]
 8005f8e:	f8d9 5000 	ldr.w	r5, [r9]
 8005f92:	68e3      	ldr	r3, [r4, #12]
 8005f94:	f002 0206 	and.w	r2, r2, #6
 8005f98:	2a04      	cmp	r2, #4
 8005f9a:	bf08      	it	eq
 8005f9c:	1b5d      	subeq	r5, r3, r5
 8005f9e:	6922      	ldr	r2, [r4, #16]
 8005fa0:	68a3      	ldr	r3, [r4, #8]
 8005fa2:	bf0c      	ite	eq
 8005fa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fa8:	2500      	movne	r5, #0
 8005faa:	4293      	cmp	r3, r2
 8005fac:	bfc4      	itt	gt
 8005fae:	1a9b      	subgt	r3, r3, r2
 8005fb0:	18ed      	addgt	r5, r5, r3
 8005fb2:	f04f 0900 	mov.w	r9, #0
 8005fb6:	45a9      	cmp	r9, r5
 8005fb8:	da0a      	bge.n	8005fd0 <_printf_common+0xe4>
 8005fba:	4630      	mov	r0, r6
 8005fbc:	4639      	mov	r1, r7
 8005fbe:	f104 021a 	add.w	r2, r4, #26
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	47c0      	blx	r8
 8005fc6:	3001      	adds	r0, #1
 8005fc8:	d0d5      	beq.n	8005f76 <_printf_common+0x8a>
 8005fca:	f109 0901 	add.w	r9, r9, #1
 8005fce:	e7f2      	b.n	8005fb6 <_printf_common+0xca>
 8005fd0:	2000      	movs	r0, #0
 8005fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08005fd8 <_printf_i>:
 8005fd8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005fdc:	460c      	mov	r4, r1
 8005fde:	4617      	mov	r7, r2
 8005fe0:	7e22      	ldrb	r2, [r4, #24]
 8005fe2:	2a6e      	cmp	r2, #110	; 0x6e
 8005fe4:	4698      	mov	r8, r3
 8005fe6:	4606      	mov	r6, r0
 8005fe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fea:	f101 0143 	add.w	r1, r1, #67	; 0x43
 8005fee:	f000 80a9 	beq.w	8006144 <_printf_i+0x16c>
 8005ff2:	d812      	bhi.n	800601a <_printf_i+0x42>
 8005ff4:	2a63      	cmp	r2, #99	; 0x63
 8005ff6:	d023      	beq.n	8006040 <_printf_i+0x68>
 8005ff8:	d80a      	bhi.n	8006010 <_printf_i+0x38>
 8005ffa:	2a00      	cmp	r2, #0
 8005ffc:	f000 80b6 	beq.w	800616c <_printf_i+0x194>
 8006000:	2a58      	cmp	r2, #88	; 0x58
 8006002:	f040 80c5 	bne.w	8006190 <_printf_i+0x1b8>
 8006006:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800600a:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 8006204 <_printf_i+0x22c>
 800600e:	e051      	b.n	80060b4 <_printf_i+0xdc>
 8006010:	2a64      	cmp	r2, #100	; 0x64
 8006012:	d01e      	beq.n	8006052 <_printf_i+0x7a>
 8006014:	2a69      	cmp	r2, #105	; 0x69
 8006016:	d01c      	beq.n	8006052 <_printf_i+0x7a>
 8006018:	e0ba      	b.n	8006190 <_printf_i+0x1b8>
 800601a:	2a73      	cmp	r2, #115	; 0x73
 800601c:	f000 80aa 	beq.w	8006174 <_printf_i+0x19c>
 8006020:	d809      	bhi.n	8006036 <_printf_i+0x5e>
 8006022:	2a6f      	cmp	r2, #111	; 0x6f
 8006024:	d02b      	beq.n	800607e <_printf_i+0xa6>
 8006026:	2a70      	cmp	r2, #112	; 0x70
 8006028:	f040 80b2 	bne.w	8006190 <_printf_i+0x1b8>
 800602c:	6822      	ldr	r2, [r4, #0]
 800602e:	f042 0220 	orr.w	r2, r2, #32
 8006032:	6022      	str	r2, [r4, #0]
 8006034:	e039      	b.n	80060aa <_printf_i+0xd2>
 8006036:	2a75      	cmp	r2, #117	; 0x75
 8006038:	d021      	beq.n	800607e <_printf_i+0xa6>
 800603a:	2a78      	cmp	r2, #120	; 0x78
 800603c:	d035      	beq.n	80060aa <_printf_i+0xd2>
 800603e:	e0a7      	b.n	8006190 <_printf_i+0x1b8>
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	1d11      	adds	r1, r2, #4
 8006044:	6019      	str	r1, [r3, #0]
 8006046:	6813      	ldr	r3, [r2, #0]
 8006048:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800604c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006050:	e0a2      	b.n	8006198 <_printf_i+0x1c0>
 8006052:	6820      	ldr	r0, [r4, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	f010 0f80 	tst.w	r0, #128	; 0x80
 800605a:	d003      	beq.n	8006064 <_printf_i+0x8c>
 800605c:	1d10      	adds	r0, r2, #4
 800605e:	6018      	str	r0, [r3, #0]
 8006060:	6813      	ldr	r3, [r2, #0]
 8006062:	e005      	b.n	8006070 <_printf_i+0x98>
 8006064:	0645      	lsls	r5, r0, #25
 8006066:	d5f9      	bpl.n	800605c <_printf_i+0x84>
 8006068:	1d10      	adds	r0, r2, #4
 800606a:	6018      	str	r0, [r3, #0]
 800606c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8006070:	2b00      	cmp	r3, #0
 8006072:	da3b      	bge.n	80060ec <_printf_i+0x114>
 8006074:	222d      	movs	r2, #45	; 0x2d
 8006076:	425b      	negs	r3, r3
 8006078:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800607c:	e036      	b.n	80060ec <_printf_i+0x114>
 800607e:	6820      	ldr	r0, [r4, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006086:	d003      	beq.n	8006090 <_printf_i+0xb8>
 8006088:	1d10      	adds	r0, r2, #4
 800608a:	6018      	str	r0, [r3, #0]
 800608c:	6813      	ldr	r3, [r2, #0]
 800608e:	e004      	b.n	800609a <_printf_i+0xc2>
 8006090:	0640      	lsls	r0, r0, #25
 8006092:	d5f9      	bpl.n	8006088 <_printf_i+0xb0>
 8006094:	1d10      	adds	r0, r2, #4
 8006096:	6018      	str	r0, [r3, #0]
 8006098:	8813      	ldrh	r3, [r2, #0]
 800609a:	7e22      	ldrb	r2, [r4, #24]
 800609c:	f8df e164 	ldr.w	lr, [pc, #356]	; 8006204 <_printf_i+0x22c>
 80060a0:	2a6f      	cmp	r2, #111	; 0x6f
 80060a2:	bf0c      	ite	eq
 80060a4:	2208      	moveq	r2, #8
 80060a6:	220a      	movne	r2, #10
 80060a8:	e01c      	b.n	80060e4 <_printf_i+0x10c>
 80060aa:	2278      	movs	r2, #120	; 0x78
 80060ac:	f8df e158 	ldr.w	lr, [pc, #344]	; 8006208 <_printf_i+0x230>
 80060b0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80060b4:	6822      	ldr	r2, [r4, #0]
 80060b6:	6818      	ldr	r0, [r3, #0]
 80060b8:	f012 0f80 	tst.w	r2, #128	; 0x80
 80060bc:	f100 0504 	add.w	r5, r0, #4
 80060c0:	601d      	str	r5, [r3, #0]
 80060c2:	d001      	beq.n	80060c8 <_printf_i+0xf0>
 80060c4:	6803      	ldr	r3, [r0, #0]
 80060c6:	e002      	b.n	80060ce <_printf_i+0xf6>
 80060c8:	0655      	lsls	r5, r2, #25
 80060ca:	d5fb      	bpl.n	80060c4 <_printf_i+0xec>
 80060cc:	8803      	ldrh	r3, [r0, #0]
 80060ce:	07d0      	lsls	r0, r2, #31
 80060d0:	bf44      	itt	mi
 80060d2:	f042 0220 	orrmi.w	r2, r2, #32
 80060d6:	6022      	strmi	r2, [r4, #0]
 80060d8:	b91b      	cbnz	r3, 80060e2 <_printf_i+0x10a>
 80060da:	6822      	ldr	r2, [r4, #0]
 80060dc:	f022 0220 	bic.w	r2, r2, #32
 80060e0:	6022      	str	r2, [r4, #0]
 80060e2:	2210      	movs	r2, #16
 80060e4:	2000      	movs	r0, #0
 80060e6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80060ea:	e002      	b.n	80060f2 <_printf_i+0x11a>
 80060ec:	f8df e114 	ldr.w	lr, [pc, #276]	; 8006204 <_printf_i+0x22c>
 80060f0:	220a      	movs	r2, #10
 80060f2:	6865      	ldr	r5, [r4, #4]
 80060f4:	60a5      	str	r5, [r4, #8]
 80060f6:	2d00      	cmp	r5, #0
 80060f8:	bfa2      	ittt	ge
 80060fa:	6820      	ldrge	r0, [r4, #0]
 80060fc:	f020 0004 	bicge.w	r0, r0, #4
 8006100:	6020      	strge	r0, [r4, #0]
 8006102:	b903      	cbnz	r3, 8006106 <_printf_i+0x12e>
 8006104:	b165      	cbz	r5, 8006120 <_printf_i+0x148>
 8006106:	460d      	mov	r5, r1
 8006108:	fbb3 f0f2 	udiv	r0, r3, r2
 800610c:	fb02 3310 	mls	r3, r2, r0, r3
 8006110:	f81e 3003 	ldrb.w	r3, [lr, r3]
 8006114:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006118:	4603      	mov	r3, r0
 800611a:	2800      	cmp	r0, #0
 800611c:	d1f4      	bne.n	8006108 <_printf_i+0x130>
 800611e:	e000      	b.n	8006122 <_printf_i+0x14a>
 8006120:	460d      	mov	r5, r1
 8006122:	2a08      	cmp	r2, #8
 8006124:	d10b      	bne.n	800613e <_printf_i+0x166>
 8006126:	6823      	ldr	r3, [r4, #0]
 8006128:	07da      	lsls	r2, r3, #31
 800612a:	d508      	bpl.n	800613e <_printf_i+0x166>
 800612c:	6923      	ldr	r3, [r4, #16]
 800612e:	6862      	ldr	r2, [r4, #4]
 8006130:	429a      	cmp	r2, r3
 8006132:	bfde      	ittt	le
 8006134:	2330      	movle	r3, #48	; 0x30
 8006136:	f805 3c01 	strble.w	r3, [r5, #-1]
 800613a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800613e:	1b49      	subs	r1, r1, r5
 8006140:	6121      	str	r1, [r4, #16]
 8006142:	e02e      	b.n	80061a2 <_printf_i+0x1ca>
 8006144:	6825      	ldr	r5, [r4, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	6960      	ldr	r0, [r4, #20]
 800614a:	f015 0f80 	tst.w	r5, #128	; 0x80
 800614e:	d003      	beq.n	8006158 <_printf_i+0x180>
 8006150:	1d15      	adds	r5, r2, #4
 8006152:	601d      	str	r5, [r3, #0]
 8006154:	6813      	ldr	r3, [r2, #0]
 8006156:	e008      	b.n	800616a <_printf_i+0x192>
 8006158:	f015 0f40 	tst.w	r5, #64	; 0x40
 800615c:	f102 0504 	add.w	r5, r2, #4
 8006160:	601d      	str	r5, [r3, #0]
 8006162:	6813      	ldr	r3, [r2, #0]
 8006164:	d001      	beq.n	800616a <_printf_i+0x192>
 8006166:	8018      	strh	r0, [r3, #0]
 8006168:	e000      	b.n	800616c <_printf_i+0x194>
 800616a:	6018      	str	r0, [r3, #0]
 800616c:	2300      	movs	r3, #0
 800616e:	6123      	str	r3, [r4, #16]
 8006170:	460d      	mov	r5, r1
 8006172:	e016      	b.n	80061a2 <_printf_i+0x1ca>
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	1d11      	adds	r1, r2, #4
 8006178:	6019      	str	r1, [r3, #0]
 800617a:	6815      	ldr	r5, [r2, #0]
 800617c:	6862      	ldr	r2, [r4, #4]
 800617e:	4628      	mov	r0, r5
 8006180:	2100      	movs	r1, #0
 8006182:	f000 fef1 	bl	8006f68 <memchr>
 8006186:	b108      	cbz	r0, 800618c <_printf_i+0x1b4>
 8006188:	1b40      	subs	r0, r0, r5
 800618a:	6060      	str	r0, [r4, #4]
 800618c:	6863      	ldr	r3, [r4, #4]
 800618e:	e004      	b.n	800619a <_printf_i+0x1c2>
 8006190:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006194:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8006198:	2301      	movs	r3, #1
 800619a:	6123      	str	r3, [r4, #16]
 800619c:	2300      	movs	r3, #0
 800619e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061a2:	f8cd 8000 	str.w	r8, [sp]
 80061a6:	4630      	mov	r0, r6
 80061a8:	4621      	mov	r1, r4
 80061aa:	aa03      	add	r2, sp, #12
 80061ac:	463b      	mov	r3, r7
 80061ae:	f7ff fe9d 	bl	8005eec <_printf_common>
 80061b2:	3001      	adds	r0, #1
 80061b4:	d102      	bne.n	80061bc <_printf_i+0x1e4>
 80061b6:	f04f 30ff 	mov.w	r0, #4294967295
 80061ba:	e01f      	b.n	80061fc <_printf_i+0x224>
 80061bc:	4630      	mov	r0, r6
 80061be:	4639      	mov	r1, r7
 80061c0:	462a      	mov	r2, r5
 80061c2:	6923      	ldr	r3, [r4, #16]
 80061c4:	47c0      	blx	r8
 80061c6:	3001      	adds	r0, #1
 80061c8:	d0f5      	beq.n	80061b6 <_printf_i+0x1de>
 80061ca:	6823      	ldr	r3, [r4, #0]
 80061cc:	079b      	lsls	r3, r3, #30
 80061ce:	d405      	bmi.n	80061dc <_printf_i+0x204>
 80061d0:	68e0      	ldr	r0, [r4, #12]
 80061d2:	9b03      	ldr	r3, [sp, #12]
 80061d4:	4298      	cmp	r0, r3
 80061d6:	bfb8      	it	lt
 80061d8:	4618      	movlt	r0, r3
 80061da:	e00f      	b.n	80061fc <_printf_i+0x224>
 80061dc:	2500      	movs	r5, #0
 80061de:	68e3      	ldr	r3, [r4, #12]
 80061e0:	9a03      	ldr	r2, [sp, #12]
 80061e2:	1a9b      	subs	r3, r3, r2
 80061e4:	429d      	cmp	r5, r3
 80061e6:	daf3      	bge.n	80061d0 <_printf_i+0x1f8>
 80061e8:	4630      	mov	r0, r6
 80061ea:	4639      	mov	r1, r7
 80061ec:	f104 0219 	add.w	r2, r4, #25
 80061f0:	2301      	movs	r3, #1
 80061f2:	47c0      	blx	r8
 80061f4:	3001      	adds	r0, #1
 80061f6:	d0de      	beq.n	80061b6 <_printf_i+0x1de>
 80061f8:	3501      	adds	r5, #1
 80061fa:	e7f0      	b.n	80061de <_printf_i+0x206>
 80061fc:	b004      	add	sp, #16
 80061fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006202:	bf00      	nop
 8006204:	08007cde 	.word	0x08007cde
 8006208:	08007cef 	.word	0x08007cef

0800620c <__fpclassifyd>:
 800620c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8006210:	b510      	push	{r4, lr}
 8006212:	d01b      	beq.n	800624c <__fpclassifyd+0x40>
 8006214:	4a0f      	ldr	r2, [pc, #60]	; (8006254 <__fpclassifyd+0x48>)
 8006216:	f5a1 1480 	sub.w	r4, r1, #1048576	; 0x100000
 800621a:	4294      	cmp	r4, r2
 800621c:	d910      	bls.n	8006240 <__fpclassifyd+0x34>
 800621e:	f101 41ff 	add.w	r1, r1, #2139095040	; 0x7f800000
 8006222:	4a0c      	ldr	r2, [pc, #48]	; (8006254 <__fpclassifyd+0x48>)
 8006224:	f501 01e0 	add.w	r1, r1, #7340032	; 0x700000
 8006228:	4291      	cmp	r1, r2
 800622a:	d909      	bls.n	8006240 <__fpclassifyd+0x34>
 800622c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006230:	d308      	bcc.n	8006244 <__fpclassifyd+0x38>
 8006232:	4a09      	ldr	r2, [pc, #36]	; (8006258 <__fpclassifyd+0x4c>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d107      	bne.n	8006248 <__fpclassifyd+0x3c>
 8006238:	fab0 f080 	clz	r0, r0
 800623c:	0940      	lsrs	r0, r0, #5
 800623e:	bd10      	pop	{r4, pc}
 8006240:	2004      	movs	r0, #4
 8006242:	bd10      	pop	{r4, pc}
 8006244:	2003      	movs	r0, #3
 8006246:	bd10      	pop	{r4, pc}
 8006248:	2000      	movs	r0, #0
 800624a:	bd10      	pop	{r4, pc}
 800624c:	2800      	cmp	r0, #0
 800624e:	d1e6      	bne.n	800621e <__fpclassifyd+0x12>
 8006250:	2002      	movs	r0, #2
 8006252:	bd10      	pop	{r4, pc}
 8006254:	7fdfffff 	.word	0x7fdfffff
 8006258:	7ff00000 	.word	0x7ff00000

0800625c <siprintf>:
 800625c:	b40e      	push	{r1, r2, r3}
 800625e:	b500      	push	{lr}
 8006260:	b09c      	sub	sp, #112	; 0x70
 8006262:	f44f 7102 	mov.w	r1, #520	; 0x208
 8006266:	f8ad 1014 	strh.w	r1, [sp, #20]
 800626a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800626e:	9104      	str	r1, [sp, #16]
 8006270:	9107      	str	r1, [sp, #28]
 8006272:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006276:	ab1d      	add	r3, sp, #116	; 0x74
 8006278:	f8ad 1016 	strh.w	r1, [sp, #22]
 800627c:	4908      	ldr	r1, [pc, #32]	; (80062a0 <siprintf+0x44>)
 800627e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006282:	9002      	str	r0, [sp, #8]
 8006284:	9006      	str	r0, [sp, #24]
 8006286:	6808      	ldr	r0, [r1, #0]
 8006288:	9301      	str	r3, [sp, #4]
 800628a:	a902      	add	r1, sp, #8
 800628c:	f001 fa5c 	bl	8007748 <_svfiprintf_r>
 8006290:	9b02      	ldr	r3, [sp, #8]
 8006292:	2200      	movs	r2, #0
 8006294:	701a      	strb	r2, [r3, #0]
 8006296:	b01c      	add	sp, #112	; 0x70
 8006298:	f85d eb04 	ldr.w	lr, [sp], #4
 800629c:	b003      	add	sp, #12
 800629e:	4770      	bx	lr
 80062a0:	20000180 	.word	0x20000180

080062a4 <strlen>:
 80062a4:	4603      	mov	r3, r0
 80062a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062aa:	2a00      	cmp	r2, #0
 80062ac:	d1fb      	bne.n	80062a6 <strlen+0x2>
 80062ae:	1a18      	subs	r0, r3, r0
 80062b0:	3801      	subs	r0, #1
 80062b2:	4770      	bx	lr

080062b4 <quorem>:
 80062b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062b8:	6903      	ldr	r3, [r0, #16]
 80062ba:	690c      	ldr	r4, [r1, #16]
 80062bc:	42a3      	cmp	r3, r4
 80062be:	4680      	mov	r8, r0
 80062c0:	f2c0 8081 	blt.w	80063c6 <quorem+0x112>
 80062c4:	3c01      	subs	r4, #1
 80062c6:	f101 0714 	add.w	r7, r1, #20
 80062ca:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80062ce:	f100 0614 	add.w	r6, r0, #20
 80062d2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80062d6:	eb06 030e 	add.w	r3, r6, lr
 80062da:	9301      	str	r3, [sp, #4]
 80062dc:	3501      	adds	r5, #1
 80062de:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 80062e2:	fbb3 f5f5 	udiv	r5, r3, r5
 80062e6:	eb07 090e 	add.w	r9, r7, lr
 80062ea:	b3c5      	cbz	r5, 800635e <quorem+0xaa>
 80062ec:	f04f 0a00 	mov.w	sl, #0
 80062f0:	4638      	mov	r0, r7
 80062f2:	46b4      	mov	ip, r6
 80062f4:	46d3      	mov	fp, sl
 80062f6:	f850 3b04 	ldr.w	r3, [r0], #4
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	0c1b      	lsrs	r3, r3, #16
 80062fe:	fb02 a205 	mla	r2, r2, r5, sl
 8006302:	436b      	muls	r3, r5
 8006304:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006308:	b292      	uxth	r2, r2
 800630a:	ebc2 020b 	rsb	r2, r2, fp
 800630e:	f8bc b000 	ldrh.w	fp, [ip]
 8006312:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006316:	fa12 f28b 	uxtah	r2, r2, fp
 800631a:	fa1f fb83 	uxth.w	fp, r3
 800631e:	f8dc 3000 	ldr.w	r3, [ip]
 8006322:	ebcb 4313 	rsb	r3, fp, r3, lsr #16
 8006326:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800632a:	b292      	uxth	r2, r2
 800632c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006330:	4548      	cmp	r0, r9
 8006332:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006336:	f84c 2b04 	str.w	r2, [ip], #4
 800633a:	d9dc      	bls.n	80062f6 <quorem+0x42>
 800633c:	f856 300e 	ldr.w	r3, [r6, lr]
 8006340:	b96b      	cbnz	r3, 800635e <quorem+0xaa>
 8006342:	9b01      	ldr	r3, [sp, #4]
 8006344:	3b04      	subs	r3, #4
 8006346:	42b3      	cmp	r3, r6
 8006348:	461a      	mov	r2, r3
 800634a:	d802      	bhi.n	8006352 <quorem+0x9e>
 800634c:	f8c8 4010 	str.w	r4, [r8, #16]
 8006350:	e005      	b.n	800635e <quorem+0xaa>
 8006352:	6812      	ldr	r2, [r2, #0]
 8006354:	3b04      	subs	r3, #4
 8006356:	2a00      	cmp	r2, #0
 8006358:	d1f8      	bne.n	800634c <quorem+0x98>
 800635a:	3c01      	subs	r4, #1
 800635c:	e7f3      	b.n	8006346 <quorem+0x92>
 800635e:	4640      	mov	r0, r8
 8006360:	f001 f823 	bl	80073aa <__mcmp>
 8006364:	2800      	cmp	r0, #0
 8006366:	db2c      	blt.n	80063c2 <quorem+0x10e>
 8006368:	3501      	adds	r5, #1
 800636a:	4630      	mov	r0, r6
 800636c:	f04f 0e00 	mov.w	lr, #0
 8006370:	f857 1b04 	ldr.w	r1, [r7], #4
 8006374:	f8d0 c000 	ldr.w	ip, [r0]
 8006378:	b28a      	uxth	r2, r1
 800637a:	ebc2 030e 	rsb	r3, r2, lr
 800637e:	0c09      	lsrs	r1, r1, #16
 8006380:	fa13 f38c 	uxtah	r3, r3, ip
 8006384:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
 8006388:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800638c:	b29b      	uxth	r3, r3
 800638e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006392:	454f      	cmp	r7, r9
 8006394:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006398:	f840 3b04 	str.w	r3, [r0], #4
 800639c:	d9e8      	bls.n	8006370 <quorem+0xbc>
 800639e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80063a2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80063a6:	b962      	cbnz	r2, 80063c2 <quorem+0x10e>
 80063a8:	3b04      	subs	r3, #4
 80063aa:	42b3      	cmp	r3, r6
 80063ac:	461a      	mov	r2, r3
 80063ae:	d802      	bhi.n	80063b6 <quorem+0x102>
 80063b0:	f8c8 4010 	str.w	r4, [r8, #16]
 80063b4:	e005      	b.n	80063c2 <quorem+0x10e>
 80063b6:	6812      	ldr	r2, [r2, #0]
 80063b8:	3b04      	subs	r3, #4
 80063ba:	2a00      	cmp	r2, #0
 80063bc:	d1f8      	bne.n	80063b0 <quorem+0xfc>
 80063be:	3c01      	subs	r4, #1
 80063c0:	e7f3      	b.n	80063aa <quorem+0xf6>
 80063c2:	4628      	mov	r0, r5
 80063c4:	e000      	b.n	80063c8 <quorem+0x114>
 80063c6:	2000      	movs	r0, #0
 80063c8:	b003      	add	sp, #12
 80063ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080063d0 <_dtoa_r>:
 80063d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063d4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80063d6:	b095      	sub	sp, #84	; 0x54
 80063d8:	4682      	mov	sl, r0
 80063da:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80063dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80063e0:	b945      	cbnz	r5, 80063f4 <_dtoa_r+0x24>
 80063e2:	2010      	movs	r0, #16
 80063e4:	f000 fdb8 	bl	8006f58 <malloc>
 80063e8:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 80063ec:	6045      	str	r5, [r0, #4]
 80063ee:	6085      	str	r5, [r0, #8]
 80063f0:	6005      	str	r5, [r0, #0]
 80063f2:	60c5      	str	r5, [r0, #12]
 80063f4:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 80063f8:	6819      	ldr	r1, [r3, #0]
 80063fa:	b159      	cbz	r1, 8006414 <_dtoa_r+0x44>
 80063fc:	685a      	ldr	r2, [r3, #4]
 80063fe:	604a      	str	r2, [r1, #4]
 8006400:	2301      	movs	r3, #1
 8006402:	4093      	lsls	r3, r2
 8006404:	608b      	str	r3, [r1, #8]
 8006406:	4650      	mov	r0, sl
 8006408:	f000 fdf2 	bl	8006ff0 <_Bfree>
 800640c:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8006410:	2200      	movs	r2, #0
 8006412:	601a      	str	r2, [r3, #0]
 8006414:	9b03      	ldr	r3, [sp, #12]
 8006416:	4aa2      	ldr	r2, [pc, #648]	; (80066a0 <_dtoa_r+0x2d0>)
 8006418:	2b00      	cmp	r3, #0
 800641a:	bfbf      	itttt	lt
 800641c:	2301      	movlt	r3, #1
 800641e:	6023      	strlt	r3, [r4, #0]
 8006420:	9b03      	ldrlt	r3, [sp, #12]
 8006422:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006426:	bfb8      	it	lt
 8006428:	9303      	strlt	r3, [sp, #12]
 800642a:	9f03      	ldr	r7, [sp, #12]
 800642c:	bfa4      	itt	ge
 800642e:	2300      	movge	r3, #0
 8006430:	6023      	strge	r3, [r4, #0]
 8006432:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 8006436:	0d1b      	lsrs	r3, r3, #20
 8006438:	051b      	lsls	r3, r3, #20
 800643a:	4293      	cmp	r3, r2
 800643c:	d11d      	bne.n	800647a <_dtoa_r+0xaa>
 800643e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006440:	f242 730f 	movw	r3, #9999	; 0x270f
 8006444:	6013      	str	r3, [r2, #0]
 8006446:	9b02      	ldr	r3, [sp, #8]
 8006448:	b943      	cbnz	r3, 800645c <_dtoa_r+0x8c>
 800644a:	4a96      	ldr	r2, [pc, #600]	; (80066a4 <_dtoa_r+0x2d4>)
 800644c:	4b96      	ldr	r3, [pc, #600]	; (80066a8 <_dtoa_r+0x2d8>)
 800644e:	f3c7 0013 	ubfx	r0, r7, #0, #20
 8006452:	2800      	cmp	r0, #0
 8006454:	bf14      	ite	ne
 8006456:	4618      	movne	r0, r3
 8006458:	4610      	moveq	r0, r2
 800645a:	e000      	b.n	800645e <_dtoa_r+0x8e>
 800645c:	4892      	ldr	r0, [pc, #584]	; (80066a8 <_dtoa_r+0x2d8>)
 800645e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006460:	2b00      	cmp	r3, #0
 8006462:	f000 856f 	beq.w	8006f44 <_dtoa_r+0xb74>
 8006466:	78c3      	ldrb	r3, [r0, #3]
 8006468:	b113      	cbz	r3, 8006470 <_dtoa_r+0xa0>
 800646a:	f100 0308 	add.w	r3, r0, #8
 800646e:	e000      	b.n	8006472 <_dtoa_r+0xa2>
 8006470:	1cc3      	adds	r3, r0, #3
 8006472:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006474:	6013      	str	r3, [r2, #0]
 8006476:	f000 bd65 	b.w	8006f44 <_dtoa_r+0xb74>
 800647a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800647e:	2200      	movs	r2, #0
 8006480:	4620      	mov	r0, r4
 8006482:	4629      	mov	r1, r5
 8006484:	2300      	movs	r3, #0
 8006486:	f001 fb03 	bl	8007a90 <__aeabi_dcmpeq>
 800648a:	4680      	mov	r8, r0
 800648c:	b158      	cbz	r0, 80064a6 <_dtoa_r+0xd6>
 800648e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006490:	2301      	movs	r3, #1
 8006492:	6013      	str	r3, [r2, #0]
 8006494:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006496:	2b00      	cmp	r3, #0
 8006498:	f000 8542 	beq.w	8006f20 <_dtoa_r+0xb50>
 800649c:	4883      	ldr	r0, [pc, #524]	; (80066ac <_dtoa_r+0x2dc>)
 800649e:	6018      	str	r0, [r3, #0]
 80064a0:	3801      	subs	r0, #1
 80064a2:	f000 bd4f 	b.w	8006f44 <_dtoa_r+0xb74>
 80064a6:	ab13      	add	r3, sp, #76	; 0x4c
 80064a8:	9300      	str	r3, [sp, #0]
 80064aa:	ab12      	add	r3, sp, #72	; 0x48
 80064ac:	9301      	str	r3, [sp, #4]
 80064ae:	4650      	mov	r0, sl
 80064b0:	4622      	mov	r2, r4
 80064b2:	462b      	mov	r3, r5
 80064b4:	f000 fff4 	bl	80074a0 <__d2b>
 80064b8:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80064bc:	9007      	str	r0, [sp, #28]
 80064be:	b15e      	cbz	r6, 80064d8 <_dtoa_r+0x108>
 80064c0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80064c4:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80064c8:	4620      	mov	r0, r4
 80064ca:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80064ce:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 80064d2:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 80064d6:	e01d      	b.n	8006514 <_dtoa_r+0x144>
 80064d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80064da:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80064dc:	441e      	add	r6, r3
 80064de:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 80064e2:	429e      	cmp	r6, r3
 80064e4:	bfad      	iteet	ge
 80064e6:	9a02      	ldrge	r2, [sp, #8]
 80064e8:	4b71      	ldrlt	r3, [pc, #452]	; (80066b0 <_dtoa_r+0x2e0>)
 80064ea:	9a02      	ldrlt	r2, [sp, #8]
 80064ec:	f206 4312 	addwge	r3, r6, #1042	; 0x412
 80064f0:	bfa3      	ittte	ge
 80064f2:	fa22 f003 	lsrge.w	r0, r2, r3
 80064f6:	4b6f      	ldrge	r3, [pc, #444]	; (80066b4 <_dtoa_r+0x2e4>)
 80064f8:	1b9b      	subge	r3, r3, r6
 80064fa:	1b9b      	sublt	r3, r3, r6
 80064fc:	bfaa      	itet	ge
 80064fe:	409f      	lslge	r7, r3
 8006500:	fa02 f003 	lsllt.w	r0, r2, r3
 8006504:	4338      	orrge	r0, r7
 8006506:	f7fe fc8f 	bl	8004e28 <__aeabi_ui2d>
 800650a:	2301      	movs	r3, #1
 800650c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006510:	3e01      	subs	r6, #1
 8006512:	9311      	str	r3, [sp, #68]	; 0x44
 8006514:	2200      	movs	r2, #0
 8006516:	4b68      	ldr	r3, [pc, #416]	; (80066b8 <_dtoa_r+0x2e8>)
 8006518:	f7fe fb48 	bl	8004bac <__aeabi_dsub>
 800651c:	a35a      	add	r3, pc, #360	; (adr r3, 8006688 <_dtoa_r+0x2b8>)
 800651e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006522:	f7fe fcf7 	bl	8004f14 <__aeabi_dmul>
 8006526:	a35a      	add	r3, pc, #360	; (adr r3, 8006690 <_dtoa_r+0x2c0>)
 8006528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652c:	f7fe fb40 	bl	8004bb0 <__adddf3>
 8006530:	4604      	mov	r4, r0
 8006532:	4630      	mov	r0, r6
 8006534:	460d      	mov	r5, r1
 8006536:	f7fe fc87 	bl	8004e48 <__aeabi_i2d>
 800653a:	a357      	add	r3, pc, #348	; (adr r3, 8006698 <_dtoa_r+0x2c8>)
 800653c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006540:	f7fe fce8 	bl	8004f14 <__aeabi_dmul>
 8006544:	4602      	mov	r2, r0
 8006546:	460b      	mov	r3, r1
 8006548:	4620      	mov	r0, r4
 800654a:	4629      	mov	r1, r5
 800654c:	f7fe fb30 	bl	8004bb0 <__adddf3>
 8006550:	4604      	mov	r4, r0
 8006552:	460d      	mov	r5, r1
 8006554:	f001 face 	bl	8007af4 <__aeabi_d2iz>
 8006558:	4629      	mov	r1, r5
 800655a:	4683      	mov	fp, r0
 800655c:	2200      	movs	r2, #0
 800655e:	4620      	mov	r0, r4
 8006560:	2300      	movs	r3, #0
 8006562:	f001 fa9f 	bl	8007aa4 <__aeabi_dcmplt>
 8006566:	b158      	cbz	r0, 8006580 <_dtoa_r+0x1b0>
 8006568:	4658      	mov	r0, fp
 800656a:	f7fe fc6d 	bl	8004e48 <__aeabi_i2d>
 800656e:	4602      	mov	r2, r0
 8006570:	460b      	mov	r3, r1
 8006572:	4620      	mov	r0, r4
 8006574:	4629      	mov	r1, r5
 8006576:	f001 fa8b 	bl	8007a90 <__aeabi_dcmpeq>
 800657a:	b908      	cbnz	r0, 8006580 <_dtoa_r+0x1b0>
 800657c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006580:	f1bb 0f16 	cmp.w	fp, #22
 8006584:	d80d      	bhi.n	80065a2 <_dtoa_r+0x1d2>
 8006586:	4b4d      	ldr	r3, [pc, #308]	; (80066bc <_dtoa_r+0x2ec>)
 8006588:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800658c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006590:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006594:	f001 faa4 	bl	8007ae0 <__aeabi_dcmpgt>
 8006598:	b130      	cbz	r0, 80065a8 <_dtoa_r+0x1d8>
 800659a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800659e:	2300      	movs	r3, #0
 80065a0:	e000      	b.n	80065a4 <_dtoa_r+0x1d4>
 80065a2:	2301      	movs	r3, #1
 80065a4:	9310      	str	r3, [sp, #64]	; 0x40
 80065a6:	e000      	b.n	80065aa <_dtoa_r+0x1da>
 80065a8:	9010      	str	r0, [sp, #64]	; 0x40
 80065aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065ac:	1b9e      	subs	r6, r3, r6
 80065ae:	1e73      	subs	r3, r6, #1
 80065b0:	930a      	str	r3, [sp, #40]	; 0x28
 80065b2:	bf45      	ittet	mi
 80065b4:	425b      	negmi	r3, r3
 80065b6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80065b8:	2300      	movpl	r3, #0
 80065ba:	2300      	movmi	r3, #0
 80065bc:	bf4c      	ite	mi
 80065be:	930a      	strmi	r3, [sp, #40]	; 0x28
 80065c0:	9309      	strpl	r3, [sp, #36]	; 0x24
 80065c2:	f1bb 0f00 	cmp.w	fp, #0
 80065c6:	db07      	blt.n	80065d8 <_dtoa_r+0x208>
 80065c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065ca:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 80065ce:	445b      	add	r3, fp
 80065d0:	930a      	str	r3, [sp, #40]	; 0x28
 80065d2:	2300      	movs	r3, #0
 80065d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80065d6:	e008      	b.n	80065ea <_dtoa_r+0x21a>
 80065d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065da:	ebcb 0303 	rsb	r3, fp, r3
 80065de:	9309      	str	r3, [sp, #36]	; 0x24
 80065e0:	f1cb 0300 	rsb	r3, fp, #0
 80065e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80065e6:	2300      	movs	r3, #0
 80065e8:	930d      	str	r3, [sp, #52]	; 0x34
 80065ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80065ec:	2b09      	cmp	r3, #9
 80065ee:	d828      	bhi.n	8006642 <_dtoa_r+0x272>
 80065f0:	2b05      	cmp	r3, #5
 80065f2:	bfc4      	itt	gt
 80065f4:	3b04      	subgt	r3, #4
 80065f6:	931e      	strgt	r3, [sp, #120]	; 0x78
 80065f8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80065fa:	f1a3 0302 	sub.w	r3, r3, #2
 80065fe:	bfcc      	ite	gt
 8006600:	2500      	movgt	r5, #0
 8006602:	2501      	movle	r5, #1
 8006604:	2b03      	cmp	r3, #3
 8006606:	d821      	bhi.n	800664c <_dtoa_r+0x27c>
 8006608:	e8df f003 	tbb	[pc, r3]
 800660c:	10040e02 	.word	0x10040e02
 8006610:	2300      	movs	r3, #0
 8006612:	e000      	b.n	8006616 <_dtoa_r+0x246>
 8006614:	2301      	movs	r3, #1
 8006616:	930c      	str	r3, [sp, #48]	; 0x30
 8006618:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800661a:	2b00      	cmp	r3, #0
 800661c:	dc20      	bgt.n	8006660 <_dtoa_r+0x290>
 800661e:	2301      	movs	r3, #1
 8006620:	9306      	str	r3, [sp, #24]
 8006622:	9305      	str	r3, [sp, #20]
 8006624:	461a      	mov	r2, r3
 8006626:	e019      	b.n	800665c <_dtoa_r+0x28c>
 8006628:	2300      	movs	r3, #0
 800662a:	e000      	b.n	800662e <_dtoa_r+0x25e>
 800662c:	2301      	movs	r3, #1
 800662e:	930c      	str	r3, [sp, #48]	; 0x30
 8006630:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006632:	445b      	add	r3, fp
 8006634:	9306      	str	r3, [sp, #24]
 8006636:	3301      	adds	r3, #1
 8006638:	2b01      	cmp	r3, #1
 800663a:	9305      	str	r3, [sp, #20]
 800663c:	bfb8      	it	lt
 800663e:	2301      	movlt	r3, #1
 8006640:	e011      	b.n	8006666 <_dtoa_r+0x296>
 8006642:	2501      	movs	r5, #1
 8006644:	2300      	movs	r3, #0
 8006646:	931e      	str	r3, [sp, #120]	; 0x78
 8006648:	950c      	str	r5, [sp, #48]	; 0x30
 800664a:	e001      	b.n	8006650 <_dtoa_r+0x280>
 800664c:	2301      	movs	r3, #1
 800664e:	930c      	str	r3, [sp, #48]	; 0x30
 8006650:	f04f 33ff 	mov.w	r3, #4294967295
 8006654:	9306      	str	r3, [sp, #24]
 8006656:	9305      	str	r3, [sp, #20]
 8006658:	2200      	movs	r2, #0
 800665a:	2312      	movs	r3, #18
 800665c:	921f      	str	r2, [sp, #124]	; 0x7c
 800665e:	e002      	b.n	8006666 <_dtoa_r+0x296>
 8006660:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006662:	9306      	str	r3, [sp, #24]
 8006664:	9305      	str	r3, [sp, #20]
 8006666:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 800666a:	2200      	movs	r2, #0
 800666c:	6062      	str	r2, [r4, #4]
 800666e:	2104      	movs	r1, #4
 8006670:	f101 0214 	add.w	r2, r1, #20
 8006674:	429a      	cmp	r2, r3
 8006676:	d823      	bhi.n	80066c0 <_dtoa_r+0x2f0>
 8006678:	6862      	ldr	r2, [r4, #4]
 800667a:	3201      	adds	r2, #1
 800667c:	6062      	str	r2, [r4, #4]
 800667e:	0049      	lsls	r1, r1, #1
 8006680:	e7f6      	b.n	8006670 <_dtoa_r+0x2a0>
 8006682:	bf00      	nop
 8006684:	f3af 8000 	nop.w
 8006688:	636f4361 	.word	0x636f4361
 800668c:	3fd287a7 	.word	0x3fd287a7
 8006690:	8b60c8b3 	.word	0x8b60c8b3
 8006694:	3fc68a28 	.word	0x3fc68a28
 8006698:	509f79fb 	.word	0x509f79fb
 800669c:	3fd34413 	.word	0x3fd34413
 80066a0:	7ff00000 	.word	0x7ff00000
 80066a4:	08007d00 	.word	0x08007d00
 80066a8:	08007d09 	.word	0x08007d09
 80066ac:	08007cdd 	.word	0x08007cdd
 80066b0:	fffffbee 	.word	0xfffffbee
 80066b4:	fffffc0e 	.word	0xfffffc0e
 80066b8:	3ff80000 	.word	0x3ff80000
 80066bc:	08007d18 	.word	0x08007d18
 80066c0:	4650      	mov	r0, sl
 80066c2:	6861      	ldr	r1, [r4, #4]
 80066c4:	f000 fc5f 	bl	8006f86 <_Balloc>
 80066c8:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 80066cc:	6020      	str	r0, [r4, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	9308      	str	r3, [sp, #32]
 80066d2:	9b05      	ldr	r3, [sp, #20]
 80066d4:	2b0e      	cmp	r3, #14
 80066d6:	f200 8148 	bhi.w	800696a <_dtoa_r+0x59a>
 80066da:	2d00      	cmp	r5, #0
 80066dc:	f000 8145 	beq.w	800696a <_dtoa_r+0x59a>
 80066e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066e4:	f1bb 0f00 	cmp.w	fp, #0
 80066e8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80066ec:	dd31      	ble.n	8006752 <_dtoa_r+0x382>
 80066ee:	4ab1      	ldr	r2, [pc, #708]	; (80069b4 <_dtoa_r+0x5e4>)
 80066f0:	f00b 030f 	and.w	r3, fp, #15
 80066f4:	ea4f 162b 	mov.w	r6, fp, asr #4
 80066f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80066fc:	06f0      	lsls	r0, r6, #27
 80066fe:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006702:	d50c      	bpl.n	800671e <_dtoa_r+0x34e>
 8006704:	4bac      	ldr	r3, [pc, #688]	; (80069b8 <_dtoa_r+0x5e8>)
 8006706:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800670a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800670e:	f7fe fd2b 	bl	8005168 <__aeabi_ddiv>
 8006712:	f006 060f 	and.w	r6, r6, #15
 8006716:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800671a:	2703      	movs	r7, #3
 800671c:	e000      	b.n	8006720 <_dtoa_r+0x350>
 800671e:	2702      	movs	r7, #2
 8006720:	f8df 8294 	ldr.w	r8, [pc, #660]	; 80069b8 <_dtoa_r+0x5e8>
 8006724:	b176      	cbz	r6, 8006744 <_dtoa_r+0x374>
 8006726:	07f1      	lsls	r1, r6, #31
 8006728:	d508      	bpl.n	800673c <_dtoa_r+0x36c>
 800672a:	4620      	mov	r0, r4
 800672c:	4629      	mov	r1, r5
 800672e:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006732:	f7fe fbef 	bl	8004f14 <__aeabi_dmul>
 8006736:	3701      	adds	r7, #1
 8006738:	4604      	mov	r4, r0
 800673a:	460d      	mov	r5, r1
 800673c:	1076      	asrs	r6, r6, #1
 800673e:	f108 0808 	add.w	r8, r8, #8
 8006742:	e7ef      	b.n	8006724 <_dtoa_r+0x354>
 8006744:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006748:	4622      	mov	r2, r4
 800674a:	462b      	mov	r3, r5
 800674c:	f7fe fd0c 	bl	8005168 <__aeabi_ddiv>
 8006750:	e01b      	b.n	800678a <_dtoa_r+0x3ba>
 8006752:	f1cb 0400 	rsb	r4, fp, #0
 8006756:	b1dc      	cbz	r4, 8006790 <_dtoa_r+0x3c0>
 8006758:	4b96      	ldr	r3, [pc, #600]	; (80069b4 <_dtoa_r+0x5e4>)
 800675a:	4d97      	ldr	r5, [pc, #604]	; (80069b8 <_dtoa_r+0x5e8>)
 800675c:	f004 020f 	and.w	r2, r4, #15
 8006760:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006764:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676c:	f7fe fbd2 	bl	8004f14 <__aeabi_dmul>
 8006770:	1124      	asrs	r4, r4, #4
 8006772:	2702      	movs	r7, #2
 8006774:	b14c      	cbz	r4, 800678a <_dtoa_r+0x3ba>
 8006776:	07e2      	lsls	r2, r4, #31
 8006778:	d504      	bpl.n	8006784 <_dtoa_r+0x3b4>
 800677a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800677e:	3701      	adds	r7, #1
 8006780:	f7fe fbc8 	bl	8004f14 <__aeabi_dmul>
 8006784:	1064      	asrs	r4, r4, #1
 8006786:	3508      	adds	r5, #8
 8006788:	e7f4      	b.n	8006774 <_dtoa_r+0x3a4>
 800678a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800678e:	e000      	b.n	8006792 <_dtoa_r+0x3c2>
 8006790:	2702      	movs	r7, #2
 8006792:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006794:	b1db      	cbz	r3, 80067ce <_dtoa_r+0x3fe>
 8006796:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800679a:	2200      	movs	r2, #0
 800679c:	4620      	mov	r0, r4
 800679e:	4629      	mov	r1, r5
 80067a0:	4b86      	ldr	r3, [pc, #536]	; (80069bc <_dtoa_r+0x5ec>)
 80067a2:	f001 f97f 	bl	8007aa4 <__aeabi_dcmplt>
 80067a6:	b190      	cbz	r0, 80067ce <_dtoa_r+0x3fe>
 80067a8:	9b05      	ldr	r3, [sp, #20]
 80067aa:	b183      	cbz	r3, 80067ce <_dtoa_r+0x3fe>
 80067ac:	9b06      	ldr	r3, [sp, #24]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f340 80d7 	ble.w	8006962 <_dtoa_r+0x592>
 80067b4:	4629      	mov	r1, r5
 80067b6:	4620      	mov	r0, r4
 80067b8:	2200      	movs	r2, #0
 80067ba:	4b81      	ldr	r3, [pc, #516]	; (80069c0 <_dtoa_r+0x5f0>)
 80067bc:	f7fe fbaa 	bl	8004f14 <__aeabi_dmul>
 80067c0:	f10b 36ff 	add.w	r6, fp, #4294967295
 80067c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067c8:	3701      	adds	r7, #1
 80067ca:	9d06      	ldr	r5, [sp, #24]
 80067cc:	e001      	b.n	80067d2 <_dtoa_r+0x402>
 80067ce:	9d05      	ldr	r5, [sp, #20]
 80067d0:	465e      	mov	r6, fp
 80067d2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80067d6:	4638      	mov	r0, r7
 80067d8:	f7fe fb36 	bl	8004e48 <__aeabi_i2d>
 80067dc:	4642      	mov	r2, r8
 80067de:	464b      	mov	r3, r9
 80067e0:	f7fe fb98 	bl	8004f14 <__aeabi_dmul>
 80067e4:	4b77      	ldr	r3, [pc, #476]	; (80069c4 <_dtoa_r+0x5f4>)
 80067e6:	2200      	movs	r2, #0
 80067e8:	f7fe f9e2 	bl	8004bb0 <__adddf3>
 80067ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067f0:	9b03      	ldr	r3, [sp, #12]
 80067f2:	f1a3 7450 	sub.w	r4, r3, #54525952	; 0x3400000
 80067f6:	9403      	str	r4, [sp, #12]
 80067f8:	b9cd      	cbnz	r5, 800682e <_dtoa_r+0x45e>
 80067fa:	4640      	mov	r0, r8
 80067fc:	4649      	mov	r1, r9
 80067fe:	2200      	movs	r2, #0
 8006800:	4b71      	ldr	r3, [pc, #452]	; (80069c8 <_dtoa_r+0x5f8>)
 8006802:	f7fe f9d3 	bl	8004bac <__aeabi_dsub>
 8006806:	9a02      	ldr	r2, [sp, #8]
 8006808:	4623      	mov	r3, r4
 800680a:	4680      	mov	r8, r0
 800680c:	4689      	mov	r9, r1
 800680e:	f001 f967 	bl	8007ae0 <__aeabi_dcmpgt>
 8006812:	2800      	cmp	r0, #0
 8006814:	f040 8241 	bne.w	8006c9a <_dtoa_r+0x8ca>
 8006818:	4640      	mov	r0, r8
 800681a:	4649      	mov	r1, r9
 800681c:	9a02      	ldr	r2, [sp, #8]
 800681e:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 8006822:	f001 f93f 	bl	8007aa4 <__aeabi_dcmplt>
 8006826:	2800      	cmp	r0, #0
 8006828:	f040 8231 	bne.w	8006c8e <_dtoa_r+0x8be>
 800682c:	e099      	b.n	8006962 <_dtoa_r+0x592>
 800682e:	4b61      	ldr	r3, [pc, #388]	; (80069b4 <_dtoa_r+0x5e4>)
 8006830:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006832:	1e6a      	subs	r2, r5, #1
 8006834:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006838:	2900      	cmp	r1, #0
 800683a:	d047      	beq.n	80068cc <_dtoa_r+0x4fc>
 800683c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006840:	2000      	movs	r0, #0
 8006842:	4962      	ldr	r1, [pc, #392]	; (80069cc <_dtoa_r+0x5fc>)
 8006844:	f7fe fc90 	bl	8005168 <__aeabi_ddiv>
 8006848:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800684c:	f7fe f9ae 	bl	8004bac <__aeabi_dsub>
 8006850:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006854:	9c08      	ldr	r4, [sp, #32]
 8006856:	4649      	mov	r1, r9
 8006858:	4640      	mov	r0, r8
 800685a:	f001 f94b 	bl	8007af4 <__aeabi_d2iz>
 800685e:	4607      	mov	r7, r0
 8006860:	f7fe faf2 	bl	8004e48 <__aeabi_i2d>
 8006864:	4602      	mov	r2, r0
 8006866:	460b      	mov	r3, r1
 8006868:	4640      	mov	r0, r8
 800686a:	4649      	mov	r1, r9
 800686c:	f7fe f99e 	bl	8004bac <__aeabi_dsub>
 8006870:	3730      	adds	r7, #48	; 0x30
 8006872:	f804 7b01 	strb.w	r7, [r4], #1
 8006876:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800687a:	4680      	mov	r8, r0
 800687c:	4689      	mov	r9, r1
 800687e:	f001 f911 	bl	8007aa4 <__aeabi_dcmplt>
 8006882:	2800      	cmp	r0, #0
 8006884:	f040 833d 	bne.w	8006f02 <_dtoa_r+0xb32>
 8006888:	4642      	mov	r2, r8
 800688a:	464b      	mov	r3, r9
 800688c:	2000      	movs	r0, #0
 800688e:	494b      	ldr	r1, [pc, #300]	; (80069bc <_dtoa_r+0x5ec>)
 8006890:	f7fe f98c 	bl	8004bac <__aeabi_dsub>
 8006894:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006898:	f001 f904 	bl	8007aa4 <__aeabi_dcmplt>
 800689c:	2800      	cmp	r0, #0
 800689e:	f040 80d0 	bne.w	8006a42 <_dtoa_r+0x672>
 80068a2:	9b08      	ldr	r3, [sp, #32]
 80068a4:	1ae3      	subs	r3, r4, r3
 80068a6:	42ab      	cmp	r3, r5
 80068a8:	da5b      	bge.n	8006962 <_dtoa_r+0x592>
 80068aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068ae:	2200      	movs	r2, #0
 80068b0:	4b43      	ldr	r3, [pc, #268]	; (80069c0 <_dtoa_r+0x5f0>)
 80068b2:	f7fe fb2f 	bl	8004f14 <__aeabi_dmul>
 80068b6:	2200      	movs	r2, #0
 80068b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068bc:	4b40      	ldr	r3, [pc, #256]	; (80069c0 <_dtoa_r+0x5f0>)
 80068be:	4640      	mov	r0, r8
 80068c0:	4649      	mov	r1, r9
 80068c2:	f7fe fb27 	bl	8004f14 <__aeabi_dmul>
 80068c6:	4680      	mov	r8, r0
 80068c8:	4689      	mov	r9, r1
 80068ca:	e7c4      	b.n	8006856 <_dtoa_r+0x486>
 80068cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80068d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80068d4:	f7fe fb1e 	bl	8004f14 <__aeabi_dmul>
 80068d8:	9b08      	ldr	r3, [sp, #32]
 80068da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068de:	195c      	adds	r4, r3, r5
 80068e0:	461d      	mov	r5, r3
 80068e2:	4649      	mov	r1, r9
 80068e4:	4640      	mov	r0, r8
 80068e6:	f001 f905 	bl	8007af4 <__aeabi_d2iz>
 80068ea:	4607      	mov	r7, r0
 80068ec:	f7fe faac 	bl	8004e48 <__aeabi_i2d>
 80068f0:	3730      	adds	r7, #48	; 0x30
 80068f2:	4602      	mov	r2, r0
 80068f4:	460b      	mov	r3, r1
 80068f6:	4640      	mov	r0, r8
 80068f8:	4649      	mov	r1, r9
 80068fa:	f7fe f957 	bl	8004bac <__aeabi_dsub>
 80068fe:	f805 7b01 	strb.w	r7, [r5], #1
 8006902:	42a5      	cmp	r5, r4
 8006904:	4680      	mov	r8, r0
 8006906:	4689      	mov	r9, r1
 8006908:	d124      	bne.n	8006954 <_dtoa_r+0x584>
 800690a:	2200      	movs	r2, #0
 800690c:	4b2f      	ldr	r3, [pc, #188]	; (80069cc <_dtoa_r+0x5fc>)
 800690e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006912:	f7fe f94d 	bl	8004bb0 <__adddf3>
 8006916:	4602      	mov	r2, r0
 8006918:	460b      	mov	r3, r1
 800691a:	4640      	mov	r0, r8
 800691c:	4649      	mov	r1, r9
 800691e:	f001 f8df 	bl	8007ae0 <__aeabi_dcmpgt>
 8006922:	2800      	cmp	r0, #0
 8006924:	f040 808d 	bne.w	8006a42 <_dtoa_r+0x672>
 8006928:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800692c:	2000      	movs	r0, #0
 800692e:	4927      	ldr	r1, [pc, #156]	; (80069cc <_dtoa_r+0x5fc>)
 8006930:	f7fe f93c 	bl	8004bac <__aeabi_dsub>
 8006934:	4602      	mov	r2, r0
 8006936:	460b      	mov	r3, r1
 8006938:	4640      	mov	r0, r8
 800693a:	4649      	mov	r1, r9
 800693c:	f001 f8b2 	bl	8007aa4 <__aeabi_dcmplt>
 8006940:	b178      	cbz	r0, 8006962 <_dtoa_r+0x592>
 8006942:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8006946:	2b30      	cmp	r3, #48	; 0x30
 8006948:	f104 32ff 	add.w	r2, r4, #4294967295
 800694c:	f040 82d9 	bne.w	8006f02 <_dtoa_r+0xb32>
 8006950:	4614      	mov	r4, r2
 8006952:	e7f6      	b.n	8006942 <_dtoa_r+0x572>
 8006954:	2200      	movs	r2, #0
 8006956:	4b1a      	ldr	r3, [pc, #104]	; (80069c0 <_dtoa_r+0x5f0>)
 8006958:	f7fe fadc 	bl	8004f14 <__aeabi_dmul>
 800695c:	4680      	mov	r8, r0
 800695e:	4689      	mov	r9, r1
 8006960:	e7bf      	b.n	80068e2 <_dtoa_r+0x512>
 8006962:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006966:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800696a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800696c:	2b00      	cmp	r3, #0
 800696e:	f2c0 808a 	blt.w	8006a86 <_dtoa_r+0x6b6>
 8006972:	f1bb 0f0e 	cmp.w	fp, #14
 8006976:	f300 8086 	bgt.w	8006a86 <_dtoa_r+0x6b6>
 800697a:	4b0e      	ldr	r3, [pc, #56]	; (80069b4 <_dtoa_r+0x5e4>)
 800697c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006980:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006984:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006986:	2b00      	cmp	r3, #0
 8006988:	da22      	bge.n	80069d0 <_dtoa_r+0x600>
 800698a:	9b05      	ldr	r3, [sp, #20]
 800698c:	2b00      	cmp	r3, #0
 800698e:	dc1f      	bgt.n	80069d0 <_dtoa_r+0x600>
 8006990:	f040 817c 	bne.w	8006c8c <_dtoa_r+0x8bc>
 8006994:	4630      	mov	r0, r6
 8006996:	2200      	movs	r2, #0
 8006998:	4b0b      	ldr	r3, [pc, #44]	; (80069c8 <_dtoa_r+0x5f8>)
 800699a:	4639      	mov	r1, r7
 800699c:	f7fe faba 	bl	8004f14 <__aeabi_dmul>
 80069a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069a4:	f001 f892 	bl	8007acc <__aeabi_dcmpge>
 80069a8:	9d05      	ldr	r5, [sp, #20]
 80069aa:	462e      	mov	r6, r5
 80069ac:	2800      	cmp	r0, #0
 80069ae:	f040 816f 	bne.w	8006c90 <_dtoa_r+0x8c0>
 80069b2:	e174      	b.n	8006c9e <_dtoa_r+0x8ce>
 80069b4:	08007d18 	.word	0x08007d18
 80069b8:	08007de0 	.word	0x08007de0
 80069bc:	3ff00000 	.word	0x3ff00000
 80069c0:	40240000 	.word	0x40240000
 80069c4:	401c0000 	.word	0x401c0000
 80069c8:	40140000 	.word	0x40140000
 80069cc:	3fe00000 	.word	0x3fe00000
 80069d0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80069d4:	9c08      	ldr	r4, [sp, #32]
 80069d6:	4632      	mov	r2, r6
 80069d8:	463b      	mov	r3, r7
 80069da:	4640      	mov	r0, r8
 80069dc:	4649      	mov	r1, r9
 80069de:	f7fe fbc3 	bl	8005168 <__aeabi_ddiv>
 80069e2:	f001 f887 	bl	8007af4 <__aeabi_d2iz>
 80069e6:	4605      	mov	r5, r0
 80069e8:	f7fe fa2e 	bl	8004e48 <__aeabi_i2d>
 80069ec:	4632      	mov	r2, r6
 80069ee:	463b      	mov	r3, r7
 80069f0:	f7fe fa90 	bl	8004f14 <__aeabi_dmul>
 80069f4:	460b      	mov	r3, r1
 80069f6:	4602      	mov	r2, r0
 80069f8:	4649      	mov	r1, r9
 80069fa:	4640      	mov	r0, r8
 80069fc:	f7fe f8d6 	bl	8004bac <__aeabi_dsub>
 8006a00:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8006a04:	9b08      	ldr	r3, [sp, #32]
 8006a06:	f804 eb01 	strb.w	lr, [r4], #1
 8006a0a:	ebc3 0e04 	rsb	lr, r3, r4
 8006a0e:	9b05      	ldr	r3, [sp, #20]
 8006a10:	459e      	cmp	lr, r3
 8006a12:	d12b      	bne.n	8006a6c <_dtoa_r+0x69c>
 8006a14:	4602      	mov	r2, r0
 8006a16:	460b      	mov	r3, r1
 8006a18:	f7fe f8ca 	bl	8004bb0 <__adddf3>
 8006a1c:	4632      	mov	r2, r6
 8006a1e:	463b      	mov	r3, r7
 8006a20:	4680      	mov	r8, r0
 8006a22:	4689      	mov	r9, r1
 8006a24:	f001 f85c 	bl	8007ae0 <__aeabi_dcmpgt>
 8006a28:	b970      	cbnz	r0, 8006a48 <_dtoa_r+0x678>
 8006a2a:	4640      	mov	r0, r8
 8006a2c:	4649      	mov	r1, r9
 8006a2e:	4632      	mov	r2, r6
 8006a30:	463b      	mov	r3, r7
 8006a32:	f001 f82d 	bl	8007a90 <__aeabi_dcmpeq>
 8006a36:	2800      	cmp	r0, #0
 8006a38:	f000 8264 	beq.w	8006f04 <_dtoa_r+0xb34>
 8006a3c:	07eb      	lsls	r3, r5, #31
 8006a3e:	d403      	bmi.n	8006a48 <_dtoa_r+0x678>
 8006a40:	e260      	b.n	8006f04 <_dtoa_r+0xb34>
 8006a42:	46b3      	mov	fp, r6
 8006a44:	e000      	b.n	8006a48 <_dtoa_r+0x678>
 8006a46:	461c      	mov	r4, r3
 8006a48:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8006a4c:	2a39      	cmp	r2, #57	; 0x39
 8006a4e:	f104 33ff 	add.w	r3, r4, #4294967295
 8006a52:	d107      	bne.n	8006a64 <_dtoa_r+0x694>
 8006a54:	9a08      	ldr	r2, [sp, #32]
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d1f5      	bne.n	8006a46 <_dtoa_r+0x676>
 8006a5a:	2330      	movs	r3, #48	; 0x30
 8006a5c:	7013      	strb	r3, [r2, #0]
 8006a5e:	f10b 0b01 	add.w	fp, fp, #1
 8006a62:	4613      	mov	r3, r2
 8006a64:	781a      	ldrb	r2, [r3, #0]
 8006a66:	3201      	adds	r2, #1
 8006a68:	701a      	strb	r2, [r3, #0]
 8006a6a:	e24b      	b.n	8006f04 <_dtoa_r+0xb34>
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	4ba4      	ldr	r3, [pc, #656]	; (8006d00 <_dtoa_r+0x930>)
 8006a70:	f7fe fa50 	bl	8004f14 <__aeabi_dmul>
 8006a74:	2200      	movs	r2, #0
 8006a76:	2300      	movs	r3, #0
 8006a78:	4680      	mov	r8, r0
 8006a7a:	4689      	mov	r9, r1
 8006a7c:	f001 f808 	bl	8007a90 <__aeabi_dcmpeq>
 8006a80:	2800      	cmp	r0, #0
 8006a82:	d0a8      	beq.n	80069d6 <_dtoa_r+0x606>
 8006a84:	e23e      	b.n	8006f04 <_dtoa_r+0xb34>
 8006a86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a88:	2a00      	cmp	r2, #0
 8006a8a:	d032      	beq.n	8006af2 <_dtoa_r+0x722>
 8006a8c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006a8e:	2a01      	cmp	r2, #1
 8006a90:	dc0a      	bgt.n	8006aa8 <_dtoa_r+0x6d8>
 8006a92:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006a94:	b112      	cbz	r2, 8006a9c <_dtoa_r+0x6cc>
 8006a96:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006a9a:	e002      	b.n	8006aa2 <_dtoa_r+0x6d2>
 8006a9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006aa2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006aa4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006aa6:	e018      	b.n	8006ada <_dtoa_r+0x70a>
 8006aa8:	9b05      	ldr	r3, [sp, #20]
 8006aaa:	1e5d      	subs	r5, r3, #1
 8006aac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006aae:	42ab      	cmp	r3, r5
 8006ab0:	bfbf      	itttt	lt
 8006ab2:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8006ab4:	950b      	strlt	r5, [sp, #44]	; 0x2c
 8006ab6:	1aea      	sublt	r2, r5, r3
 8006ab8:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006aba:	bfb6      	itet	lt
 8006abc:	189b      	addlt	r3, r3, r2
 8006abe:	1b5d      	subge	r5, r3, r5
 8006ac0:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006ac2:	9b05      	ldr	r3, [sp, #20]
 8006ac4:	bfb8      	it	lt
 8006ac6:	2500      	movlt	r5, #0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	bfb9      	ittee	lt
 8006acc:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
 8006ace:	9a05      	ldrlt	r2, [sp, #20]
 8006ad0:	9c09      	ldrge	r4, [sp, #36]	; 0x24
 8006ad2:	9b05      	ldrge	r3, [sp, #20]
 8006ad4:	bfbc      	itt	lt
 8006ad6:	1a9c      	sublt	r4, r3, r2
 8006ad8:	2300      	movlt	r3, #0
 8006ada:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006adc:	441a      	add	r2, r3
 8006ade:	9209      	str	r2, [sp, #36]	; 0x24
 8006ae0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ae2:	4650      	mov	r0, sl
 8006ae4:	441a      	add	r2, r3
 8006ae6:	2101      	movs	r1, #1
 8006ae8:	920a      	str	r2, [sp, #40]	; 0x28
 8006aea:	f000 fb23 	bl	8007134 <__i2b>
 8006aee:	4606      	mov	r6, r0
 8006af0:	e002      	b.n	8006af8 <_dtoa_r+0x728>
 8006af2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006af4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006af6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006af8:	b164      	cbz	r4, 8006b14 <_dtoa_r+0x744>
 8006afa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	dd09      	ble.n	8006b14 <_dtoa_r+0x744>
 8006b00:	42a3      	cmp	r3, r4
 8006b02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b04:	bfa8      	it	ge
 8006b06:	4623      	movge	r3, r4
 8006b08:	1ad2      	subs	r2, r2, r3
 8006b0a:	9209      	str	r2, [sp, #36]	; 0x24
 8006b0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b0e:	1ae4      	subs	r4, r4, r3
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	930a      	str	r3, [sp, #40]	; 0x28
 8006b14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	dd20      	ble.n	8006b5c <_dtoa_r+0x78c>
 8006b1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b1c:	b1c3      	cbz	r3, 8006b50 <_dtoa_r+0x780>
 8006b1e:	2d00      	cmp	r5, #0
 8006b20:	dd10      	ble.n	8006b44 <_dtoa_r+0x774>
 8006b22:	4631      	mov	r1, r6
 8006b24:	462a      	mov	r2, r5
 8006b26:	4650      	mov	r0, sl
 8006b28:	f000 fb9e 	bl	8007268 <__pow5mult>
 8006b2c:	4606      	mov	r6, r0
 8006b2e:	4631      	mov	r1, r6
 8006b30:	9a07      	ldr	r2, [sp, #28]
 8006b32:	4650      	mov	r0, sl
 8006b34:	f000 fb07 	bl	8007146 <__multiply>
 8006b38:	9907      	ldr	r1, [sp, #28]
 8006b3a:	4607      	mov	r7, r0
 8006b3c:	4650      	mov	r0, sl
 8006b3e:	f000 fa57 	bl	8006ff0 <_Bfree>
 8006b42:	9707      	str	r7, [sp, #28]
 8006b44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b46:	1b5a      	subs	r2, r3, r5
 8006b48:	d008      	beq.n	8006b5c <_dtoa_r+0x78c>
 8006b4a:	4650      	mov	r0, sl
 8006b4c:	9907      	ldr	r1, [sp, #28]
 8006b4e:	e002      	b.n	8006b56 <_dtoa_r+0x786>
 8006b50:	9907      	ldr	r1, [sp, #28]
 8006b52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006b54:	4650      	mov	r0, sl
 8006b56:	f000 fb87 	bl	8007268 <__pow5mult>
 8006b5a:	9007      	str	r0, [sp, #28]
 8006b5c:	4650      	mov	r0, sl
 8006b5e:	2101      	movs	r1, #1
 8006b60:	f000 fae8 	bl	8007134 <__i2b>
 8006b64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	4605      	mov	r5, r0
 8006b6a:	dd0a      	ble.n	8006b82 <_dtoa_r+0x7b2>
 8006b6c:	4629      	mov	r1, r5
 8006b6e:	461a      	mov	r2, r3
 8006b70:	4650      	mov	r0, sl
 8006b72:	f000 fb79 	bl	8007268 <__pow5mult>
 8006b76:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	4605      	mov	r5, r0
 8006b7c:	dd04      	ble.n	8006b88 <_dtoa_r+0x7b8>
 8006b7e:	2700      	movs	r7, #0
 8006b80:	e01b      	b.n	8006bba <_dtoa_r+0x7ea>
 8006b82:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	dc13      	bgt.n	8006bb0 <_dtoa_r+0x7e0>
 8006b88:	9b02      	ldr	r3, [sp, #8]
 8006b8a:	b98b      	cbnz	r3, 8006bb0 <_dtoa_r+0x7e0>
 8006b8c:	9b03      	ldr	r3, [sp, #12]
 8006b8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b92:	b97b      	cbnz	r3, 8006bb4 <_dtoa_r+0x7e4>
 8006b94:	9b03      	ldr	r3, [sp, #12]
 8006b96:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8006b9a:	0d3f      	lsrs	r7, r7, #20
 8006b9c:	053f      	lsls	r7, r7, #20
 8006b9e:	b157      	cbz	r7, 8006bb6 <_dtoa_r+0x7e6>
 8006ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ba8:	3301      	adds	r3, #1
 8006baa:	930a      	str	r3, [sp, #40]	; 0x28
 8006bac:	2701      	movs	r7, #1
 8006bae:	e002      	b.n	8006bb6 <_dtoa_r+0x7e6>
 8006bb0:	2700      	movs	r7, #0
 8006bb2:	e000      	b.n	8006bb6 <_dtoa_r+0x7e6>
 8006bb4:	9f02      	ldr	r7, [sp, #8]
 8006bb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bb8:	b143      	cbz	r3, 8006bcc <_dtoa_r+0x7fc>
 8006bba:	692b      	ldr	r3, [r5, #16]
 8006bbc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006bc0:	6918      	ldr	r0, [r3, #16]
 8006bc2:	f000 fa6a 	bl	800709a <__hi0bits>
 8006bc6:	f1c0 0020 	rsb	r0, r0, #32
 8006bca:	e000      	b.n	8006bce <_dtoa_r+0x7fe>
 8006bcc:	2001      	movs	r0, #1
 8006bce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bd0:	4418      	add	r0, r3
 8006bd2:	f010 001f 	ands.w	r0, r0, #31
 8006bd6:	d008      	beq.n	8006bea <_dtoa_r+0x81a>
 8006bd8:	f1c0 0320 	rsb	r3, r0, #32
 8006bdc:	2b04      	cmp	r3, #4
 8006bde:	dd02      	ble.n	8006be6 <_dtoa_r+0x816>
 8006be0:	f1c0 001c 	rsb	r0, r0, #28
 8006be4:	e002      	b.n	8006bec <_dtoa_r+0x81c>
 8006be6:	d008      	beq.n	8006bfa <_dtoa_r+0x82a>
 8006be8:	4618      	mov	r0, r3
 8006bea:	301c      	adds	r0, #28
 8006bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bee:	4403      	add	r3, r0
 8006bf0:	9309      	str	r3, [sp, #36]	; 0x24
 8006bf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bf4:	4403      	add	r3, r0
 8006bf6:	4404      	add	r4, r0
 8006bf8:	930a      	str	r3, [sp, #40]	; 0x28
 8006bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	dd05      	ble.n	8006c0c <_dtoa_r+0x83c>
 8006c00:	4650      	mov	r0, sl
 8006c02:	9907      	ldr	r1, [sp, #28]
 8006c04:	461a      	mov	r2, r3
 8006c06:	f000 fb7d 	bl	8007304 <__lshift>
 8006c0a:	9007      	str	r0, [sp, #28]
 8006c0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	dd05      	ble.n	8006c1e <_dtoa_r+0x84e>
 8006c12:	4629      	mov	r1, r5
 8006c14:	4650      	mov	r0, sl
 8006c16:	461a      	mov	r2, r3
 8006c18:	f000 fb74 	bl	8007304 <__lshift>
 8006c1c:	4605      	mov	r5, r0
 8006c1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c20:	b1eb      	cbz	r3, 8006c5e <_dtoa_r+0x88e>
 8006c22:	9807      	ldr	r0, [sp, #28]
 8006c24:	4629      	mov	r1, r5
 8006c26:	f000 fbc0 	bl	80073aa <__mcmp>
 8006c2a:	2800      	cmp	r0, #0
 8006c2c:	da17      	bge.n	8006c5e <_dtoa_r+0x88e>
 8006c2e:	2300      	movs	r3, #0
 8006c30:	4650      	mov	r0, sl
 8006c32:	9907      	ldr	r1, [sp, #28]
 8006c34:	220a      	movs	r2, #10
 8006c36:	f000 f9f2 	bl	800701e <__multadd>
 8006c3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c3c:	9007      	str	r0, [sp, #28]
 8006c3e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	f000 8170 	beq.w	8006f28 <_dtoa_r+0xb58>
 8006c48:	4631      	mov	r1, r6
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	4650      	mov	r0, sl
 8006c4e:	220a      	movs	r2, #10
 8006c50:	f000 f9e5 	bl	800701e <__multadd>
 8006c54:	9b06      	ldr	r3, [sp, #24]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	4606      	mov	r6, r0
 8006c5a:	dc33      	bgt.n	8006cc4 <_dtoa_r+0x8f4>
 8006c5c:	e16d      	b.n	8006f3a <_dtoa_r+0xb6a>
 8006c5e:	9b05      	ldr	r3, [sp, #20]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	dc26      	bgt.n	8006cb2 <_dtoa_r+0x8e2>
 8006c64:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	dd23      	ble.n	8006cb2 <_dtoa_r+0x8e2>
 8006c6a:	9b05      	ldr	r3, [sp, #20]
 8006c6c:	9306      	str	r3, [sp, #24]
 8006c6e:	9b06      	ldr	r3, [sp, #24]
 8006c70:	b973      	cbnz	r3, 8006c90 <_dtoa_r+0x8c0>
 8006c72:	4629      	mov	r1, r5
 8006c74:	2205      	movs	r2, #5
 8006c76:	4650      	mov	r0, sl
 8006c78:	f000 f9d1 	bl	800701e <__multadd>
 8006c7c:	4605      	mov	r5, r0
 8006c7e:	4629      	mov	r1, r5
 8006c80:	9807      	ldr	r0, [sp, #28]
 8006c82:	f000 fb92 	bl	80073aa <__mcmp>
 8006c86:	2800      	cmp	r0, #0
 8006c88:	dc09      	bgt.n	8006c9e <_dtoa_r+0x8ce>
 8006c8a:	e001      	b.n	8006c90 <_dtoa_r+0x8c0>
 8006c8c:	2500      	movs	r5, #0
 8006c8e:	462e      	mov	r6, r5
 8006c90:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006c92:	9c08      	ldr	r4, [sp, #32]
 8006c94:	ea6f 0b03 	mvn.w	fp, r3
 8006c98:	e008      	b.n	8006cac <_dtoa_r+0x8dc>
 8006c9a:	46b3      	mov	fp, r6
 8006c9c:	462e      	mov	r6, r5
 8006c9e:	9b08      	ldr	r3, [sp, #32]
 8006ca0:	9a08      	ldr	r2, [sp, #32]
 8006ca2:	1c5c      	adds	r4, r3, #1
 8006ca4:	2331      	movs	r3, #49	; 0x31
 8006ca6:	7013      	strb	r3, [r2, #0]
 8006ca8:	f10b 0b01 	add.w	fp, fp, #1
 8006cac:	46b1      	mov	r9, r6
 8006cae:	2600      	movs	r6, #0
 8006cb0:	e114      	b.n	8006edc <_dtoa_r+0xb0c>
 8006cb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006cb4:	b923      	cbnz	r3, 8006cc0 <_dtoa_r+0x8f0>
 8006cb6:	9b05      	ldr	r3, [sp, #20]
 8006cb8:	9306      	str	r3, [sp, #24]
 8006cba:	9f08      	ldr	r7, [sp, #32]
 8006cbc:	9c07      	ldr	r4, [sp, #28]
 8006cbe:	e0cc      	b.n	8006e5a <_dtoa_r+0xa8a>
 8006cc0:	9b05      	ldr	r3, [sp, #20]
 8006cc2:	9306      	str	r3, [sp, #24]
 8006cc4:	2c00      	cmp	r4, #0
 8006cc6:	dd05      	ble.n	8006cd4 <_dtoa_r+0x904>
 8006cc8:	4631      	mov	r1, r6
 8006cca:	4650      	mov	r0, sl
 8006ccc:	4622      	mov	r2, r4
 8006cce:	f000 fb19 	bl	8007304 <__lshift>
 8006cd2:	4606      	mov	r6, r0
 8006cd4:	b1b7      	cbz	r7, 8006d04 <_dtoa_r+0x934>
 8006cd6:	6871      	ldr	r1, [r6, #4]
 8006cd8:	4650      	mov	r0, sl
 8006cda:	f000 f954 	bl	8006f86 <_Balloc>
 8006cde:	6932      	ldr	r2, [r6, #16]
 8006ce0:	3202      	adds	r2, #2
 8006ce2:	4604      	mov	r4, r0
 8006ce4:	f106 010c 	add.w	r1, r6, #12
 8006ce8:	0092      	lsls	r2, r2, #2
 8006cea:	300c      	adds	r0, #12
 8006cec:	f7fe fe18 	bl	8005920 <memcpy>
 8006cf0:	4650      	mov	r0, sl
 8006cf2:	4621      	mov	r1, r4
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	f000 fb05 	bl	8007304 <__lshift>
 8006cfa:	4681      	mov	r9, r0
 8006cfc:	e003      	b.n	8006d06 <_dtoa_r+0x936>
 8006cfe:	bf00      	nop
 8006d00:	40240000 	.word	0x40240000
 8006d04:	46b1      	mov	r9, r6
 8006d06:	9f08      	ldr	r7, [sp, #32]
 8006d08:	9c07      	ldr	r4, [sp, #28]
 8006d0a:	4629      	mov	r1, r5
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	f7ff fad1 	bl	80062b4 <quorem>
 8006d12:	4631      	mov	r1, r6
 8006d14:	9009      	str	r0, [sp, #36]	; 0x24
 8006d16:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	f000 fb45 	bl	80073aa <__mcmp>
 8006d20:	464a      	mov	r2, r9
 8006d22:	9005      	str	r0, [sp, #20]
 8006d24:	4629      	mov	r1, r5
 8006d26:	4650      	mov	r0, sl
 8006d28:	f000 fb5b 	bl	80073e2 <__mdiff>
 8006d2c:	68c2      	ldr	r2, [r0, #12]
 8006d2e:	4603      	mov	r3, r0
 8006d30:	b93a      	cbnz	r2, 8006d42 <_dtoa_r+0x972>
 8006d32:	4619      	mov	r1, r3
 8006d34:	4620      	mov	r0, r4
 8006d36:	9307      	str	r3, [sp, #28]
 8006d38:	f000 fb37 	bl	80073aa <__mcmp>
 8006d3c:	9b07      	ldr	r3, [sp, #28]
 8006d3e:	4602      	mov	r2, r0
 8006d40:	e000      	b.n	8006d44 <_dtoa_r+0x974>
 8006d42:	2201      	movs	r2, #1
 8006d44:	4650      	mov	r0, sl
 8006d46:	4619      	mov	r1, r3
 8006d48:	9207      	str	r2, [sp, #28]
 8006d4a:	f000 f951 	bl	8006ff0 <_Bfree>
 8006d4e:	9a07      	ldr	r2, [sp, #28]
 8006d50:	b9a2      	cbnz	r2, 8006d7c <_dtoa_r+0x9ac>
 8006d52:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006d54:	b993      	cbnz	r3, 8006d7c <_dtoa_r+0x9ac>
 8006d56:	9b02      	ldr	r3, [sp, #8]
 8006d58:	f003 0301 	and.w	r3, r3, #1
 8006d5c:	b973      	cbnz	r3, 8006d7c <_dtoa_r+0x9ac>
 8006d5e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006d62:	463b      	mov	r3, r7
 8006d64:	9407      	str	r4, [sp, #28]
 8006d66:	d040      	beq.n	8006dea <_dtoa_r+0xa1a>
 8006d68:	9b05      	ldr	r3, [sp, #20]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	bfc8      	it	gt
 8006d6e:	9b09      	ldrgt	r3, [sp, #36]	; 0x24
 8006d70:	f107 0401 	add.w	r4, r7, #1
 8006d74:	bfc8      	it	gt
 8006d76:	f103 0831 	addgt.w	r8, r3, #49	; 0x31
 8006d7a:	e03d      	b.n	8006df8 <_dtoa_r+0xa28>
 8006d7c:	9b05      	ldr	r3, [sp, #20]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	da04      	bge.n	8006d8c <_dtoa_r+0x9bc>
 8006d82:	2a00      	cmp	r2, #0
 8006d84:	46c4      	mov	ip, r8
 8006d86:	9407      	str	r4, [sp, #28]
 8006d88:	dc08      	bgt.n	8006d9c <_dtoa_r+0x9cc>
 8006d8a:	e021      	b.n	8006dd0 <_dtoa_r+0xa00>
 8006d8c:	d124      	bne.n	8006dd8 <_dtoa_r+0xa08>
 8006d8e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006d90:	bb13      	cbnz	r3, 8006dd8 <_dtoa_r+0xa08>
 8006d92:	9b02      	ldr	r3, [sp, #8]
 8006d94:	f003 0301 	and.w	r3, r3, #1
 8006d98:	b9f3      	cbnz	r3, 8006dd8 <_dtoa_r+0xa08>
 8006d9a:	e7f2      	b.n	8006d82 <_dtoa_r+0x9b2>
 8006d9c:	4621      	mov	r1, r4
 8006d9e:	2201      	movs	r2, #1
 8006da0:	4650      	mov	r0, sl
 8006da2:	9705      	str	r7, [sp, #20]
 8006da4:	f8cd 8008 	str.w	r8, [sp, #8]
 8006da8:	f000 faac 	bl	8007304 <__lshift>
 8006dac:	4629      	mov	r1, r5
 8006dae:	9007      	str	r0, [sp, #28]
 8006db0:	f000 fafb 	bl	80073aa <__mcmp>
 8006db4:	2800      	cmp	r0, #0
 8006db6:	f8dd c008 	ldr.w	ip, [sp, #8]
 8006dba:	9b05      	ldr	r3, [sp, #20]
 8006dbc:	dc03      	bgt.n	8006dc6 <_dtoa_r+0x9f6>
 8006dbe:	d107      	bne.n	8006dd0 <_dtoa_r+0xa00>
 8006dc0:	f018 0f01 	tst.w	r8, #1
 8006dc4:	d004      	beq.n	8006dd0 <_dtoa_r+0xa00>
 8006dc6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006dca:	d00e      	beq.n	8006dea <_dtoa_r+0xa1a>
 8006dcc:	f108 0c01 	add.w	ip, r8, #1
 8006dd0:	1c7c      	adds	r4, r7, #1
 8006dd2:	f887 c000 	strb.w	ip, [r7]
 8006dd6:	e081      	b.n	8006edc <_dtoa_r+0xb0c>
 8006dd8:	2a00      	cmp	r2, #0
 8006dda:	f107 0201 	add.w	r2, r7, #1
 8006dde:	dd0e      	ble.n	8006dfe <_dtoa_r+0xa2e>
 8006de0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006de4:	463b      	mov	r3, r7
 8006de6:	9407      	str	r4, [sp, #28]
 8006de8:	d103      	bne.n	8006df2 <_dtoa_r+0xa22>
 8006dea:	2239      	movs	r2, #57	; 0x39
 8006dec:	3701      	adds	r7, #1
 8006dee:	701a      	strb	r2, [r3, #0]
 8006df0:	e057      	b.n	8006ea2 <_dtoa_r+0xad2>
 8006df2:	4614      	mov	r4, r2
 8006df4:	f108 0801 	add.w	r8, r8, #1
 8006df8:	f887 8000 	strb.w	r8, [r7]
 8006dfc:	e06e      	b.n	8006edc <_dtoa_r+0xb0c>
 8006dfe:	9b08      	ldr	r3, [sp, #32]
 8006e00:	f802 8c01 	strb.w	r8, [r2, #-1]
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	4617      	mov	r7, r2
 8006e08:	9a06      	ldr	r2, [sp, #24]
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d03a      	beq.n	8006e84 <_dtoa_r+0xab4>
 8006e0e:	4621      	mov	r1, r4
 8006e10:	220a      	movs	r2, #10
 8006e12:	2300      	movs	r3, #0
 8006e14:	4650      	mov	r0, sl
 8006e16:	f000 f902 	bl	800701e <__multadd>
 8006e1a:	454e      	cmp	r6, r9
 8006e1c:	4604      	mov	r4, r0
 8006e1e:	4631      	mov	r1, r6
 8006e20:	4650      	mov	r0, sl
 8006e22:	f04f 020a 	mov.w	r2, #10
 8006e26:	f04f 0300 	mov.w	r3, #0
 8006e2a:	d104      	bne.n	8006e36 <_dtoa_r+0xa66>
 8006e2c:	f000 f8f7 	bl	800701e <__multadd>
 8006e30:	4606      	mov	r6, r0
 8006e32:	4681      	mov	r9, r0
 8006e34:	e769      	b.n	8006d0a <_dtoa_r+0x93a>
 8006e36:	f000 f8f2 	bl	800701e <__multadd>
 8006e3a:	4649      	mov	r1, r9
 8006e3c:	4606      	mov	r6, r0
 8006e3e:	220a      	movs	r2, #10
 8006e40:	4650      	mov	r0, sl
 8006e42:	2300      	movs	r3, #0
 8006e44:	f000 f8eb 	bl	800701e <__multadd>
 8006e48:	4681      	mov	r9, r0
 8006e4a:	e75e      	b.n	8006d0a <_dtoa_r+0x93a>
 8006e4c:	4621      	mov	r1, r4
 8006e4e:	4650      	mov	r0, sl
 8006e50:	220a      	movs	r2, #10
 8006e52:	2300      	movs	r3, #0
 8006e54:	f000 f8e3 	bl	800701e <__multadd>
 8006e58:	4604      	mov	r4, r0
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	4629      	mov	r1, r5
 8006e5e:	f7ff fa29 	bl	80062b4 <quorem>
 8006e62:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006e66:	f807 8b01 	strb.w	r8, [r7], #1
 8006e6a:	9b08      	ldr	r3, [sp, #32]
 8006e6c:	9a06      	ldr	r2, [sp, #24]
 8006e6e:	1afb      	subs	r3, r7, r3
 8006e70:	4293      	cmp	r3, r2
 8006e72:	dbeb      	blt.n	8006e4c <_dtoa_r+0xa7c>
 8006e74:	9b08      	ldr	r3, [sp, #32]
 8006e76:	2a01      	cmp	r2, #1
 8006e78:	bfac      	ite	ge
 8006e7a:	189b      	addge	r3, r3, r2
 8006e7c:	3301      	addlt	r3, #1
 8006e7e:	46b1      	mov	r9, r6
 8006e80:	461f      	mov	r7, r3
 8006e82:	2600      	movs	r6, #0
 8006e84:	4621      	mov	r1, r4
 8006e86:	2201      	movs	r2, #1
 8006e88:	4650      	mov	r0, sl
 8006e8a:	f000 fa3b 	bl	8007304 <__lshift>
 8006e8e:	4629      	mov	r1, r5
 8006e90:	9007      	str	r0, [sp, #28]
 8006e92:	f000 fa8a 	bl	80073aa <__mcmp>
 8006e96:	2800      	cmp	r0, #0
 8006e98:	dc03      	bgt.n	8006ea2 <_dtoa_r+0xad2>
 8006e9a:	d116      	bne.n	8006eca <_dtoa_r+0xafa>
 8006e9c:	f018 0f01 	tst.w	r8, #1
 8006ea0:	d013      	beq.n	8006eca <_dtoa_r+0xafa>
 8006ea2:	463c      	mov	r4, r7
 8006ea4:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8006ea8:	2b39      	cmp	r3, #57	; 0x39
 8006eaa:	f104 32ff 	add.w	r2, r4, #4294967295
 8006eae:	d109      	bne.n	8006ec4 <_dtoa_r+0xaf4>
 8006eb0:	9b08      	ldr	r3, [sp, #32]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d104      	bne.n	8006ec0 <_dtoa_r+0xaf0>
 8006eb6:	f10b 0b01 	add.w	fp, fp, #1
 8006eba:	2331      	movs	r3, #49	; 0x31
 8006ebc:	9a08      	ldr	r2, [sp, #32]
 8006ebe:	e002      	b.n	8006ec6 <_dtoa_r+0xaf6>
 8006ec0:	4614      	mov	r4, r2
 8006ec2:	e7ef      	b.n	8006ea4 <_dtoa_r+0xad4>
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	7013      	strb	r3, [r2, #0]
 8006ec8:	e008      	b.n	8006edc <_dtoa_r+0xb0c>
 8006eca:	463c      	mov	r4, r7
 8006ecc:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8006ed0:	2b30      	cmp	r3, #48	; 0x30
 8006ed2:	f104 32ff 	add.w	r2, r4, #4294967295
 8006ed6:	d101      	bne.n	8006edc <_dtoa_r+0xb0c>
 8006ed8:	4614      	mov	r4, r2
 8006eda:	e7f7      	b.n	8006ecc <_dtoa_r+0xafc>
 8006edc:	4650      	mov	r0, sl
 8006ede:	4629      	mov	r1, r5
 8006ee0:	f000 f886 	bl	8006ff0 <_Bfree>
 8006ee4:	f1b9 0f00 	cmp.w	r9, #0
 8006ee8:	d00c      	beq.n	8006f04 <_dtoa_r+0xb34>
 8006eea:	b12e      	cbz	r6, 8006ef8 <_dtoa_r+0xb28>
 8006eec:	454e      	cmp	r6, r9
 8006eee:	d003      	beq.n	8006ef8 <_dtoa_r+0xb28>
 8006ef0:	4650      	mov	r0, sl
 8006ef2:	4631      	mov	r1, r6
 8006ef4:	f000 f87c 	bl	8006ff0 <_Bfree>
 8006ef8:	4650      	mov	r0, sl
 8006efa:	4649      	mov	r1, r9
 8006efc:	f000 f878 	bl	8006ff0 <_Bfree>
 8006f00:	e000      	b.n	8006f04 <_dtoa_r+0xb34>
 8006f02:	46b3      	mov	fp, r6
 8006f04:	4650      	mov	r0, sl
 8006f06:	9907      	ldr	r1, [sp, #28]
 8006f08:	f000 f872 	bl	8006ff0 <_Bfree>
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006f10:	7023      	strb	r3, [r4, #0]
 8006f12:	f10b 0301 	add.w	r3, fp, #1
 8006f16:	6013      	str	r3, [r2, #0]
 8006f18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f1a:	b11b      	cbz	r3, 8006f24 <_dtoa_r+0xb54>
 8006f1c:	601c      	str	r4, [r3, #0]
 8006f1e:	e001      	b.n	8006f24 <_dtoa_r+0xb54>
 8006f20:	480a      	ldr	r0, [pc, #40]	; (8006f4c <_dtoa_r+0xb7c>)
 8006f22:	e00f      	b.n	8006f44 <_dtoa_r+0xb74>
 8006f24:	9808      	ldr	r0, [sp, #32]
 8006f26:	e00d      	b.n	8006f44 <_dtoa_r+0xb74>
 8006f28:	9b06      	ldr	r3, [sp, #24]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	f73f aec5 	bgt.w	8006cba <_dtoa_r+0x8ea>
 8006f30:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	f73f ae9b 	bgt.w	8006c6e <_dtoa_r+0x89e>
 8006f38:	e6bf      	b.n	8006cba <_dtoa_r+0x8ea>
 8006f3a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	f73f ae96 	bgt.w	8006c6e <_dtoa_r+0x89e>
 8006f42:	e6bf      	b.n	8006cc4 <_dtoa_r+0x8f4>
 8006f44:	b015      	add	sp, #84	; 0x54
 8006f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f4a:	bf00      	nop
 8006f4c:	08007cdc 	.word	0x08007cdc

08006f50 <_localeconv_r>:
 8006f50:	4800      	ldr	r0, [pc, #0]	; (8006f54 <_localeconv_r+0x4>)
 8006f52:	4770      	bx	lr
 8006f54:	20000184 	.word	0x20000184

08006f58 <malloc>:
 8006f58:	4b02      	ldr	r3, [pc, #8]	; (8006f64 <malloc+0xc>)
 8006f5a:	4601      	mov	r1, r0
 8006f5c:	6818      	ldr	r0, [r3, #0]
 8006f5e:	f000 bb43 	b.w	80075e8 <_malloc_r>
 8006f62:	bf00      	nop
 8006f64:	20000180 	.word	0x20000180

08006f68 <memchr>:
 8006f68:	b510      	push	{r4, lr}
 8006f6a:	b2c9      	uxtb	r1, r1
 8006f6c:	4402      	add	r2, r0
 8006f6e:	4290      	cmp	r0, r2
 8006f70:	4603      	mov	r3, r0
 8006f72:	d006      	beq.n	8006f82 <memchr+0x1a>
 8006f74:	781c      	ldrb	r4, [r3, #0]
 8006f76:	428c      	cmp	r4, r1
 8006f78:	f100 0001 	add.w	r0, r0, #1
 8006f7c:	d1f7      	bne.n	8006f6e <memchr+0x6>
 8006f7e:	4618      	mov	r0, r3
 8006f80:	bd10      	pop	{r4, pc}
 8006f82:	2000      	movs	r0, #0
 8006f84:	bd10      	pop	{r4, pc}

08006f86 <_Balloc>:
 8006f86:	b570      	push	{r4, r5, r6, lr}
 8006f88:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006f8a:	4604      	mov	r4, r0
 8006f8c:	460e      	mov	r6, r1
 8006f8e:	b93d      	cbnz	r5, 8006fa0 <_Balloc+0x1a>
 8006f90:	2010      	movs	r0, #16
 8006f92:	f7ff ffe1 	bl	8006f58 <malloc>
 8006f96:	6260      	str	r0, [r4, #36]	; 0x24
 8006f98:	6045      	str	r5, [r0, #4]
 8006f9a:	6085      	str	r5, [r0, #8]
 8006f9c:	6005      	str	r5, [r0, #0]
 8006f9e:	60c5      	str	r5, [r0, #12]
 8006fa0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006fa2:	68eb      	ldr	r3, [r5, #12]
 8006fa4:	b143      	cbz	r3, 8006fb8 <_Balloc+0x32>
 8006fa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006fae:	b178      	cbz	r0, 8006fd0 <_Balloc+0x4a>
 8006fb0:	6802      	ldr	r2, [r0, #0]
 8006fb2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006fb6:	e017      	b.n	8006fe8 <_Balloc+0x62>
 8006fb8:	4620      	mov	r0, r4
 8006fba:	2104      	movs	r1, #4
 8006fbc:	2221      	movs	r2, #33	; 0x21
 8006fbe:	f000 fac1 	bl	8007544 <_calloc_r>
 8006fc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fc4:	60e8      	str	r0, [r5, #12]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1ec      	bne.n	8006fa6 <_Balloc+0x20>
 8006fcc:	2000      	movs	r0, #0
 8006fce:	bd70      	pop	{r4, r5, r6, pc}
 8006fd0:	2101      	movs	r1, #1
 8006fd2:	fa01 f506 	lsl.w	r5, r1, r6
 8006fd6:	1d6a      	adds	r2, r5, #5
 8006fd8:	4620      	mov	r0, r4
 8006fda:	0092      	lsls	r2, r2, #2
 8006fdc:	f000 fab2 	bl	8007544 <_calloc_r>
 8006fe0:	2800      	cmp	r0, #0
 8006fe2:	d0f3      	beq.n	8006fcc <_Balloc+0x46>
 8006fe4:	6046      	str	r6, [r0, #4]
 8006fe6:	6085      	str	r5, [r0, #8]
 8006fe8:	2300      	movs	r3, #0
 8006fea:	6103      	str	r3, [r0, #16]
 8006fec:	60c3      	str	r3, [r0, #12]
 8006fee:	bd70      	pop	{r4, r5, r6, pc}

08006ff0 <_Bfree>:
 8006ff0:	b570      	push	{r4, r5, r6, lr}
 8006ff2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006ff4:	4606      	mov	r6, r0
 8006ff6:	460d      	mov	r5, r1
 8006ff8:	b93c      	cbnz	r4, 800700a <_Bfree+0x1a>
 8006ffa:	2010      	movs	r0, #16
 8006ffc:	f7ff ffac 	bl	8006f58 <malloc>
 8007000:	6270      	str	r0, [r6, #36]	; 0x24
 8007002:	6044      	str	r4, [r0, #4]
 8007004:	6084      	str	r4, [r0, #8]
 8007006:	6004      	str	r4, [r0, #0]
 8007008:	60c4      	str	r4, [r0, #12]
 800700a:	b13d      	cbz	r5, 800701c <_Bfree+0x2c>
 800700c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800700e:	686a      	ldr	r2, [r5, #4]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007016:	6029      	str	r1, [r5, #0]
 8007018:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800701c:	bd70      	pop	{r4, r5, r6, pc}

0800701e <__multadd>:
 800701e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007022:	690f      	ldr	r7, [r1, #16]
 8007024:	4698      	mov	r8, r3
 8007026:	4606      	mov	r6, r0
 8007028:	460c      	mov	r4, r1
 800702a:	f101 0e14 	add.w	lr, r1, #20
 800702e:	2300      	movs	r3, #0
 8007030:	f8de 0000 	ldr.w	r0, [lr]
 8007034:	b285      	uxth	r5, r0
 8007036:	0c01      	lsrs	r1, r0, #16
 8007038:	fb02 8505 	mla	r5, r2, r5, r8
 800703c:	4351      	muls	r1, r2
 800703e:	eb01 4115 	add.w	r1, r1, r5, lsr #16
 8007042:	3301      	adds	r3, #1
 8007044:	b2ad      	uxth	r5, r5
 8007046:	ea4f 4811 	mov.w	r8, r1, lsr #16
 800704a:	42bb      	cmp	r3, r7
 800704c:	eb05 4101 	add.w	r1, r5, r1, lsl #16
 8007050:	f84e 1b04 	str.w	r1, [lr], #4
 8007054:	dbec      	blt.n	8007030 <__multadd+0x12>
 8007056:	f1b8 0f00 	cmp.w	r8, #0
 800705a:	d01b      	beq.n	8007094 <__multadd+0x76>
 800705c:	68a3      	ldr	r3, [r4, #8]
 800705e:	429f      	cmp	r7, r3
 8007060:	db12      	blt.n	8007088 <__multadd+0x6a>
 8007062:	6861      	ldr	r1, [r4, #4]
 8007064:	4630      	mov	r0, r6
 8007066:	3101      	adds	r1, #1
 8007068:	f7ff ff8d 	bl	8006f86 <_Balloc>
 800706c:	6922      	ldr	r2, [r4, #16]
 800706e:	3202      	adds	r2, #2
 8007070:	f104 010c 	add.w	r1, r4, #12
 8007074:	4605      	mov	r5, r0
 8007076:	0092      	lsls	r2, r2, #2
 8007078:	300c      	adds	r0, #12
 800707a:	f7fe fc51 	bl	8005920 <memcpy>
 800707e:	4621      	mov	r1, r4
 8007080:	4630      	mov	r0, r6
 8007082:	f7ff ffb5 	bl	8006ff0 <_Bfree>
 8007086:	462c      	mov	r4, r5
 8007088:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 800708c:	3701      	adds	r7, #1
 800708e:	f8c3 8014 	str.w	r8, [r3, #20]
 8007092:	6127      	str	r7, [r4, #16]
 8007094:	4620      	mov	r0, r4
 8007096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800709a <__hi0bits>:
 800709a:	0c03      	lsrs	r3, r0, #16
 800709c:	041b      	lsls	r3, r3, #16
 800709e:	b913      	cbnz	r3, 80070a6 <__hi0bits+0xc>
 80070a0:	0400      	lsls	r0, r0, #16
 80070a2:	2310      	movs	r3, #16
 80070a4:	e000      	b.n	80070a8 <__hi0bits+0xe>
 80070a6:	2300      	movs	r3, #0
 80070a8:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80070ac:	bf04      	itt	eq
 80070ae:	0200      	lsleq	r0, r0, #8
 80070b0:	3308      	addeq	r3, #8
 80070b2:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80070b6:	bf04      	itt	eq
 80070b8:	0100      	lsleq	r0, r0, #4
 80070ba:	3304      	addeq	r3, #4
 80070bc:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80070c0:	bf04      	itt	eq
 80070c2:	0080      	lsleq	r0, r0, #2
 80070c4:	3302      	addeq	r3, #2
 80070c6:	2800      	cmp	r0, #0
 80070c8:	db03      	blt.n	80070d2 <__hi0bits+0x38>
 80070ca:	0042      	lsls	r2, r0, #1
 80070cc:	d503      	bpl.n	80070d6 <__hi0bits+0x3c>
 80070ce:	1c58      	adds	r0, r3, #1
 80070d0:	4770      	bx	lr
 80070d2:	4618      	mov	r0, r3
 80070d4:	4770      	bx	lr
 80070d6:	2020      	movs	r0, #32
 80070d8:	4770      	bx	lr

080070da <__lo0bits>:
 80070da:	6803      	ldr	r3, [r0, #0]
 80070dc:	f013 0207 	ands.w	r2, r3, #7
 80070e0:	d00b      	beq.n	80070fa <__lo0bits+0x20>
 80070e2:	07d9      	lsls	r1, r3, #31
 80070e4:	d422      	bmi.n	800712c <__lo0bits+0x52>
 80070e6:	079a      	lsls	r2, r3, #30
 80070e8:	bf4b      	itete	mi
 80070ea:	085b      	lsrmi	r3, r3, #1
 80070ec:	089b      	lsrpl	r3, r3, #2
 80070ee:	6003      	strmi	r3, [r0, #0]
 80070f0:	6003      	strpl	r3, [r0, #0]
 80070f2:	bf4c      	ite	mi
 80070f4:	2001      	movmi	r0, #1
 80070f6:	2002      	movpl	r0, #2
 80070f8:	4770      	bx	lr
 80070fa:	b299      	uxth	r1, r3
 80070fc:	b909      	cbnz	r1, 8007102 <__lo0bits+0x28>
 80070fe:	0c1b      	lsrs	r3, r3, #16
 8007100:	2210      	movs	r2, #16
 8007102:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007106:	bf04      	itt	eq
 8007108:	0a1b      	lsreq	r3, r3, #8
 800710a:	3208      	addeq	r2, #8
 800710c:	0719      	lsls	r1, r3, #28
 800710e:	bf04      	itt	eq
 8007110:	091b      	lsreq	r3, r3, #4
 8007112:	3204      	addeq	r2, #4
 8007114:	0799      	lsls	r1, r3, #30
 8007116:	bf04      	itt	eq
 8007118:	089b      	lsreq	r3, r3, #2
 800711a:	3202      	addeq	r2, #2
 800711c:	07d9      	lsls	r1, r3, #31
 800711e:	d402      	bmi.n	8007126 <__lo0bits+0x4c>
 8007120:	085b      	lsrs	r3, r3, #1
 8007122:	d005      	beq.n	8007130 <__lo0bits+0x56>
 8007124:	3201      	adds	r2, #1
 8007126:	6003      	str	r3, [r0, #0]
 8007128:	4610      	mov	r0, r2
 800712a:	4770      	bx	lr
 800712c:	2000      	movs	r0, #0
 800712e:	4770      	bx	lr
 8007130:	2020      	movs	r0, #32
 8007132:	4770      	bx	lr

08007134 <__i2b>:
 8007134:	b510      	push	{r4, lr}
 8007136:	460c      	mov	r4, r1
 8007138:	2101      	movs	r1, #1
 800713a:	f7ff ff24 	bl	8006f86 <_Balloc>
 800713e:	2201      	movs	r2, #1
 8007140:	6144      	str	r4, [r0, #20]
 8007142:	6102      	str	r2, [r0, #16]
 8007144:	bd10      	pop	{r4, pc}

08007146 <__multiply>:
 8007146:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800714a:	4614      	mov	r4, r2
 800714c:	690a      	ldr	r2, [r1, #16]
 800714e:	6923      	ldr	r3, [r4, #16]
 8007150:	429a      	cmp	r2, r3
 8007152:	bfb8      	it	lt
 8007154:	460b      	movlt	r3, r1
 8007156:	4688      	mov	r8, r1
 8007158:	bfbc      	itt	lt
 800715a:	46a0      	movlt	r8, r4
 800715c:	461c      	movlt	r4, r3
 800715e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007162:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007166:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800716a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800716e:	eb07 0609 	add.w	r6, r7, r9
 8007172:	429e      	cmp	r6, r3
 8007174:	bfc8      	it	gt
 8007176:	3101      	addgt	r1, #1
 8007178:	f7ff ff05 	bl	8006f86 <_Balloc>
 800717c:	f100 0514 	add.w	r5, r0, #20
 8007180:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 8007184:	462b      	mov	r3, r5
 8007186:	4563      	cmp	r3, ip
 8007188:	d203      	bcs.n	8007192 <__multiply+0x4c>
 800718a:	2200      	movs	r2, #0
 800718c:	f843 2b04 	str.w	r2, [r3], #4
 8007190:	e7f9      	b.n	8007186 <__multiply+0x40>
 8007192:	f104 0214 	add.w	r2, r4, #20
 8007196:	f108 0114 	add.w	r1, r8, #20
 800719a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800719e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80071a2:	9300      	str	r3, [sp, #0]
 80071a4:	9b00      	ldr	r3, [sp, #0]
 80071a6:	9201      	str	r2, [sp, #4]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d257      	bcs.n	800725c <__multiply+0x116>
 80071ac:	f8b2 b000 	ldrh.w	fp, [r2]
 80071b0:	f1bb 0f00 	cmp.w	fp, #0
 80071b4:	d023      	beq.n	80071fe <__multiply+0xb8>
 80071b6:	4689      	mov	r9, r1
 80071b8:	46ae      	mov	lr, r5
 80071ba:	f04f 0800 	mov.w	r8, #0
 80071be:	f859 4b04 	ldr.w	r4, [r9], #4
 80071c2:	f8be a000 	ldrh.w	sl, [lr]
 80071c6:	b2a3      	uxth	r3, r4
 80071c8:	fb0b a303 	mla	r3, fp, r3, sl
 80071cc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80071d0:	f8de 4000 	ldr.w	r4, [lr]
 80071d4:	4443      	add	r3, r8
 80071d6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80071da:	fb0b 840a 	mla	r4, fp, sl, r8
 80071de:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80071e2:	46f2      	mov	sl, lr
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80071ea:	454f      	cmp	r7, r9
 80071ec:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80071f0:	f84a 3b04 	str.w	r3, [sl], #4
 80071f4:	d901      	bls.n	80071fa <__multiply+0xb4>
 80071f6:	46d6      	mov	lr, sl
 80071f8:	e7e1      	b.n	80071be <__multiply+0x78>
 80071fa:	f8ce 8004 	str.w	r8, [lr, #4]
 80071fe:	9b01      	ldr	r3, [sp, #4]
 8007200:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007204:	3204      	adds	r2, #4
 8007206:	f1ba 0f00 	cmp.w	sl, #0
 800720a:	d021      	beq.n	8007250 <__multiply+0x10a>
 800720c:	682b      	ldr	r3, [r5, #0]
 800720e:	462c      	mov	r4, r5
 8007210:	4689      	mov	r9, r1
 8007212:	f04f 0800 	mov.w	r8, #0
 8007216:	f8b9 e000 	ldrh.w	lr, [r9]
 800721a:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 800721e:	fb0a be0e 	mla	lr, sl, lr, fp
 8007222:	44f0      	add	r8, lr
 8007224:	46a3      	mov	fp, r4
 8007226:	b29b      	uxth	r3, r3
 8007228:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800722c:	f84b 3b04 	str.w	r3, [fp], #4
 8007230:	f859 3b04 	ldr.w	r3, [r9], #4
 8007234:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 8007238:	0c1b      	lsrs	r3, r3, #16
 800723a:	fb0a e303 	mla	r3, sl, r3, lr
 800723e:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 8007242:	45b9      	cmp	r9, r7
 8007244:	ea4f 4813 	mov.w	r8, r3, lsr #16
 8007248:	d201      	bcs.n	800724e <__multiply+0x108>
 800724a:	465c      	mov	r4, fp
 800724c:	e7e3      	b.n	8007216 <__multiply+0xd0>
 800724e:	6063      	str	r3, [r4, #4]
 8007250:	3504      	adds	r5, #4
 8007252:	e7a7      	b.n	80071a4 <__multiply+0x5e>
 8007254:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 8007258:	b913      	cbnz	r3, 8007260 <__multiply+0x11a>
 800725a:	3e01      	subs	r6, #1
 800725c:	2e00      	cmp	r6, #0
 800725e:	dcf9      	bgt.n	8007254 <__multiply+0x10e>
 8007260:	6106      	str	r6, [r0, #16]
 8007262:	b003      	add	sp, #12
 8007264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007268 <__pow5mult>:
 8007268:	f012 0303 	ands.w	r3, r2, #3
 800726c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007270:	4606      	mov	r6, r0
 8007272:	460f      	mov	r7, r1
 8007274:	4615      	mov	r5, r2
 8007276:	d007      	beq.n	8007288 <__pow5mult+0x20>
 8007278:	3b01      	subs	r3, #1
 800727a:	4a21      	ldr	r2, [pc, #132]	; (8007300 <__pow5mult+0x98>)
 800727c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007280:	2300      	movs	r3, #0
 8007282:	f7ff fecc 	bl	800701e <__multadd>
 8007286:	4607      	mov	r7, r0
 8007288:	10ad      	asrs	r5, r5, #2
 800728a:	d035      	beq.n	80072f8 <__pow5mult+0x90>
 800728c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800728e:	b93c      	cbnz	r4, 80072a0 <__pow5mult+0x38>
 8007290:	2010      	movs	r0, #16
 8007292:	f7ff fe61 	bl	8006f58 <malloc>
 8007296:	6270      	str	r0, [r6, #36]	; 0x24
 8007298:	6044      	str	r4, [r0, #4]
 800729a:	6084      	str	r4, [r0, #8]
 800729c:	6004      	str	r4, [r0, #0]
 800729e:	60c4      	str	r4, [r0, #12]
 80072a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80072a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80072a8:	b97c      	cbnz	r4, 80072ca <__pow5mult+0x62>
 80072aa:	4630      	mov	r0, r6
 80072ac:	f240 2171 	movw	r1, #625	; 0x271
 80072b0:	f7ff ff40 	bl	8007134 <__i2b>
 80072b4:	2300      	movs	r3, #0
 80072b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80072ba:	4604      	mov	r4, r0
 80072bc:	6003      	str	r3, [r0, #0]
 80072be:	e004      	b.n	80072ca <__pow5mult+0x62>
 80072c0:	106d      	asrs	r5, r5, #1
 80072c2:	d019      	beq.n	80072f8 <__pow5mult+0x90>
 80072c4:	6820      	ldr	r0, [r4, #0]
 80072c6:	b170      	cbz	r0, 80072e6 <__pow5mult+0x7e>
 80072c8:	4604      	mov	r4, r0
 80072ca:	07eb      	lsls	r3, r5, #31
 80072cc:	d5f8      	bpl.n	80072c0 <__pow5mult+0x58>
 80072ce:	4639      	mov	r1, r7
 80072d0:	4622      	mov	r2, r4
 80072d2:	4630      	mov	r0, r6
 80072d4:	f7ff ff37 	bl	8007146 <__multiply>
 80072d8:	4639      	mov	r1, r7
 80072da:	4680      	mov	r8, r0
 80072dc:	4630      	mov	r0, r6
 80072de:	f7ff fe87 	bl	8006ff0 <_Bfree>
 80072e2:	4647      	mov	r7, r8
 80072e4:	e7ec      	b.n	80072c0 <__pow5mult+0x58>
 80072e6:	4630      	mov	r0, r6
 80072e8:	4621      	mov	r1, r4
 80072ea:	4622      	mov	r2, r4
 80072ec:	f7ff ff2b 	bl	8007146 <__multiply>
 80072f0:	2300      	movs	r3, #0
 80072f2:	6020      	str	r0, [r4, #0]
 80072f4:	6003      	str	r3, [r0, #0]
 80072f6:	e7e7      	b.n	80072c8 <__pow5mult+0x60>
 80072f8:	4638      	mov	r0, r7
 80072fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072fe:	bf00      	nop
 8007300:	08007e08 	.word	0x08007e08

08007304 <__lshift>:
 8007304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007308:	460c      	mov	r4, r1
 800730a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800730e:	6923      	ldr	r3, [r4, #16]
 8007310:	6849      	ldr	r1, [r1, #4]
 8007312:	eb0a 0903 	add.w	r9, sl, r3
 8007316:	68a3      	ldr	r3, [r4, #8]
 8007318:	4607      	mov	r7, r0
 800731a:	4616      	mov	r6, r2
 800731c:	f109 0501 	add.w	r5, r9, #1
 8007320:	429d      	cmp	r5, r3
 8007322:	dd02      	ble.n	800732a <__lshift+0x26>
 8007324:	3101      	adds	r1, #1
 8007326:	005b      	lsls	r3, r3, #1
 8007328:	e7fa      	b.n	8007320 <__lshift+0x1c>
 800732a:	4638      	mov	r0, r7
 800732c:	f7ff fe2b 	bl	8006f86 <_Balloc>
 8007330:	2300      	movs	r3, #0
 8007332:	4680      	mov	r8, r0
 8007334:	f100 0114 	add.w	r1, r0, #20
 8007338:	4553      	cmp	r3, sl
 800733a:	da04      	bge.n	8007346 <__lshift+0x42>
 800733c:	2200      	movs	r2, #0
 800733e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007342:	3301      	adds	r3, #1
 8007344:	e7f8      	b.n	8007338 <__lshift+0x34>
 8007346:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 800734a:	6920      	ldr	r0, [r4, #16]
 800734c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8007350:	f016 021f 	ands.w	r2, r6, #31
 8007354:	f104 0114 	add.w	r1, r4, #20
 8007358:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800735c:	d014      	beq.n	8007388 <__lshift+0x84>
 800735e:	f1c2 0c20 	rsb	ip, r2, #32
 8007362:	2000      	movs	r0, #0
 8007364:	680e      	ldr	r6, [r1, #0]
 8007366:	4096      	lsls	r6, r2
 8007368:	4330      	orrs	r0, r6
 800736a:	469a      	mov	sl, r3
 800736c:	f843 0b04 	str.w	r0, [r3], #4
 8007370:	f851 0b04 	ldr.w	r0, [r1], #4
 8007374:	4571      	cmp	r1, lr
 8007376:	fa20 f00c 	lsr.w	r0, r0, ip
 800737a:	d3f3      	bcc.n	8007364 <__lshift+0x60>
 800737c:	f8ca 0004 	str.w	r0, [sl, #4]
 8007380:	b148      	cbz	r0, 8007396 <__lshift+0x92>
 8007382:	f109 0502 	add.w	r5, r9, #2
 8007386:	e006      	b.n	8007396 <__lshift+0x92>
 8007388:	3b04      	subs	r3, #4
 800738a:	f851 2b04 	ldr.w	r2, [r1], #4
 800738e:	f843 2f04 	str.w	r2, [r3, #4]!
 8007392:	4571      	cmp	r1, lr
 8007394:	d3f9      	bcc.n	800738a <__lshift+0x86>
 8007396:	3d01      	subs	r5, #1
 8007398:	4638      	mov	r0, r7
 800739a:	f8c8 5010 	str.w	r5, [r8, #16]
 800739e:	4621      	mov	r1, r4
 80073a0:	f7ff fe26 	bl	8006ff0 <_Bfree>
 80073a4:	4640      	mov	r0, r8
 80073a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080073aa <__mcmp>:
 80073aa:	6903      	ldr	r3, [r0, #16]
 80073ac:	690a      	ldr	r2, [r1, #16]
 80073ae:	1a9b      	subs	r3, r3, r2
 80073b0:	b510      	push	{r4, lr}
 80073b2:	d111      	bne.n	80073d8 <__mcmp+0x2e>
 80073b4:	0092      	lsls	r2, r2, #2
 80073b6:	3014      	adds	r0, #20
 80073b8:	3114      	adds	r1, #20
 80073ba:	1883      	adds	r3, r0, r2
 80073bc:	440a      	add	r2, r1
 80073be:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 80073c2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80073c6:	428c      	cmp	r4, r1
 80073c8:	d002      	beq.n	80073d0 <__mcmp+0x26>
 80073ca:	d307      	bcc.n	80073dc <__mcmp+0x32>
 80073cc:	2001      	movs	r0, #1
 80073ce:	bd10      	pop	{r4, pc}
 80073d0:	4283      	cmp	r3, r0
 80073d2:	d8f4      	bhi.n	80073be <__mcmp+0x14>
 80073d4:	2000      	movs	r0, #0
 80073d6:	bd10      	pop	{r4, pc}
 80073d8:	4618      	mov	r0, r3
 80073da:	bd10      	pop	{r4, pc}
 80073dc:	f04f 30ff 	mov.w	r0, #4294967295
 80073e0:	bd10      	pop	{r4, pc}

080073e2 <__mdiff>:
 80073e2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073e6:	4607      	mov	r7, r0
 80073e8:	460c      	mov	r4, r1
 80073ea:	4608      	mov	r0, r1
 80073ec:	4611      	mov	r1, r2
 80073ee:	4615      	mov	r5, r2
 80073f0:	f7ff ffdb 	bl	80073aa <__mcmp>
 80073f4:	1e06      	subs	r6, r0, #0
 80073f6:	d108      	bne.n	800740a <__mdiff+0x28>
 80073f8:	4638      	mov	r0, r7
 80073fa:	4631      	mov	r1, r6
 80073fc:	f7ff fdc3 	bl	8006f86 <_Balloc>
 8007400:	2301      	movs	r3, #1
 8007402:	6103      	str	r3, [r0, #16]
 8007404:	6146      	str	r6, [r0, #20]
 8007406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800740a:	bfbc      	itt	lt
 800740c:	4623      	movlt	r3, r4
 800740e:	462c      	movlt	r4, r5
 8007410:	4638      	mov	r0, r7
 8007412:	6861      	ldr	r1, [r4, #4]
 8007414:	bfba      	itte	lt
 8007416:	461d      	movlt	r5, r3
 8007418:	2601      	movlt	r6, #1
 800741a:	2600      	movge	r6, #0
 800741c:	f7ff fdb3 	bl	8006f86 <_Balloc>
 8007420:	692b      	ldr	r3, [r5, #16]
 8007422:	60c6      	str	r6, [r0, #12]
 8007424:	6926      	ldr	r6, [r4, #16]
 8007426:	f105 0914 	add.w	r9, r5, #20
 800742a:	3414      	adds	r4, #20
 800742c:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 8007430:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007434:	f100 0514 	add.w	r5, r0, #20
 8007438:	f04f 0c00 	mov.w	ip, #0
 800743c:	f854 3b04 	ldr.w	r3, [r4], #4
 8007440:	f859 2b04 	ldr.w	r2, [r9], #4
 8007444:	fa1c f183 	uxtah	r1, ip, r3
 8007448:	fa1f fe82 	uxth.w	lr, r2
 800744c:	0c12      	lsrs	r2, r2, #16
 800744e:	ebce 0101 	rsb	r1, lr, r1
 8007452:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 8007456:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800745a:	b289      	uxth	r1, r1
 800745c:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007460:	45c8      	cmp	r8, r9
 8007462:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007466:	46a6      	mov	lr, r4
 8007468:	f845 3b04 	str.w	r3, [r5], #4
 800746c:	d8e6      	bhi.n	800743c <__mdiff+0x5a>
 800746e:	45be      	cmp	lr, r7
 8007470:	d20e      	bcs.n	8007490 <__mdiff+0xae>
 8007472:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007476:	fa1c f482 	uxtah	r4, ip, r2
 800747a:	0c12      	lsrs	r2, r2, #16
 800747c:	eb02 4224 	add.w	r2, r2, r4, asr #16
 8007480:	b2a4      	uxth	r4, r4
 8007482:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007486:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 800748a:	f845 2b04 	str.w	r2, [r5], #4
 800748e:	e7ee      	b.n	800746e <__mdiff+0x8c>
 8007490:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007494:	b90b      	cbnz	r3, 800749a <__mdiff+0xb8>
 8007496:	3e01      	subs	r6, #1
 8007498:	e7fa      	b.n	8007490 <__mdiff+0xae>
 800749a:	6106      	str	r6, [r0, #16]
 800749c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080074a0 <__d2b>:
 80074a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80074a4:	2101      	movs	r1, #1
 80074a6:	461c      	mov	r4, r3
 80074a8:	4615      	mov	r5, r2
 80074aa:	9f08      	ldr	r7, [sp, #32]
 80074ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80074ae:	f7ff fd6a 	bl	8006f86 <_Balloc>
 80074b2:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80074b6:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80074ba:	4680      	mov	r8, r0
 80074bc:	b10c      	cbz	r4, 80074c2 <__d2b+0x22>
 80074be:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80074c2:	9201      	str	r2, [sp, #4]
 80074c4:	b1ed      	cbz	r5, 8007502 <__d2b+0x62>
 80074c6:	a802      	add	r0, sp, #8
 80074c8:	f840 5d08 	str.w	r5, [r0, #-8]!
 80074cc:	f7ff fe05 	bl	80070da <__lo0bits>
 80074d0:	9b00      	ldr	r3, [sp, #0]
 80074d2:	b150      	cbz	r0, 80074ea <__d2b+0x4a>
 80074d4:	9a01      	ldr	r2, [sp, #4]
 80074d6:	f1c0 0120 	rsb	r1, r0, #32
 80074da:	fa02 f101 	lsl.w	r1, r2, r1
 80074de:	430b      	orrs	r3, r1
 80074e0:	40c2      	lsrs	r2, r0
 80074e2:	f8c8 3014 	str.w	r3, [r8, #20]
 80074e6:	9201      	str	r2, [sp, #4]
 80074e8:	e001      	b.n	80074ee <__d2b+0x4e>
 80074ea:	f8c8 3014 	str.w	r3, [r8, #20]
 80074ee:	9b01      	ldr	r3, [sp, #4]
 80074f0:	f8c8 3018 	str.w	r3, [r8, #24]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	bf14      	ite	ne
 80074f8:	2502      	movne	r5, #2
 80074fa:	2501      	moveq	r5, #1
 80074fc:	f8c8 5010 	str.w	r5, [r8, #16]
 8007500:	e009      	b.n	8007516 <__d2b+0x76>
 8007502:	a801      	add	r0, sp, #4
 8007504:	f7ff fde9 	bl	80070da <__lo0bits>
 8007508:	2501      	movs	r5, #1
 800750a:	9b01      	ldr	r3, [sp, #4]
 800750c:	f8c8 3014 	str.w	r3, [r8, #20]
 8007510:	f8c8 5010 	str.w	r5, [r8, #16]
 8007514:	3020      	adds	r0, #32
 8007516:	b134      	cbz	r4, 8007526 <__d2b+0x86>
 8007518:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800751c:	4404      	add	r4, r0
 800751e:	603c      	str	r4, [r7, #0]
 8007520:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007524:	e009      	b.n	800753a <__d2b+0x9a>
 8007526:	eb08 0385 	add.w	r3, r8, r5, lsl #2
 800752a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800752e:	6038      	str	r0, [r7, #0]
 8007530:	6918      	ldr	r0, [r3, #16]
 8007532:	f7ff fdb2 	bl	800709a <__hi0bits>
 8007536:	ebc0 1045 	rsb	r0, r0, r5, lsl #5
 800753a:	6030      	str	r0, [r6, #0]
 800753c:	4640      	mov	r0, r8
 800753e:	b002      	add	sp, #8
 8007540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007544 <_calloc_r>:
 8007544:	b538      	push	{r3, r4, r5, lr}
 8007546:	fb02 f401 	mul.w	r4, r2, r1
 800754a:	4621      	mov	r1, r4
 800754c:	f000 f84c 	bl	80075e8 <_malloc_r>
 8007550:	4605      	mov	r5, r0
 8007552:	b118      	cbz	r0, 800755c <_calloc_r+0x18>
 8007554:	2100      	movs	r1, #0
 8007556:	4622      	mov	r2, r4
 8007558:	f7fe f9ed 	bl	8005936 <memset>
 800755c:	4628      	mov	r0, r5
 800755e:	bd38      	pop	{r3, r4, r5, pc}

08007560 <_free_r>:
 8007560:	b530      	push	{r4, r5, lr}
 8007562:	2900      	cmp	r1, #0
 8007564:	d03d      	beq.n	80075e2 <_free_r+0x82>
 8007566:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800756a:	1f0b      	subs	r3, r1, #4
 800756c:	491d      	ldr	r1, [pc, #116]	; (80075e4 <_free_r+0x84>)
 800756e:	2a00      	cmp	r2, #0
 8007570:	bfb8      	it	lt
 8007572:	189b      	addlt	r3, r3, r2
 8007574:	680a      	ldr	r2, [r1, #0]
 8007576:	460c      	mov	r4, r1
 8007578:	b912      	cbnz	r2, 8007580 <_free_r+0x20>
 800757a:	605a      	str	r2, [r3, #4]
 800757c:	600b      	str	r3, [r1, #0]
 800757e:	bd30      	pop	{r4, r5, pc}
 8007580:	4293      	cmp	r3, r2
 8007582:	d20d      	bcs.n	80075a0 <_free_r+0x40>
 8007584:	6819      	ldr	r1, [r3, #0]
 8007586:	1858      	adds	r0, r3, r1
 8007588:	4290      	cmp	r0, r2
 800758a:	bf01      	itttt	eq
 800758c:	585a      	ldreq	r2, [r3, r1]
 800758e:	1852      	addeq	r2, r2, r1
 8007590:	601a      	streq	r2, [r3, #0]
 8007592:	6842      	ldreq	r2, [r0, #4]
 8007594:	605a      	str	r2, [r3, #4]
 8007596:	6023      	str	r3, [r4, #0]
 8007598:	bd30      	pop	{r4, r5, pc}
 800759a:	4299      	cmp	r1, r3
 800759c:	d803      	bhi.n	80075a6 <_free_r+0x46>
 800759e:	460a      	mov	r2, r1
 80075a0:	6851      	ldr	r1, [r2, #4]
 80075a2:	2900      	cmp	r1, #0
 80075a4:	d1f9      	bne.n	800759a <_free_r+0x3a>
 80075a6:	6814      	ldr	r4, [r2, #0]
 80075a8:	1915      	adds	r5, r2, r4
 80075aa:	429d      	cmp	r5, r3
 80075ac:	d10a      	bne.n	80075c4 <_free_r+0x64>
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4423      	add	r3, r4
 80075b2:	18d0      	adds	r0, r2, r3
 80075b4:	4288      	cmp	r0, r1
 80075b6:	6013      	str	r3, [r2, #0]
 80075b8:	d113      	bne.n	80075e2 <_free_r+0x82>
 80075ba:	6808      	ldr	r0, [r1, #0]
 80075bc:	4403      	add	r3, r0
 80075be:	6013      	str	r3, [r2, #0]
 80075c0:	684b      	ldr	r3, [r1, #4]
 80075c2:	e00d      	b.n	80075e0 <_free_r+0x80>
 80075c4:	d902      	bls.n	80075cc <_free_r+0x6c>
 80075c6:	230c      	movs	r3, #12
 80075c8:	6003      	str	r3, [r0, #0]
 80075ca:	bd30      	pop	{r4, r5, pc}
 80075cc:	681c      	ldr	r4, [r3, #0]
 80075ce:	1918      	adds	r0, r3, r4
 80075d0:	4288      	cmp	r0, r1
 80075d2:	bf04      	itt	eq
 80075d4:	6808      	ldreq	r0, [r1, #0]
 80075d6:	6849      	ldreq	r1, [r1, #4]
 80075d8:	6059      	str	r1, [r3, #4]
 80075da:	bf04      	itt	eq
 80075dc:	1900      	addeq	r0, r0, r4
 80075de:	6018      	streq	r0, [r3, #0]
 80075e0:	6053      	str	r3, [r2, #4]
 80075e2:	bd30      	pop	{r4, r5, pc}
 80075e4:	200001ec 	.word	0x200001ec

080075e8 <_malloc_r>:
 80075e8:	b570      	push	{r4, r5, r6, lr}
 80075ea:	1ccc      	adds	r4, r1, #3
 80075ec:	f024 0403 	bic.w	r4, r4, #3
 80075f0:	3408      	adds	r4, #8
 80075f2:	2c0c      	cmp	r4, #12
 80075f4:	bf38      	it	cc
 80075f6:	240c      	movcc	r4, #12
 80075f8:	2c00      	cmp	r4, #0
 80075fa:	4606      	mov	r6, r0
 80075fc:	da03      	bge.n	8007606 <_malloc_r+0x1e>
 80075fe:	230c      	movs	r3, #12
 8007600:	6033      	str	r3, [r6, #0]
 8007602:	2000      	movs	r0, #0
 8007604:	bd70      	pop	{r4, r5, r6, pc}
 8007606:	428c      	cmp	r4, r1
 8007608:	d3f9      	bcc.n	80075fe <_malloc_r+0x16>
 800760a:	4a20      	ldr	r2, [pc, #128]	; (800768c <_malloc_r+0xa4>)
 800760c:	6813      	ldr	r3, [r2, #0]
 800760e:	4610      	mov	r0, r2
 8007610:	4619      	mov	r1, r3
 8007612:	b1a1      	cbz	r1, 800763e <_malloc_r+0x56>
 8007614:	680a      	ldr	r2, [r1, #0]
 8007616:	1b12      	subs	r2, r2, r4
 8007618:	d40e      	bmi.n	8007638 <_malloc_r+0x50>
 800761a:	2a0b      	cmp	r2, #11
 800761c:	d903      	bls.n	8007626 <_malloc_r+0x3e>
 800761e:	600a      	str	r2, [r1, #0]
 8007620:	188b      	adds	r3, r1, r2
 8007622:	508c      	str	r4, [r1, r2]
 8007624:	e01f      	b.n	8007666 <_malloc_r+0x7e>
 8007626:	428b      	cmp	r3, r1
 8007628:	bf0d      	iteet	eq
 800762a:	685a      	ldreq	r2, [r3, #4]
 800762c:	684a      	ldrne	r2, [r1, #4]
 800762e:	605a      	strne	r2, [r3, #4]
 8007630:	6002      	streq	r2, [r0, #0]
 8007632:	bf18      	it	ne
 8007634:	460b      	movne	r3, r1
 8007636:	e016      	b.n	8007666 <_malloc_r+0x7e>
 8007638:	460b      	mov	r3, r1
 800763a:	6849      	ldr	r1, [r1, #4]
 800763c:	e7e9      	b.n	8007612 <_malloc_r+0x2a>
 800763e:	4d14      	ldr	r5, [pc, #80]	; (8007690 <_malloc_r+0xa8>)
 8007640:	682b      	ldr	r3, [r5, #0]
 8007642:	b91b      	cbnz	r3, 800764c <_malloc_r+0x64>
 8007644:	4630      	mov	r0, r6
 8007646:	f000 f971 	bl	800792c <_sbrk_r>
 800764a:	6028      	str	r0, [r5, #0]
 800764c:	4630      	mov	r0, r6
 800764e:	4621      	mov	r1, r4
 8007650:	f000 f96c 	bl	800792c <_sbrk_r>
 8007654:	1c42      	adds	r2, r0, #1
 8007656:	4603      	mov	r3, r0
 8007658:	d0d1      	beq.n	80075fe <_malloc_r+0x16>
 800765a:	1cc5      	adds	r5, r0, #3
 800765c:	f025 0503 	bic.w	r5, r5, #3
 8007660:	4285      	cmp	r5, r0
 8007662:	d10a      	bne.n	800767a <_malloc_r+0x92>
 8007664:	601c      	str	r4, [r3, #0]
 8007666:	f103 000b 	add.w	r0, r3, #11
 800766a:	1d1a      	adds	r2, r3, #4
 800766c:	f020 0007 	bic.w	r0, r0, #7
 8007670:	1a82      	subs	r2, r0, r2
 8007672:	d00a      	beq.n	800768a <_malloc_r+0xa2>
 8007674:	4251      	negs	r1, r2
 8007676:	5099      	str	r1, [r3, r2]
 8007678:	bd70      	pop	{r4, r5, r6, pc}
 800767a:	4630      	mov	r0, r6
 800767c:	1ae9      	subs	r1, r5, r3
 800767e:	f000 f955 	bl	800792c <_sbrk_r>
 8007682:	3001      	adds	r0, #1
 8007684:	d0bb      	beq.n	80075fe <_malloc_r+0x16>
 8007686:	462b      	mov	r3, r5
 8007688:	e7ec      	b.n	8007664 <_malloc_r+0x7c>
 800768a:	bd70      	pop	{r4, r5, r6, pc}
 800768c:	200001ec 	.word	0x200001ec
 8007690:	200001e8 	.word	0x200001e8

08007694 <__ssputs_r>:
 8007694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007698:	688e      	ldr	r6, [r1, #8]
 800769a:	42b3      	cmp	r3, r6
 800769c:	4682      	mov	sl, r0
 800769e:	460c      	mov	r4, r1
 80076a0:	4690      	mov	r8, r2
 80076a2:	4699      	mov	r9, r3
 80076a4:	d340      	bcc.n	8007728 <__ssputs_r+0x94>
 80076a6:	898a      	ldrh	r2, [r1, #12]
 80076a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80076ac:	d03a      	beq.n	8007724 <__ssputs_r+0x90>
 80076ae:	6825      	ldr	r5, [r4, #0]
 80076b0:	6909      	ldr	r1, [r1, #16]
 80076b2:	1a6f      	subs	r7, r5, r1
 80076b4:	6965      	ldr	r5, [r4, #20]
 80076b6:	2302      	movs	r3, #2
 80076b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80076bc:	fb95 f5f3 	sdiv	r5, r5, r3
 80076c0:	1c7b      	adds	r3, r7, #1
 80076c2:	444b      	add	r3, r9
 80076c4:	429d      	cmp	r5, r3
 80076c6:	bf38      	it	cc
 80076c8:	461d      	movcc	r5, r3
 80076ca:	0553      	lsls	r3, r2, #21
 80076cc:	d50f      	bpl.n	80076ee <__ssputs_r+0x5a>
 80076ce:	4629      	mov	r1, r5
 80076d0:	f7ff ff8a 	bl	80075e8 <_malloc_r>
 80076d4:	4606      	mov	r6, r0
 80076d6:	b198      	cbz	r0, 8007700 <__ssputs_r+0x6c>
 80076d8:	6921      	ldr	r1, [r4, #16]
 80076da:	463a      	mov	r2, r7
 80076dc:	f7fe f920 	bl	8005920 <memcpy>
 80076e0:	89a3      	ldrh	r3, [r4, #12]
 80076e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80076e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076ea:	81a3      	strh	r3, [r4, #12]
 80076ec:	e013      	b.n	8007716 <__ssputs_r+0x82>
 80076ee:	462a      	mov	r2, r5
 80076f0:	f000 f947 	bl	8007982 <_realloc_r>
 80076f4:	4606      	mov	r6, r0
 80076f6:	b970      	cbnz	r0, 8007716 <__ssputs_r+0x82>
 80076f8:	4650      	mov	r0, sl
 80076fa:	6921      	ldr	r1, [r4, #16]
 80076fc:	f7ff ff30 	bl	8007560 <_free_r>
 8007700:	230c      	movs	r3, #12
 8007702:	f8ca 3000 	str.w	r3, [sl]
 8007706:	89a3      	ldrh	r3, [r4, #12]
 8007708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800770c:	81a3      	strh	r3, [r4, #12]
 800770e:	f04f 30ff 	mov.w	r0, #4294967295
 8007712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007716:	6126      	str	r6, [r4, #16]
 8007718:	6165      	str	r5, [r4, #20]
 800771a:	443e      	add	r6, r7
 800771c:	1bed      	subs	r5, r5, r7
 800771e:	6026      	str	r6, [r4, #0]
 8007720:	60a5      	str	r5, [r4, #8]
 8007722:	464e      	mov	r6, r9
 8007724:	45b1      	cmp	r9, r6
 8007726:	d200      	bcs.n	800772a <__ssputs_r+0x96>
 8007728:	464e      	mov	r6, r9
 800772a:	4632      	mov	r2, r6
 800772c:	6820      	ldr	r0, [r4, #0]
 800772e:	4641      	mov	r1, r8
 8007730:	f000 f90c 	bl	800794c <memmove>
 8007734:	68a3      	ldr	r3, [r4, #8]
 8007736:	1b9b      	subs	r3, r3, r6
 8007738:	60a3      	str	r3, [r4, #8]
 800773a:	6823      	ldr	r3, [r4, #0]
 800773c:	441e      	add	r6, r3
 800773e:	6026      	str	r6, [r4, #0]
 8007740:	2000      	movs	r0, #0
 8007742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08007748 <_svfiprintf_r>:
 8007748:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800774c:	b09d      	sub	sp, #116	; 0x74
 800774e:	4606      	mov	r6, r0
 8007750:	9303      	str	r3, [sp, #12]
 8007752:	898b      	ldrh	r3, [r1, #12]
 8007754:	061c      	lsls	r4, r3, #24
 8007756:	460d      	mov	r5, r1
 8007758:	4690      	mov	r8, r2
 800775a:	d50c      	bpl.n	8007776 <_svfiprintf_r+0x2e>
 800775c:	690b      	ldr	r3, [r1, #16]
 800775e:	b953      	cbnz	r3, 8007776 <_svfiprintf_r+0x2e>
 8007760:	2140      	movs	r1, #64	; 0x40
 8007762:	f7ff ff41 	bl	80075e8 <_malloc_r>
 8007766:	6028      	str	r0, [r5, #0]
 8007768:	6128      	str	r0, [r5, #16]
 800776a:	b910      	cbnz	r0, 8007772 <_svfiprintf_r+0x2a>
 800776c:	230c      	movs	r3, #12
 800776e:	6033      	str	r3, [r6, #0]
 8007770:	e0cc      	b.n	800790c <_svfiprintf_r+0x1c4>
 8007772:	2340      	movs	r3, #64	; 0x40
 8007774:	616b      	str	r3, [r5, #20]
 8007776:	2300      	movs	r3, #0
 8007778:	9309      	str	r3, [sp, #36]	; 0x24
 800777a:	2320      	movs	r3, #32
 800777c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007780:	2330      	movs	r3, #48	; 0x30
 8007782:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007786:	4643      	mov	r3, r8
 8007788:	461c      	mov	r4, r3
 800778a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800778e:	b91a      	cbnz	r2, 8007798 <_svfiprintf_r+0x50>
 8007790:	ebb4 0908 	subs.w	r9, r4, r8
 8007794:	d00f      	beq.n	80077b6 <_svfiprintf_r+0x6e>
 8007796:	e002      	b.n	800779e <_svfiprintf_r+0x56>
 8007798:	2a25      	cmp	r2, #37	; 0x25
 800779a:	d1f5      	bne.n	8007788 <_svfiprintf_r+0x40>
 800779c:	e7f8      	b.n	8007790 <_svfiprintf_r+0x48>
 800779e:	4630      	mov	r0, r6
 80077a0:	4629      	mov	r1, r5
 80077a2:	4642      	mov	r2, r8
 80077a4:	464b      	mov	r3, r9
 80077a6:	f7ff ff75 	bl	8007694 <__ssputs_r>
 80077aa:	3001      	adds	r0, #1
 80077ac:	f000 80a9 	beq.w	8007902 <_svfiprintf_r+0x1ba>
 80077b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077b2:	444b      	add	r3, r9
 80077b4:	9309      	str	r3, [sp, #36]	; 0x24
 80077b6:	7823      	ldrb	r3, [r4, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f000 80a2 	beq.w	8007902 <_svfiprintf_r+0x1ba>
 80077be:	2300      	movs	r3, #0
 80077c0:	f04f 32ff 	mov.w	r2, #4294967295
 80077c4:	9304      	str	r3, [sp, #16]
 80077c6:	9307      	str	r3, [sp, #28]
 80077c8:	9205      	str	r2, [sp, #20]
 80077ca:	9306      	str	r3, [sp, #24]
 80077cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077d0:	931a      	str	r3, [sp, #104]	; 0x68
 80077d2:	f104 0801 	add.w	r8, r4, #1
 80077d6:	4644      	mov	r4, r8
 80077d8:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8007924 <_svfiprintf_r+0x1dc>
 80077dc:	7821      	ldrb	r1, [r4, #0]
 80077de:	4648      	mov	r0, r9
 80077e0:	2205      	movs	r2, #5
 80077e2:	f7ff fbc1 	bl	8006f68 <memchr>
 80077e6:	f108 0801 	add.w	r8, r8, #1
 80077ea:	9b04      	ldr	r3, [sp, #16]
 80077ec:	b130      	cbz	r0, 80077fc <_svfiprintf_r+0xb4>
 80077ee:	ebc9 0000 	rsb	r0, r9, r0
 80077f2:	2201      	movs	r2, #1
 80077f4:	4082      	lsls	r2, r0
 80077f6:	4313      	orrs	r3, r2
 80077f8:	9304      	str	r3, [sp, #16]
 80077fa:	e7ec      	b.n	80077d6 <_svfiprintf_r+0x8e>
 80077fc:	06d8      	lsls	r0, r3, #27
 80077fe:	bf44      	itt	mi
 8007800:	2220      	movmi	r2, #32
 8007802:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007806:	0719      	lsls	r1, r3, #28
 8007808:	bf44      	itt	mi
 800780a:	222b      	movmi	r2, #43	; 0x2b
 800780c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007810:	7822      	ldrb	r2, [r4, #0]
 8007812:	2a2a      	cmp	r2, #42	; 0x2a
 8007814:	d002      	beq.n	800781c <_svfiprintf_r+0xd4>
 8007816:	9907      	ldr	r1, [sp, #28]
 8007818:	4623      	mov	r3, r4
 800781a:	e00e      	b.n	800783a <_svfiprintf_r+0xf2>
 800781c:	9a03      	ldr	r2, [sp, #12]
 800781e:	1d11      	adds	r1, r2, #4
 8007820:	6812      	ldr	r2, [r2, #0]
 8007822:	9103      	str	r1, [sp, #12]
 8007824:	2a00      	cmp	r2, #0
 8007826:	bfbb      	ittet	lt
 8007828:	4252      	neglt	r2, r2
 800782a:	f043 0302 	orrlt.w	r3, r3, #2
 800782e:	9207      	strge	r2, [sp, #28]
 8007830:	9207      	strlt	r2, [sp, #28]
 8007832:	bfb8      	it	lt
 8007834:	9304      	strlt	r3, [sp, #16]
 8007836:	3401      	adds	r4, #1
 8007838:	e00a      	b.n	8007850 <_svfiprintf_r+0x108>
 800783a:	461c      	mov	r4, r3
 800783c:	3301      	adds	r3, #1
 800783e:	7822      	ldrb	r2, [r4, #0]
 8007840:	3a30      	subs	r2, #48	; 0x30
 8007842:	2a09      	cmp	r2, #9
 8007844:	d803      	bhi.n	800784e <_svfiprintf_r+0x106>
 8007846:	200a      	movs	r0, #10
 8007848:	fb00 2101 	mla	r1, r0, r1, r2
 800784c:	e7f5      	b.n	800783a <_svfiprintf_r+0xf2>
 800784e:	9107      	str	r1, [sp, #28]
 8007850:	7823      	ldrb	r3, [r4, #0]
 8007852:	2b2e      	cmp	r3, #46	; 0x2e
 8007854:	d11a      	bne.n	800788c <_svfiprintf_r+0x144>
 8007856:	7863      	ldrb	r3, [r4, #1]
 8007858:	2b2a      	cmp	r3, #42	; 0x2a
 800785a:	d10a      	bne.n	8007872 <_svfiprintf_r+0x12a>
 800785c:	9b03      	ldr	r3, [sp, #12]
 800785e:	1d1a      	adds	r2, r3, #4
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	9203      	str	r2, [sp, #12]
 8007864:	2b00      	cmp	r3, #0
 8007866:	bfb8      	it	lt
 8007868:	f04f 33ff 	movlt.w	r3, #4294967295
 800786c:	3402      	adds	r4, #2
 800786e:	9305      	str	r3, [sp, #20]
 8007870:	e00c      	b.n	800788c <_svfiprintf_r+0x144>
 8007872:	1c61      	adds	r1, r4, #1
 8007874:	2200      	movs	r2, #0
 8007876:	460c      	mov	r4, r1
 8007878:	3101      	adds	r1, #1
 800787a:	7823      	ldrb	r3, [r4, #0]
 800787c:	3b30      	subs	r3, #48	; 0x30
 800787e:	2b09      	cmp	r3, #9
 8007880:	d803      	bhi.n	800788a <_svfiprintf_r+0x142>
 8007882:	200a      	movs	r0, #10
 8007884:	fb00 3202 	mla	r2, r0, r2, r3
 8007888:	e7f5      	b.n	8007876 <_svfiprintf_r+0x12e>
 800788a:	9205      	str	r2, [sp, #20]
 800788c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8007928 <_svfiprintf_r+0x1e0>
 8007890:	7821      	ldrb	r1, [r4, #0]
 8007892:	4640      	mov	r0, r8
 8007894:	2203      	movs	r2, #3
 8007896:	f7ff fb67 	bl	8006f68 <memchr>
 800789a:	b138      	cbz	r0, 80078ac <_svfiprintf_r+0x164>
 800789c:	9a04      	ldr	r2, [sp, #16]
 800789e:	ebc8 0000 	rsb	r0, r8, r0
 80078a2:	2340      	movs	r3, #64	; 0x40
 80078a4:	4083      	lsls	r3, r0
 80078a6:	4313      	orrs	r3, r2
 80078a8:	9304      	str	r3, [sp, #16]
 80078aa:	3401      	adds	r4, #1
 80078ac:	7821      	ldrb	r1, [r4, #0]
 80078ae:	481a      	ldr	r0, [pc, #104]	; (8007918 <_svfiprintf_r+0x1d0>)
 80078b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078b4:	2206      	movs	r2, #6
 80078b6:	f104 0801 	add.w	r8, r4, #1
 80078ba:	f7ff fb55 	bl	8006f68 <memchr>
 80078be:	b188      	cbz	r0, 80078e4 <_svfiprintf_r+0x19c>
 80078c0:	4b16      	ldr	r3, [pc, #88]	; (800791c <_svfiprintf_r+0x1d4>)
 80078c2:	b933      	cbnz	r3, 80078d2 <_svfiprintf_r+0x18a>
 80078c4:	9b03      	ldr	r3, [sp, #12]
 80078c6:	3307      	adds	r3, #7
 80078c8:	f023 0307 	bic.w	r3, r3, #7
 80078cc:	3308      	adds	r3, #8
 80078ce:	9303      	str	r3, [sp, #12]
 80078d0:	e013      	b.n	80078fa <_svfiprintf_r+0x1b2>
 80078d2:	ab03      	add	r3, sp, #12
 80078d4:	9300      	str	r3, [sp, #0]
 80078d6:	4630      	mov	r0, r6
 80078d8:	a904      	add	r1, sp, #16
 80078da:	462a      	mov	r2, r5
 80078dc:	4b10      	ldr	r3, [pc, #64]	; (8007920 <_svfiprintf_r+0x1d8>)
 80078de:	f7fe f8c1 	bl	8005a64 <_printf_float>
 80078e2:	e007      	b.n	80078f4 <_svfiprintf_r+0x1ac>
 80078e4:	ab03      	add	r3, sp, #12
 80078e6:	9300      	str	r3, [sp, #0]
 80078e8:	4630      	mov	r0, r6
 80078ea:	a904      	add	r1, sp, #16
 80078ec:	462a      	mov	r2, r5
 80078ee:	4b0c      	ldr	r3, [pc, #48]	; (8007920 <_svfiprintf_r+0x1d8>)
 80078f0:	f7fe fb72 	bl	8005fd8 <_printf_i>
 80078f4:	1c42      	adds	r2, r0, #1
 80078f6:	4607      	mov	r7, r0
 80078f8:	d003      	beq.n	8007902 <_svfiprintf_r+0x1ba>
 80078fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078fc:	443b      	add	r3, r7
 80078fe:	9309      	str	r3, [sp, #36]	; 0x24
 8007900:	e741      	b.n	8007786 <_svfiprintf_r+0x3e>
 8007902:	89ab      	ldrh	r3, [r5, #12]
 8007904:	065b      	lsls	r3, r3, #25
 8007906:	d401      	bmi.n	800790c <_svfiprintf_r+0x1c4>
 8007908:	9809      	ldr	r0, [sp, #36]	; 0x24
 800790a:	e001      	b.n	8007910 <_svfiprintf_r+0x1c8>
 800790c:	f04f 30ff 	mov.w	r0, #4294967295
 8007910:	b01d      	add	sp, #116	; 0x74
 8007912:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007916:	bf00      	nop
 8007918:	08007e1e 	.word	0x08007e1e
 800791c:	08005a65 	.word	0x08005a65
 8007920:	08007695 	.word	0x08007695
 8007924:	08007e14 	.word	0x08007e14
 8007928:	08007e1a 	.word	0x08007e1a

0800792c <_sbrk_r>:
 800792c:	b538      	push	{r3, r4, r5, lr}
 800792e:	4c06      	ldr	r4, [pc, #24]	; (8007948 <_sbrk_r+0x1c>)
 8007930:	2300      	movs	r3, #0
 8007932:	4605      	mov	r5, r0
 8007934:	4608      	mov	r0, r1
 8007936:	6023      	str	r3, [r4, #0]
 8007938:	f7fa fb84 	bl	8002044 <_sbrk>
 800793c:	1c43      	adds	r3, r0, #1
 800793e:	d102      	bne.n	8007946 <_sbrk_r+0x1a>
 8007940:	6823      	ldr	r3, [r4, #0]
 8007942:	b103      	cbz	r3, 8007946 <_sbrk_r+0x1a>
 8007944:	602b      	str	r3, [r5, #0]
 8007946:	bd38      	pop	{r3, r4, r5, pc}
 8007948:	200004f4 	.word	0x200004f4

0800794c <memmove>:
 800794c:	4281      	cmp	r1, r0
 800794e:	b510      	push	{r4, lr}
 8007950:	eb01 0302 	add.w	r3, r1, r2
 8007954:	d301      	bcc.n	800795a <memmove+0xe>
 8007956:	1e42      	subs	r2, r0, #1
 8007958:	e00b      	b.n	8007972 <memmove+0x26>
 800795a:	4298      	cmp	r0, r3
 800795c:	d2fb      	bcs.n	8007956 <memmove+0xa>
 800795e:	1881      	adds	r1, r0, r2
 8007960:	1ad2      	subs	r2, r2, r3
 8007962:	42d3      	cmn	r3, r2
 8007964:	d004      	beq.n	8007970 <memmove+0x24>
 8007966:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800796a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800796e:	e7f8      	b.n	8007962 <memmove+0x16>
 8007970:	bd10      	pop	{r4, pc}
 8007972:	4299      	cmp	r1, r3
 8007974:	d004      	beq.n	8007980 <memmove+0x34>
 8007976:	f811 4b01 	ldrb.w	r4, [r1], #1
 800797a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800797e:	e7f8      	b.n	8007972 <memmove+0x26>
 8007980:	bd10      	pop	{r4, pc}

08007982 <_realloc_r>:
 8007982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007984:	4607      	mov	r7, r0
 8007986:	4615      	mov	r5, r2
 8007988:	460e      	mov	r6, r1
 800798a:	b921      	cbnz	r1, 8007996 <_realloc_r+0x14>
 800798c:	4611      	mov	r1, r2
 800798e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007992:	f7ff be29 	b.w	80075e8 <_malloc_r>
 8007996:	b91a      	cbnz	r2, 80079a0 <_realloc_r+0x1e>
 8007998:	f7ff fde2 	bl	8007560 <_free_r>
 800799c:	4628      	mov	r0, r5
 800799e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079a0:	f000 f815 	bl	80079ce <_malloc_usable_size_r>
 80079a4:	42a8      	cmp	r0, r5
 80079a6:	d20e      	bcs.n	80079c6 <_realloc_r+0x44>
 80079a8:	4638      	mov	r0, r7
 80079aa:	4629      	mov	r1, r5
 80079ac:	f7ff fe1c 	bl	80075e8 <_malloc_r>
 80079b0:	4604      	mov	r4, r0
 80079b2:	b150      	cbz	r0, 80079ca <_realloc_r+0x48>
 80079b4:	4631      	mov	r1, r6
 80079b6:	462a      	mov	r2, r5
 80079b8:	f7fd ffb2 	bl	8005920 <memcpy>
 80079bc:	4638      	mov	r0, r7
 80079be:	4631      	mov	r1, r6
 80079c0:	f7ff fdce 	bl	8007560 <_free_r>
 80079c4:	e001      	b.n	80079ca <_realloc_r+0x48>
 80079c6:	4630      	mov	r0, r6
 80079c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079ca:	4620      	mov	r0, r4
 80079cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080079ce <_malloc_usable_size_r>:
 80079ce:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80079d2:	2800      	cmp	r0, #0
 80079d4:	bfbe      	ittt	lt
 80079d6:	1809      	addlt	r1, r1, r0
 80079d8:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 80079dc:	18c0      	addlt	r0, r0, r3
 80079de:	3804      	subs	r0, #4
 80079e0:	4770      	bx	lr
	...

080079e4 <__gedf2>:
 80079e4:	f04f 3cff 	mov.w	ip, #4294967295
 80079e8:	e006      	b.n	80079f8 <__cmpdf2+0x4>
 80079ea:	bf00      	nop

080079ec <__ledf2>:
 80079ec:	f04f 0c01 	mov.w	ip, #1
 80079f0:	e002      	b.n	80079f8 <__cmpdf2+0x4>
 80079f2:	bf00      	nop

080079f4 <__cmpdf2>:
 80079f4:	f04f 0c01 	mov.w	ip, #1
 80079f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80079fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8007a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8007a08:	bf18      	it	ne
 8007a0a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8007a0e:	d01b      	beq.n	8007a48 <__cmpdf2+0x54>
 8007a10:	b001      	add	sp, #4
 8007a12:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8007a16:	bf0c      	ite	eq
 8007a18:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8007a1c:	ea91 0f03 	teqne	r1, r3
 8007a20:	bf02      	ittt	eq
 8007a22:	ea90 0f02 	teqeq	r0, r2
 8007a26:	2000      	moveq	r0, #0
 8007a28:	4770      	bxeq	lr
 8007a2a:	f110 0f00 	cmn.w	r0, #0
 8007a2e:	ea91 0f03 	teq	r1, r3
 8007a32:	bf58      	it	pl
 8007a34:	4299      	cmppl	r1, r3
 8007a36:	bf08      	it	eq
 8007a38:	4290      	cmpeq	r0, r2
 8007a3a:	bf2c      	ite	cs
 8007a3c:	17d8      	asrcs	r0, r3, #31
 8007a3e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8007a42:	f040 0001 	orr.w	r0, r0, #1
 8007a46:	4770      	bx	lr
 8007a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8007a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007a50:	d102      	bne.n	8007a58 <__cmpdf2+0x64>
 8007a52:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8007a56:	d107      	bne.n	8007a68 <__cmpdf2+0x74>
 8007a58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8007a5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007a60:	d1d6      	bne.n	8007a10 <__cmpdf2+0x1c>
 8007a62:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8007a66:	d0d3      	beq.n	8007a10 <__cmpdf2+0x1c>
 8007a68:	f85d 0b04 	ldr.w	r0, [sp], #4
 8007a6c:	4770      	bx	lr
 8007a6e:	bf00      	nop

08007a70 <__aeabi_cdrcmple>:
 8007a70:	4684      	mov	ip, r0
 8007a72:	4610      	mov	r0, r2
 8007a74:	4662      	mov	r2, ip
 8007a76:	468c      	mov	ip, r1
 8007a78:	4619      	mov	r1, r3
 8007a7a:	4663      	mov	r3, ip
 8007a7c:	e000      	b.n	8007a80 <__aeabi_cdcmpeq>
 8007a7e:	bf00      	nop

08007a80 <__aeabi_cdcmpeq>:
 8007a80:	b501      	push	{r0, lr}
 8007a82:	f7ff ffb7 	bl	80079f4 <__cmpdf2>
 8007a86:	2800      	cmp	r0, #0
 8007a88:	bf48      	it	mi
 8007a8a:	f110 0f00 	cmnmi.w	r0, #0
 8007a8e:	bd01      	pop	{r0, pc}

08007a90 <__aeabi_dcmpeq>:
 8007a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007a94:	f7ff fff4 	bl	8007a80 <__aeabi_cdcmpeq>
 8007a98:	bf0c      	ite	eq
 8007a9a:	2001      	moveq	r0, #1
 8007a9c:	2000      	movne	r0, #0
 8007a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8007aa2:	bf00      	nop

08007aa4 <__aeabi_dcmplt>:
 8007aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007aa8:	f7ff ffea 	bl	8007a80 <__aeabi_cdcmpeq>
 8007aac:	bf34      	ite	cc
 8007aae:	2001      	movcc	r0, #1
 8007ab0:	2000      	movcs	r0, #0
 8007ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8007ab6:	bf00      	nop

08007ab8 <__aeabi_dcmple>:
 8007ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007abc:	f7ff ffe0 	bl	8007a80 <__aeabi_cdcmpeq>
 8007ac0:	bf94      	ite	ls
 8007ac2:	2001      	movls	r0, #1
 8007ac4:	2000      	movhi	r0, #0
 8007ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8007aca:	bf00      	nop

08007acc <__aeabi_dcmpge>:
 8007acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007ad0:	f7ff ffce 	bl	8007a70 <__aeabi_cdrcmple>
 8007ad4:	bf94      	ite	ls
 8007ad6:	2001      	movls	r0, #1
 8007ad8:	2000      	movhi	r0, #0
 8007ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8007ade:	bf00      	nop

08007ae0 <__aeabi_dcmpgt>:
 8007ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007ae4:	f7ff ffc4 	bl	8007a70 <__aeabi_cdrcmple>
 8007ae8:	bf34      	ite	cc
 8007aea:	2001      	movcc	r0, #1
 8007aec:	2000      	movcs	r0, #0
 8007aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8007af2:	bf00      	nop

08007af4 <__aeabi_d2iz>:
 8007af4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8007af8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8007afc:	d215      	bcs.n	8007b2a <__aeabi_d2iz+0x36>
 8007afe:	d511      	bpl.n	8007b24 <__aeabi_d2iz+0x30>
 8007b00:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8007b04:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8007b08:	d912      	bls.n	8007b30 <__aeabi_d2iz+0x3c>
 8007b0a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8007b0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b12:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8007b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8007b1a:	fa23 f002 	lsr.w	r0, r3, r2
 8007b1e:	bf18      	it	ne
 8007b20:	4240      	negne	r0, r0
 8007b22:	4770      	bx	lr
 8007b24:	f04f 0000 	mov.w	r0, #0
 8007b28:	4770      	bx	lr
 8007b2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8007b2e:	d105      	bne.n	8007b3c <__aeabi_d2iz+0x48>
 8007b30:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8007b34:	bf08      	it	eq
 8007b36:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8007b3a:	4770      	bx	lr
 8007b3c:	f04f 0000 	mov.w	r0, #0
 8007b40:	4770      	bx	lr
 8007b42:	bf00      	nop
